
c:/Users/her/Downloads/STEMMA-CAPACITIVE-TOUCH-main/STEMMA-CAPACITIVE-TOUCH-main/target/6.1.1/argon/STEMMA-CAPACITIVE-TOUCH-main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001928  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b5944  000b5944  00005944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         0000006c  2003e614  000b5968  0000e614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000017c  2003e680  2003e680  0001e680  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000b59d4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000b59d8  000b59d8  000159d8  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000b59de  000b59de  000159de  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b5a02  000b5a02  00015a02  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   001349df  00000000  00000000  00015a06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00013494  00000000  00000000  0014a3e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    00037df8  00000000  00000000  0015d879  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002988  00000000  00000000  00195671  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000a210  00000000  00000000  00197ff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003cbc8  00000000  00000000  001a2209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00042e57  00000000  00000000  001dedd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001592a1  00000000  00000000  00221c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00007458  00000000  00000000  0037aecc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <strlen>:
   b401c:	4603      	mov	r3, r0
   b401e:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4022:	2a00      	cmp	r2, #0
   b4024:	d1fb      	bne.n	b401e <strlen+0x2>
   b4026:	1a18      	subs	r0, r3, r0
   b4028:	3801      	subs	r0, #1
   b402a:	4770      	bx	lr

000b402c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b402c:	4809      	ldr	r0, [pc, #36]	; (b4054 <module_user_pre_init+0x28>)
   b402e:	490a      	ldr	r1, [pc, #40]	; (b4058 <module_user_pre_init+0x2c>)
   b4030:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4032:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4034:	d005      	beq.n	b4042 <module_user_pre_init+0x16>
   b4036:	4a09      	ldr	r2, [pc, #36]	; (b405c <module_user_pre_init+0x30>)
   b4038:	4282      	cmp	r2, r0
   b403a:	d002      	beq.n	b4042 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f001 fa81 	bl	b5544 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4042:	4807      	ldr	r0, [pc, #28]	; (b4060 <module_user_pre_init+0x34>)
   b4044:	4a07      	ldr	r2, [pc, #28]	; (b4064 <module_user_pre_init+0x38>)
   b4046:	2100      	movs	r1, #0
   b4048:	1a12      	subs	r2, r2, r0
   b404a:	f001 fa89 	bl	b5560 <memset>
    return &link_global_data_start;
}
   b404e:	4801      	ldr	r0, [pc, #4]	; (b4054 <module_user_pre_init+0x28>)
   b4050:	bd08      	pop	{r3, pc}
   b4052:	bf00      	nop
   b4054:	2003e614 	.word	0x2003e614
   b4058:	000b5968 	.word	0x000b5968
   b405c:	2003e680 	.word	0x2003e680
   b4060:	2003e680 	.word	0x2003e680
   b4064:	2003e7fc 	.word	0x2003e7fc

000b4068 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4068:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b406a:	4e07      	ldr	r6, [pc, #28]	; (b4088 <module_user_init+0x20>)
   b406c:	4c07      	ldr	r4, [pc, #28]	; (b408c <module_user_init+0x24>)
    module_user_init_hook();
   b406e:	f000 febb 	bl	b4de8 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4072:	1ba4      	subs	r4, r4, r6
   b4074:	08a4      	lsrs	r4, r4, #2
   b4076:	2500      	movs	r5, #0
   b4078:	42ac      	cmp	r4, r5
   b407a:	d100      	bne.n	b407e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b407c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b407e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4082:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4084:	3501      	adds	r5, #1
   b4086:	e7f7      	b.n	b4078 <module_user_init+0x10>
   b4088:	000b591c 	.word	0x000b591c
   b408c:	000b5944 	.word	0x000b5944

000b4090 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4090:	f000 b814 	b.w	b40bc <setup>

000b4094 <module_user_loop>:
}

void module_user_loop() {
   b4094:	b508      	push	{r3, lr}
    loop();
   b4096:	f000 f887 	bl	b41a8 <loop>
    _post_loop();
}
   b409a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b409e:	f000 be5b 	b.w	b4d58 <_post_loop>

000b40a2 <_Znaj>:
   b40a2:	f000 bc5d 	b.w	b4960 <malloc>

000b40a6 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40a6:	f000 bc63 	b.w	b4970 <free>

000b40aa <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40aa:	7800      	ldrb	r0, [r0, #0]
   b40ac:	fab0 f080 	clz	r0, r0
   b40b0:	0940      	lsrs	r0, r0, #5
   b40b2:	4770      	bx	lr

000b40b4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40b4:	2301      	movs	r3, #1
   b40b6:	7003      	strb	r3, [r0, #0]
   b40b8:	4770      	bx	lr
	...

000b40bc <setup>:
const long interval = 100;         // Interval between LED movements (ms)
int ledPositions[12];              // Position of the moving LED for each touchpad
bool moving[12];                   // If an LED is currently moving for each pad

// setup() runs once, when the device is first turned on.
void setup() {
   b40bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 strip.begin();
   b40be:	4836      	ldr	r0, [pc, #216]	; (b4198 <setup+0xdc>)
   b40c0:	f000 fa4a 	bl	b4558 <_ZN16Adafruit_DotStar5beginEv>
strip1.begin();
   b40c4:	4835      	ldr	r0, [pc, #212]	; (b419c <setup+0xe0>)
   b40c6:	f000 fa47 	bl	b4558 <_ZN16Adafruit_DotStar5beginEv>
 strip2.begin();
   b40ca:	4835      	ldr	r0, [pc, #212]	; (b41a0 <setup+0xe4>)
   b40cc:	f000 fa44 	bl	b4558 <_ZN16Adafruit_DotStar5beginEv>

 strip.show();
   b40d0:	4831      	ldr	r0, [pc, #196]	; (b4198 <setup+0xdc>)
   b40d2:	f000 f99d 	bl	b4410 <_ZN16Adafruit_DotStar4showEv>
 strip1.show();
   b40d6:	4831      	ldr	r0, [pc, #196]	; (b419c <setup+0xe0>)
   b40d8:	f000 f99a 	bl	b4410 <_ZN16Adafruit_DotStar4showEv>
 strip2.show();
   b40dc:	4830      	ldr	r0, [pc, #192]	; (b41a0 <setup+0xe4>)
   b40de:	f000 f997 	bl	b4410 <_ZN16Adafruit_DotStar4showEv>
  
  
  strip.setBrightness(72);
   b40e2:	482d      	ldr	r0, [pc, #180]	; (b4198 <setup+0xdc>)
   b40e4:	2148      	movs	r1, #72	; 0x48
   b40e6:	f000 f969 	bl	b43bc <_ZN16Adafruit_DotStar13setBrightnessEh>
   strip1.setBrightness(72);
   b40ea:	482c      	ldr	r0, [pc, #176]	; (b419c <setup+0xe0>)
   b40ec:	2148      	movs	r1, #72	; 0x48
   b40ee:	f000 f965 	bl	b43bc <_ZN16Adafruit_DotStar13setBrightnessEh>
   strip2.setBrightness(72);
   b40f2:	2148      	movs	r1, #72	; 0x48
   b40f4:	482a      	ldr	r0, [pc, #168]	; (b41a0 <setup+0xe4>)
   b40f6:	f000 f961 	bl	b43bc <_ZN16Adafruit_DotStar13setBrightnessEh>
  // strip2.show();
  // strip3.setBrightness(8);
  // strip3.begin();
  // strip3.show();
  
  Serial.begin(115200);
   b40fa:	f000 ff81 	bl	b5000 <_Z16_fetch_usbserialv>
   b40fe:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   b4102:	f000 ff6d 	bl	b4fe0 <_ZN9USBSerial5beginEl>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   b4106:	2000      	movs	r0, #0
   b4108:	f000 fa66 	bl	b45d8 <hal_timer_millis>
        while (_while() && !_condition()) {
   b410c:	f241 3588 	movw	r5, #5000	; 0x1388
        return hal_timer_millis(nullptr);
   b4110:	4604      	mov	r4, r0
   b4112:	2000      	movs	r0, #0
   b4114:	f000 fa60 	bl	b45d8 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b4118:	1b00      	subs	r0, r0, r4
   b411a:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b411e:	42a8      	cmp	r0, r5
   b4120:	f171 0300 	sbcs.w	r3, r1, #0
   b4124:	d207      	bcs.n	b4136 <setup+0x7a>
  waitFor(Serial.isConnected, 5000);
   b4126:	f000 ff6b 	bl	b5000 <_Z16_fetch_usbserialv>
   b412a:	f000 ff5d 	bl	b4fe8 <_ZN9USBSerial11isConnectedEv>
   b412e:	b910      	cbnz	r0, b4136 <setup+0x7a>
            spark_process();
   b4130:	f000 fc06 	bl	b4940 <spark_process>
        while (_while() && !_condition()) {
   b4134:	e7ed      	b.n	b4112 <setup+0x56>
   b4136:	f000 ff63 	bl	b5000 <_Z16_fetch_usbserialv>
   b413a:	f000 ff55 	bl	b4fe8 <_ZN9USBSerial11isConnectedEv>
  
   Serial.println("Adafruit MPR121 Capacitive Touch sensor test"); 
   b413e:	f000 ff5f 	bl	b5000 <_Z16_fetch_usbserialv>
   b4142:	4918      	ldr	r1, [pc, #96]	; (b41a4 <setup+0xe8>)
   b4144:	f000 fd7b 	bl	b4c3e <_ZN5Print7printlnEPKc>
  //   while (1);
  // }
  // Serial.println("MPR121 found!");

  // Set the initial LED pattern
  for (int i = 0; i < NUMPIXELS; i++) {
   b4148:	2400      	movs	r4, #0

    strip.setPixelColor(i, 0,0,255);
   b414a:	4626      	mov	r6, r4
   b414c:	25ff      	movs	r5, #255	; 0xff
   b414e:	2300      	movs	r3, #0
   b4150:	b2a1      	uxth	r1, r4
   b4152:	461a      	mov	r2, r3
   b4154:	4810      	ldr	r0, [pc, #64]	; (b4198 <setup+0xdc>)
   b4156:	9500      	str	r5, [sp, #0]
   b4158:	9103      	str	r1, [sp, #12]
   b415a:	f000 f91e 	bl	b439a <_ZN16Adafruit_DotStar13setPixelColorEthhh>
    strip1.setPixelColor(i, 0,255,0);
   b415e:	9903      	ldr	r1, [sp, #12]
   b4160:	480e      	ldr	r0, [pc, #56]	; (b419c <setup+0xe0>)
   b4162:	9600      	str	r6, [sp, #0]
   b4164:	462b      	mov	r3, r5
   b4166:	2200      	movs	r2, #0
   b4168:	f000 f917 	bl	b439a <_ZN16Adafruit_DotStar13setPixelColorEthhh>
  for (int i = 0; i < NUMPIXELS; i++) {
   b416c:	3401      	adds	r4, #1
    strip2.setPixelColor(i, 255,0,0);
   b416e:	9903      	ldr	r1, [sp, #12]
   b4170:	480b      	ldr	r0, [pc, #44]	; (b41a0 <setup+0xe4>)
   b4172:	9600      	str	r6, [sp, #0]
   b4174:	2300      	movs	r3, #0
   b4176:	462a      	mov	r2, r5
   b4178:	f000 f90f 	bl	b439a <_ZN16Adafruit_DotStar13setPixelColorEthhh>
  for (int i = 0; i < NUMPIXELS; i++) {
   b417c:	2c3b      	cmp	r4, #59	; 0x3b
   b417e:	d1e5      	bne.n	b414c <setup+0x90>

  }
   strip.show();
   b4180:	4805      	ldr	r0, [pc, #20]	; (b4198 <setup+0xdc>)
   b4182:	f000 f945 	bl	b4410 <_ZN16Adafruit_DotStar4showEv>
   strip1.show();
   b4186:	4805      	ldr	r0, [pc, #20]	; (b419c <setup+0xe0>)
   b4188:	f000 f942 	bl	b4410 <_ZN16Adafruit_DotStar4showEv>
   strip2.show();
   b418c:	4804      	ldr	r0, [pc, #16]	; (b41a0 <setup+0xe4>)

  // strip3.show();
  
}
   b418e:	b004      	add	sp, #16
   b4190:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   strip2.show();
   b4194:	f000 b93c 	b.w	b4410 <_ZN16Adafruit_DotStar4showEv>
   b4198:	2003e690 	.word	0x2003e690
   b419c:	2003e6a0 	.word	0x2003e6a0
   b41a0:	2003e6b0 	.word	0x2003e6b0
   b41a4:	000b56ac 	.word	0x000b56ac

000b41a8 <loop>:
  // }
  // // Save the current touch state for comparison in the next loop
  // lasttouched = currtouched;

  // delay(10); // Small delay for smooth execution
 }
   b41a8:	4770      	bx	lr
	...

000b41ac <_GLOBAL__sub_I_SystemMode>:
   b41ac:	b513      	push	{r0, r1, r4, lr}
SYSTEM_THREAD(ENABLED);
   b41ae:	2100      	movs	r1, #0
   b41b0:	2001      	movs	r0, #1
   b41b2:	f000 fb39 	bl	b4828 <system_thread_set_state>
              error_(SYSTEM_ERROR_NONE) {
   b41b6:	4b13      	ldr	r3, [pc, #76]	; (b4204 <_GLOBAL__sub_I_SystemMode+0x58>)
   b41b8:	2200      	movs	r2, #0
   b41ba:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b41be:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
Adafruit_DotStar strip(NUMPIXELS, DATAPIN1, CLOCKPIN1, DOTSTAR_BGR);
   b41c2:	2406      	movs	r4, #6
   b41c4:	609a      	str	r2, [r3, #8]
        set_system_mode(mode);
   b41c6:	2003      	movs	r0, #3
   b41c8:	f000 fb26 	bl	b4818 <set_system_mode>
   b41cc:	9400      	str	r4, [sp, #0]
   b41ce:	2304      	movs	r3, #4
   b41d0:	2205      	movs	r2, #5
   b41d2:	213b      	movs	r1, #59	; 0x3b
   b41d4:	480c      	ldr	r0, [pc, #48]	; (b4208 <_GLOBAL__sub_I_SystemMode+0x5c>)
   b41d6:	f000 f8ca 	bl	b436e <_ZN16Adafruit_DotStarC1Ethhh>
Adafruit_DotStar strip1(NUMPIXELS, DATAPIN2, CLOCKPIN2, DOTSTAR_BGR);
   b41da:	4623      	mov	r3, r4
   b41dc:	9400      	str	r4, [sp, #0]
   b41de:	2207      	movs	r2, #7
   b41e0:	213b      	movs	r1, #59	; 0x3b
   b41e2:	480a      	ldr	r0, [pc, #40]	; (b420c <_GLOBAL__sub_I_SystemMode+0x60>)
   b41e4:	f000 f8c3 	bl	b436e <_ZN16Adafruit_DotStarC1Ethhh>
Adafruit_DotStar strip2(NUMPIXELS, DATAPIN, CLOCKPIN, DOTSTAR_BGR);
   b41e8:	9400      	str	r4, [sp, #0]
   b41ea:	230f      	movs	r3, #15
   b41ec:	220e      	movs	r2, #14
   b41ee:	213b      	movs	r1, #59	; 0x3b
   b41f0:	4807      	ldr	r0, [pc, #28]	; (b4210 <_GLOBAL__sub_I_SystemMode+0x64>)
   b41f2:	f000 f8bc 	bl	b436e <_ZN16Adafruit_DotStarC1Ethhh>
Adafruit_MPR121 cap = Adafruit_MPR121();
   b41f6:	4807      	ldr	r0, [pc, #28]	; (b4214 <_GLOBAL__sub_I_SystemMode+0x68>)
 }
   b41f8:	b002      	add	sp, #8
   b41fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
Adafruit_MPR121 cap = Adafruit_MPR121();
   b41fe:	f000 b80b 	b.w	b4218 <_ZN15Adafruit_MPR121C1Ev>
   b4202:	bf00      	nop
   b4204:	2003e680 	.word	0x2003e680
   b4208:	2003e690 	.word	0x2003e690
   b420c:	2003e6a0 	.word	0x2003e6a0
   b4210:	2003e6b0 	.word	0x2003e6b0
   b4214:	2003e68c 	.word	0x2003e68c

000b4218 <_ZN15Adafruit_MPR121C1Ev>:
//#define AUTOCONFIG // use autoconfig (Yes it works pretty well!)

/*!
 *  @brief      Default constructor
 */
Adafruit_MPR121::Adafruit_MPR121() {}
   b4218:	2200      	movs	r2, #0
   b421a:	6002      	str	r2, [r0, #0]
   b421c:	4770      	bx	lr
	...

000b4220 <nrf_gpio_pin_clear>:
{
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   b4220:	281f      	cmp	r0, #31
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
        return NRF_P1;
   b4222:	bf86      	itte	hi
   b4224:	4a05      	ldrhi	r2, [pc, #20]	; (b423c <nrf_gpio_pin_clear+0x1c>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   b4226:	f000 001f 	andhi.w	r0, r0, #31
        return NRF_P0;
   b422a:	f04f 42a0 	movls.w	r2, #1342177280	; 0x50000000

__STATIC_INLINE void nrf_gpio_pin_clear(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   b422e:	2301      	movs	r3, #1
   b4230:	fa03 f000 	lsl.w	r0, r3, r0
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   b4234:	f8c2 050c 	str.w	r0, [r2, #1292]	; 0x50c
}
   b4238:	4770      	bx	lr
   b423a:	bf00      	nop
   b423c:	50000300 	.word	0x50000300

000b4240 <_ZN16Adafruit_DotStar11sw_spi_initEv>:
#else
  spi_->end();
#endif
}

void Adafruit_DotStar::sw_spi_init(void) { // Init 'soft' (bitbang) SPI
   b4240:	b510      	push	{r4, lr}
   b4242:	4604      	mov	r4, r0
#if (PLATFORM_ID != 32)
  pinMode(dataPin , OUTPUT);
   b4244:	2101      	movs	r1, #1
   b4246:	7880      	ldrb	r0, [r0, #2]
   b4248:	f001 f8e4 	bl	b5414 <pinMode>
  pinMode(clockPin, OUTPUT);
   b424c:	78e0      	ldrb	r0, [r4, #3]
   b424e:	2101      	movs	r1, #1
   b4250:	f001 f8e0 	bl	b5414 <pinMode>
  pinSet(dataPin , LOW);
   b4254:	490e      	ldr	r1, [pc, #56]	; (b4290 <_ZN16Adafruit_DotStar11sw_spi_initEv+0x50>)
   b4256:	78a3      	ldrb	r3, [r4, #2]
   b4258:	680a      	ldr	r2, [r1, #0]
   b425a:	0118      	lsls	r0, r3, #4
   b425c:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   b4260:	5c10      	ldrb	r0, [r2, r0]
   b4262:	785b      	ldrb	r3, [r3, #1]
   b4264:	f003 031f 	and.w	r3, r3, #31
   b4268:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   b426c:	f7ff ffd8 	bl	b4220 <nrf_gpio_pin_clear>
  pinSet(clockPin, LOW);
   b4270:	78e3      	ldrb	r3, [r4, #3]
   b4272:	680a      	ldr	r2, [r1, #0]
   b4274:	0118      	lsls	r0, r3, #4
   b4276:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   b427a:	5c10      	ldrb	r0, [r2, r0]
   b427c:	785b      	ldrb	r3, [r3, #1]
   b427e:	f003 031f 	and.w	r3, r3, #31
#endif
}
   b4282:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pinSet(clockPin, LOW);
   b4286:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   b428a:	f7ff bfc9 	b.w	b4220 <nrf_gpio_pin_clear>
   b428e:	bf00      	nop
   b4290:	2003e6cc 	.word	0x2003e6cc

000b4294 <_ZN16Adafruit_DotStar10sw_spi_outEh>:
  pinMode(dataPin , INPUT);
  pinMode(clockPin, INPUT);
#endif
}

void Adafruit_DotStar::sw_spi_out(uint8_t n) { // Bitbang SPI write
   b4294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if (PLATFORM_ID != 32)
  for (uint8_t i=8; i--; n <<= 1) {
    if (n & 0x80) pinSet(dataPin, HIGH);
   b4296:	4f25      	ldr	r7, [pc, #148]	; (b432c <_ZN16Adafruit_DotStar10sw_spi_outEh+0x98>)
        return NRF_P1;
   b4298:	4d25      	ldr	r5, [pc, #148]	; (b4330 <_ZN16Adafruit_DotStar10sw_spi_outEh+0x9c>)
void Adafruit_DotStar::sw_spi_out(uint8_t n) { // Bitbang SPI write
   b429a:	4606      	mov	r6, r0
   b429c:	2409      	movs	r4, #9
  for (uint8_t i=8; i--; n <<= 1) {
   b429e:	3c01      	subs	r4, #1
   b42a0:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   b42a4:	d041      	beq.n	b432a <_ZN16Adafruit_DotStar10sw_spi_outEh+0x96>
    if (n & 0x80) pinSet(dataPin, HIGH);
   b42a6:	78b3      	ldrb	r3, [r6, #2]
   b42a8:	683a      	ldr	r2, [r7, #0]
   b42aa:	0118      	lsls	r0, r3, #4
   b42ac:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   b42b0:	5c10      	ldrb	r0, [r2, r0]
   b42b2:	785b      	ldrb	r3, [r3, #1]
   b42b4:	f003 031f 	and.w	r3, r3, #31
   b42b8:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   b42bc:	060b      	lsls	r3, r1, #24
   b42be:	d531      	bpl.n	b4324 <_ZN16Adafruit_DotStar10sw_spi_outEh+0x90>
    if (*p_pin < P0_PIN_NUM)
   b42c0:	281f      	cmp	r0, #31
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   b42c2:	bfc6      	itte	gt
   b42c4:	f000 001f 	andgt.w	r0, r0, #31
        return NRF_P1;
   b42c8:	462a      	movgt	r2, r5
        return NRF_P0;
   b42ca:	f04f 42a0 	movle.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   b42ce:	2301      	movs	r3, #1
   b42d0:	fa03 f000 	lsl.w	r0, r3, r0
    p_reg->OUTSET = set_mask;
   b42d4:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    else          pinSet(dataPin, LOW);
    pinSet(clockPin, HIGH);
   b42d8:	683a      	ldr	r2, [r7, #0]
   b42da:	78f3      	ldrb	r3, [r6, #3]
   b42dc:	0118      	lsls	r0, r3, #4
   b42de:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   b42e2:	5c10      	ldrb	r0, [r2, r0]
   b42e4:	785b      	ldrb	r3, [r3, #1]
   b42e6:	f003 031f 	and.w	r3, r3, #31
   b42ea:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
    if (*p_pin < P0_PIN_NUM)
   b42ee:	2b1f      	cmp	r3, #31
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   b42f0:	bfc6      	itte	gt
   b42f2:	f003 031f 	andgt.w	r3, r3, #31
        return NRF_P1;
   b42f6:	46ac      	movgt	ip, r5
        return NRF_P0;
   b42f8:	f04f 4ca0 	movle.w	ip, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   b42fc:	2001      	movs	r0, #1
   b42fe:	fa00 f303 	lsl.w	r3, r0, r3
    p_reg->OUTSET = set_mask;
   b4302:	f8cc 3508 	str.w	r3, [ip, #1288]	; 0x508
    pinSet(clockPin, LOW);
   b4306:	78f3      	ldrb	r3, [r6, #3]
   b4308:	0118      	lsls	r0, r3, #4
   b430a:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   b430e:	5c10      	ldrb	r0, [r2, r0]
   b4310:	785b      	ldrb	r3, [r3, #1]
   b4312:	f003 031f 	and.w	r3, r3, #31
   b4316:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
  for (uint8_t i=8; i--; n <<= 1) {
   b431a:	0049      	lsls	r1, r1, #1
    pinSet(clockPin, LOW);
   b431c:	f7ff ff80 	bl	b4220 <nrf_gpio_pin_clear>
  for (uint8_t i=8; i--; n <<= 1) {
   b4320:	b2c9      	uxtb	r1, r1
   b4322:	e7bc      	b.n	b429e <_ZN16Adafruit_DotStar10sw_spi_outEh+0xa>
    else          pinSet(dataPin, LOW);
   b4324:	f7ff ff7c 	bl	b4220 <nrf_gpio_pin_clear>
   b4328:	e7d6      	b.n	b42d8 <_ZN16Adafruit_DotStar10sw_spi_outEh+0x44>
  }
#endif
}
   b432a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b432c:	2003e6cc 	.word	0x2003e6cc
   b4330:	50000300 	.word	0x50000300

000b4334 <_ZN16Adafruit_DotStar5clearEv>:

  //__enable_irq();
}

void Adafruit_DotStar::clear() { // Write 0s (off) to full pixel buffer
  memset(pixels, 0, numLEDs * 3);
   b4334:	8802      	ldrh	r2, [r0, #0]
   b4336:	6880      	ldr	r0, [r0, #8]
   b4338:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   b433c:	2100      	movs	r1, #0
   b433e:	f001 b90f 	b.w	b5560 <memset>

000b4342 <_ZN16Adafruit_DotStar12updateLengthEt>:
void Adafruit_DotStar::updateLength(uint16_t n) {
   b4342:	b538      	push	{r3, r4, r5, lr}
   b4344:	4604      	mov	r4, r0
  if (pixels) free(pixels);
   b4346:	6880      	ldr	r0, [r0, #8]
void Adafruit_DotStar::updateLength(uint16_t n) {
   b4348:	460d      	mov	r5, r1
  if (pixels) free(pixels);
   b434a:	b108      	cbz	r0, b4350 <_ZN16Adafruit_DotStar12updateLengthEt+0xe>
   b434c:	f000 fb10 	bl	b4970 <free>
  uint16_t bytes = n * 3;
   b4350:	eb05 0045 	add.w	r0, r5, r5, lsl #1
  if ((pixels = (uint8_t *)malloc(bytes))) {
   b4354:	b280      	uxth	r0, r0
   b4356:	f000 fb03 	bl	b4960 <malloc>
   b435a:	60a0      	str	r0, [r4, #8]
   b435c:	b128      	cbz	r0, b436a <_ZN16Adafruit_DotStar12updateLengthEt+0x28>
    numLEDs = n;
   b435e:	8025      	strh	r5, [r4, #0]
    clear();
   b4360:	4620      	mov	r0, r4
}
   b4362:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    clear();
   b4366:	f7ff bfe5 	b.w	b4334 <_ZN16Adafruit_DotStar5clearEv>
    numLEDs = 0;
   b436a:	8020      	strh	r0, [r4, #0]
}
   b436c:	bd38      	pop	{r3, r4, r5, pc}

000b436e <_ZN16Adafruit_DotStarC1Ethhh>:
Adafruit_DotStar::Adafruit_DotStar(uint16_t n, uint8_t data, uint8_t clock,
   b436e:	b538      	push	{r3, r4, r5, lr}
   b4370:	f89d 5010 	ldrb.w	r5, [sp, #16]
 rOffset(o & 3), gOffset((o >> 2) & 3), bOffset((o >> 4) & 3)
   b4374:	70c3      	strb	r3, [r0, #3]
   b4376:	2300      	movs	r3, #0
   b4378:	7103      	strb	r3, [r0, #4]
   b437a:	6083      	str	r3, [r0, #8]
   b437c:	f005 0303 	and.w	r3, r5, #3
   b4380:	7303      	strb	r3, [r0, #12]
   b4382:	f3c5 0381 	ubfx	r3, r5, #2, #2
   b4386:	f3c5 1501 	ubfx	r5, r5, #4, #2
Adafruit_DotStar::Adafruit_DotStar(uint16_t n, uint8_t data, uint8_t clock,
   b438a:	4604      	mov	r4, r0
 rOffset(o & 3), gOffset((o >> 2) & 3), bOffset((o >> 4) & 3)
   b438c:	7082      	strb	r2, [r0, #2]
   b438e:	7343      	strb	r3, [r0, #13]
   b4390:	7385      	strb	r5, [r0, #14]
  updateLength(n);
   b4392:	f7ff ffd6 	bl	b4342 <_ZN16Adafruit_DotStar12updateLengthEt>
}
   b4396:	4620      	mov	r0, r4
   b4398:	bd38      	pop	{r3, r4, r5, pc}

000b439a <_ZN16Adafruit_DotStar13setPixelColorEthhh>:
}

// Set pixel color, separate R,G,B values (0-255 ea.)
void Adafruit_DotStar::setPixelColor(
 uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
   b439a:	b510      	push	{r4, lr}
  if (n < numLEDs) {
   b439c:	8804      	ldrh	r4, [r0, #0]
   b439e:	428c      	cmp	r4, r1
   b43a0:	d90b      	bls.n	b43ba <_ZN16Adafruit_DotStar13setPixelColorEthhh+0x20>
    uint8_t *p = &pixels[n * 3];
   b43a2:	6884      	ldr	r4, [r0, #8]
   b43a4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   b43a8:	4421      	add	r1, r4
    p[rOffset] = r;
   b43aa:	7b04      	ldrb	r4, [r0, #12]
   b43ac:	550a      	strb	r2, [r1, r4]
    p[gOffset] = g;
   b43ae:	7b42      	ldrb	r2, [r0, #13]
   b43b0:	548b      	strb	r3, [r1, r2]
    p[bOffset] = b;
   b43b2:	7b83      	ldrb	r3, [r0, #14]
   b43b4:	f89d 2008 	ldrb.w	r2, [sp, #8]
   b43b8:	54ca      	strb	r2, [r1, r3]
  }
}
   b43ba:	bd10      	pop	{r4, pc}

000b43bc <_ZN16Adafruit_DotStar13setBrightnessEh>:
  // optimizes the actual scaling math later, allowing a fast 8x8-bit
  // multiply and taking the MSB.  'brightness' is a uint8_t, adding 1
  // here may (intentionally) roll over...so 0 = max brightness (color
  // values are interpreted literally; no scaling), 1 = min brightness
  // (off), 255 = just below max brightness.
  brightness = b + 1;
   b43bc:	3101      	adds	r1, #1
   b43be:	7101      	strb	r1, [r0, #4]
}
   b43c0:	4770      	bx	lr
	...

000b43c4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b43c4:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b43c6:	4c0b      	ldr	r4, [pc, #44]	; (b43f4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b43c8:	7821      	ldrb	r1, [r4, #0]
   b43ca:	f3bf 8f5b 	dmb	ish
   b43ce:	f011 0101 	ands.w	r1, r1, #1
   b43d2:	d10b      	bne.n	b43ec <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b43d4:	4620      	mov	r0, r4
   b43d6:	9101      	str	r1, [sp, #4]
   b43d8:	f7ff fe67 	bl	b40aa <__cxa_guard_acquire>
   b43dc:	9901      	ldr	r1, [sp, #4]
   b43de:	b128      	cbz	r0, b43ec <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b43e0:	4805      	ldr	r0, [pc, #20]	; (b43f8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b43e2:	f000 fb21 	bl	b4a28 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b43e6:	4620      	mov	r0, r4
   b43e8:	f7ff fe64 	bl	b40b4 <__cxa_guard_release>
        return instance;
    }
   b43ec:	4802      	ldr	r0, [pc, #8]	; (b43f8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b43ee:	b002      	add	sp, #8
   b43f0:	bd10      	pop	{r4, pc}
   b43f2:	bf00      	nop
   b43f4:	2003e6c0 	.word	0x2003e6c0
   b43f8:	2003e6c4 	.word	0x2003e6c4

000b43fc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>:
        return instance().setClockSpeed(value, scale);
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
   b43fc:	b507      	push	{r0, r1, r2, lr}
   b43fe:	9001      	str	r0, [sp, #4]
        return instance().transfer(data);
   b4400:	f7ff ffe0 	bl	b43c4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4404:	9901      	ldr	r1, [sp, #4]
    }
   b4406:	b003      	add	sp, #12
   b4408:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().transfer(data);
   b440c:	f000 bbc0 	b.w	b4b90 <_ZN8SPIClass8transferEh>

000b4410 <_ZN16Adafruit_DotStar4showEv>:
void Adafruit_DotStar::show(void) {
   b4410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!pixels) return;
   b4414:	6884      	ldr	r4, [r0, #8]
void Adafruit_DotStar::show(void) {
   b4416:	4607      	mov	r7, r0
  if (!pixels) return;
   b4418:	2c00      	cmp	r4, #0
   b441a:	f000 8085 	beq.w	b4528 <_ZN16Adafruit_DotStar4showEv+0x118>
  if (dataPin == USE_HW_SPI) {
   b441e:	7883      	ldrb	r3, [r0, #2]
  uint16_t n   = numLEDs;              // Counter
   b4420:	8806      	ldrh	r6, [r0, #0]
  uint16_t b16 = (uint16_t)brightness; // Type-convert for fixed-point math
   b4422:	f890 8004 	ldrb.w	r8, [r0, #4]
  if (dataPin == USE_HW_SPI) {
   b4426:	2bff      	cmp	r3, #255	; 0xff
   b4428:	d141      	bne.n	b44ae <_ZN16Adafruit_DotStar4showEv+0x9e>
      spi_out(0);                        // Start-frame marker
   b442a:	2000      	movs	r0, #0
   b442c:	f7ff ffe6 	bl	b43fc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
   b4430:	2000      	movs	r0, #0
   b4432:	f7ff ffe3 	bl	b43fc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
   b4436:	2000      	movs	r0, #0
   b4438:	f7ff ffe0 	bl	b43fc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
   b443c:	2000      	movs	r0, #0
   b443e:	f7ff ffdd 	bl	b43fc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
    if (brightness) {                    // Scale pixel brightness on output
   b4442:	793b      	ldrb	r3, [r7, #4]
   b4444:	b1eb      	cbz	r3, b4482 <_ZN16Adafruit_DotStar4showEv+0x72>
        spi_out(0xFF);                   //  Pixel start
   b4446:	20ff      	movs	r0, #255	; 0xff
   b4448:	f7ff ffd8 	bl	b43fc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
        for (i = 0; i < 3; i++) {
   b444c:	1ce5      	adds	r5, r4, #3
          spi_out((*ptr++ * b16) >> 8);  // Scale, write RGB
   b444e:	f814 0b01 	ldrb.w	r0, [r4], #1
   b4452:	fb10 f008 	smulbb	r0, r0, r8
   b4456:	0a00      	lsrs	r0, r0, #8
   b4458:	f7ff ffd0 	bl	b43fc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
        for (i = 0; i < 3; i++) {
   b445c:	42ac      	cmp	r4, r5
   b445e:	d1f6      	bne.n	b444e <_ZN16Adafruit_DotStar4showEv+0x3e>
      } while (--n);
   b4460:	3e01      	subs	r6, #1
   b4462:	b2b6      	uxth	r6, r6
   b4464:	2e00      	cmp	r6, #0
   b4466:	d1ee      	bne.n	b4446 <_ZN16Adafruit_DotStar4showEv+0x36>
        spi_out(0xFF);                   //  Pixel start
   b4468:	2400      	movs	r4, #0
    for (i = 0; i < ((numLEDs + 15) / 16); i++) {
   b446a:	883a      	ldrh	r2, [r7, #0]
   b446c:	b2e3      	uxtb	r3, r4
   b446e:	320f      	adds	r2, #15
   b4470:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
   b4474:	f104 0401 	add.w	r4, r4, #1
   b4478:	da56      	bge.n	b4528 <_ZN16Adafruit_DotStar4showEv+0x118>
      spi_out(0xFF);
   b447a:	20ff      	movs	r0, #255	; 0xff
   b447c:	f7ff ffbe 	bl	b43fc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
    for (i = 0; i < ((numLEDs + 15) / 16); i++) {
   b4480:	e7f3      	b.n	b446a <_ZN16Adafruit_DotStar4showEv+0x5a>
   b4482:	3403      	adds	r4, #3
        spi_out(0xFF);                   //  Pixel start
   b4484:	20ff      	movs	r0, #255	; 0xff
   b4486:	f7ff ffb9 	bl	b43fc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
          spi_out(*ptr++);               // Write R,G,B
   b448a:	f814 0c03 	ldrb.w	r0, [r4, #-3]
   b448e:	f7ff ffb5 	bl	b43fc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
      } while (--n);
   b4492:	3e01      	subs	r6, #1
          spi_out(*ptr++);               // Write R,G,B
   b4494:	f814 0c02 	ldrb.w	r0, [r4, #-2]
   b4498:	f7ff ffb0 	bl	b43fc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
      } while (--n);
   b449c:	b2b6      	uxth	r6, r6
          spi_out(*ptr++);               // Write R,G,B
   b449e:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   b44a2:	f7ff ffab 	bl	b43fc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
      } while (--n);
   b44a6:	3403      	adds	r4, #3
   b44a8:	2e00      	cmp	r6, #0
   b44aa:	d1eb      	bne.n	b4484 <_ZN16Adafruit_DotStar4showEv+0x74>
   b44ac:	e7dc      	b.n	b4468 <_ZN16Adafruit_DotStar4showEv+0x58>
   b44ae:	2504      	movs	r5, #4
      sw_spi_out(0);                     // Start-frame marker
   b44b0:	2100      	movs	r1, #0
   b44b2:	4638      	mov	r0, r7
    for (i = 0; i < 4; i++) {
   b44b4:	3d01      	subs	r5, #1
      sw_spi_out(0);                     // Start-frame marker
   b44b6:	f7ff feed 	bl	b4294 <_ZN16Adafruit_DotStar10sw_spi_outEh>
    for (i = 0; i < 4; i++) {
   b44ba:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b44be:	d1f7      	bne.n	b44b0 <_ZN16Adafruit_DotStar4showEv+0xa0>
    if (brightness) {                    // Scale pixel brightness on output
   b44c0:	793b      	ldrb	r3, [r7, #4]
   b44c2:	b303      	cbz	r3, b4506 <_ZN16Adafruit_DotStar4showEv+0xf6>
        sw_spi_out(0xFF);                //  Pixel start
   b44c4:	21ff      	movs	r1, #255	; 0xff
   b44c6:	4638      	mov	r0, r7
   b44c8:	f7ff fee4 	bl	b4294 <_ZN16Adafruit_DotStar10sw_spi_outEh>
        for (i = 0; i < 3; i++) {
   b44cc:	1ce5      	adds	r5, r4, #3
          sw_spi_out((*ptr++ * b16) >> 8); // Scale, write
   b44ce:	f814 1b01 	ldrb.w	r1, [r4], #1
   b44d2:	fb11 f108 	smulbb	r1, r1, r8
   b44d6:	0a09      	lsrs	r1, r1, #8
   b44d8:	4638      	mov	r0, r7
   b44da:	f7ff fedb 	bl	b4294 <_ZN16Adafruit_DotStar10sw_spi_outEh>
        for (i = 0; i < 3; i++) {
   b44de:	42ac      	cmp	r4, r5
   b44e0:	d1f5      	bne.n	b44ce <_ZN16Adafruit_DotStar4showEv+0xbe>
      } while (--n);
   b44e2:	3e01      	subs	r6, #1
   b44e4:	b2b6      	uxth	r6, r6
   b44e6:	2e00      	cmp	r6, #0
   b44e8:	d1ec      	bne.n	b44c4 <_ZN16Adafruit_DotStar4showEv+0xb4>
        sw_spi_out(0xFF);                //  Pixel start
   b44ea:	2400      	movs	r4, #0
    for (i = 0; i < ((numLEDs + 15) / 16); i++) {
   b44ec:	883a      	ldrh	r2, [r7, #0]
   b44ee:	b2e3      	uxtb	r3, r4
   b44f0:	320f      	adds	r2, #15
   b44f2:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
   b44f6:	f104 0401 	add.w	r4, r4, #1
   b44fa:	da15      	bge.n	b4528 <_ZN16Adafruit_DotStar4showEv+0x118>
      sw_spi_out(0xFF);
   b44fc:	21ff      	movs	r1, #255	; 0xff
   b44fe:	4638      	mov	r0, r7
   b4500:	f7ff fec8 	bl	b4294 <_ZN16Adafruit_DotStar10sw_spi_outEh>
    for (i = 0; i < ((numLEDs + 15) / 16); i++) {
   b4504:	e7f2      	b.n	b44ec <_ZN16Adafruit_DotStar4showEv+0xdc>
        sw_spi_out(0xFF);                //  Pixel start
   b4506:	21ff      	movs	r1, #255	; 0xff
   b4508:	4638      	mov	r0, r7
   b450a:	f7ff fec3 	bl	b4294 <_ZN16Adafruit_DotStar10sw_spi_outEh>
        for (i = 0; i < 3; i++) {
   b450e:	1ce5      	adds	r5, r4, #3
          sw_spi_out(*ptr++);            // R,G,B
   b4510:	f814 1b01 	ldrb.w	r1, [r4], #1
   b4514:	4638      	mov	r0, r7
   b4516:	f7ff febd 	bl	b4294 <_ZN16Adafruit_DotStar10sw_spi_outEh>
        for (i = 0; i < 3; i++) {
   b451a:	42ac      	cmp	r4, r5
   b451c:	d1f8      	bne.n	b4510 <_ZN16Adafruit_DotStar4showEv+0x100>
      } while (--n);
   b451e:	3e01      	subs	r6, #1
   b4520:	b2b6      	uxth	r6, r6
   b4522:	2e00      	cmp	r6, #0
   b4524:	d1ef      	bne.n	b4506 <_ZN16Adafruit_DotStar4showEv+0xf6>
   b4526:	e7e0      	b.n	b44ea <_ZN16Adafruit_DotStar4showEv+0xda>
}
   b4528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b452c <_ZN16Adafruit_DotStar11hw_spi_initEv>:
void Adafruit_DotStar::hw_spi_init(void) { // Initialize hardware SPI
   b452c:	b508      	push	{r3, lr}
        instance().begin();
   b452e:	f7ff ff49 	bl	b43c4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4532:	f000 fa83 	bl	b4a3c <_ZN8SPIClass5beginEv>
        instance().setClockDivider(divider);
   b4536:	f7ff ff45 	bl	b43c4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b453a:	2108      	movs	r1, #8
   b453c:	f000 fb02 	bl	b4b44 <_ZN8SPIClass15setClockDividerEh>
        instance().setBitOrder(order);
   b4540:	f7ff ff40 	bl	b43c4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4544:	2101      	movs	r1, #1
   b4546:	f000 fa8d 	bl	b4a64 <_ZN8SPIClass11setBitOrderEh>
        instance().setDataMode(mode);
   b454a:	f7ff ff3b 	bl	b43c4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
}
   b454e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4552:	2100      	movs	r1, #0
   b4554:	f000 ba9a 	b.w	b4a8c <_ZN8SPIClass11setDataModeEh>

000b4558 <_ZN16Adafruit_DotStar5beginEv>:
  if (dataPin == USE_HW_SPI) hw_spi_init();
   b4558:	7883      	ldrb	r3, [r0, #2]
   b455a:	2bff      	cmp	r3, #255	; 0xff
   b455c:	d101      	bne.n	b4562 <_ZN16Adafruit_DotStar5beginEv+0xa>
   b455e:	f7ff bfe5 	b.w	b452c <_ZN16Adafruit_DotStar11hw_spi_initEv>
  else                       sw_spi_init();
   b4562:	f7ff be6d 	b.w	b4240 <_ZN16Adafruit_DotStar11sw_spi_initEv>
	...

000b4568 <_GLOBAL__sub_I_PIN_MAP2>:
    uint32_t color = ColorHSV(hue, saturation, brightness);
    if (gammify)
      color = gamma32(color);
    setPixelColor(i, color);
  }
}
   b4568:	b508      	push	{r3, lr}
  NRF5x_Pin_Info* PIN_MAP2 = hal_pin_map();
   b456a:	f000 f815 	bl	b4598 <hal_pin_map>
   b456e:	4b01      	ldr	r3, [pc, #4]	; (b4574 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
   b4570:	6018      	str	r0, [r3, #0]
}
   b4572:	bd08      	pop	{r3, pc}
   b4574:	2003e6cc 	.word	0x2003e6cc

000b4578 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4578:	b508      	push	{r3, lr}
   b457a:	4b02      	ldr	r3, [pc, #8]	; (b4584 <netdb_freeaddrinfo+0xc>)
   b457c:	681b      	ldr	r3, [r3, #0]
   b457e:	689b      	ldr	r3, [r3, #8]
   b4580:	9301      	str	r3, [sp, #4]
   b4582:	bd08      	pop	{r3, pc}
   b4584:	00030268 	.word	0x00030268

000b4588 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4588:	b508      	push	{r3, lr}
   b458a:	4b02      	ldr	r3, [pc, #8]	; (b4594 <netdb_getaddrinfo+0xc>)
   b458c:	681b      	ldr	r3, [r3, #0]
   b458e:	68db      	ldr	r3, [r3, #12]
   b4590:	9301      	str	r3, [sp, #4]
   b4592:	bd08      	pop	{r3, pc}
   b4594:	00030268 	.word	0x00030268

000b4598 <hal_pin_map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
   b4598:	b508      	push	{r3, lr}
   b459a:	4b02      	ldr	r3, [pc, #8]	; (b45a4 <hal_pin_map+0xc>)
   b459c:	681b      	ldr	r3, [r3, #0]
   b459e:	681b      	ldr	r3, [r3, #0]
   b45a0:	9301      	str	r3, [sp, #4]
   b45a2:	bd08      	pop	{r3, pc}
   b45a4:	0003022c 	.word	0x0003022c

000b45a8 <hal_gpio_mode>:
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b45a8:	b508      	push	{r3, lr}
   b45aa:	4b02      	ldr	r3, [pc, #8]	; (b45b4 <hal_gpio_mode+0xc>)
   b45ac:	681b      	ldr	r3, [r3, #0]
   b45ae:	689b      	ldr	r3, [r3, #8]
   b45b0:	9301      	str	r3, [sp, #4]
   b45b2:	bd08      	pop	{r3, pc}
   b45b4:	0003022c 	.word	0x0003022c

000b45b8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b45b8:	b508      	push	{r3, lr}
   b45ba:	4b02      	ldr	r3, [pc, #8]	; (b45c4 <HAL_RNG_GetRandomNumber+0xc>)
   b45bc:	681b      	ldr	r3, [r3, #0]
   b45be:	685b      	ldr	r3, [r3, #4]
   b45c0:	9301      	str	r3, [sp, #4]
   b45c2:	bd08      	pop	{r3, pc}
   b45c4:	00030218 	.word	0x00030218

000b45c8 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b45c8:	b508      	push	{r3, lr}
   b45ca:	4b02      	ldr	r3, [pc, #8]	; (b45d4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b45cc:	681b      	ldr	r3, [r3, #0]
   b45ce:	695b      	ldr	r3, [r3, #20]
   b45d0:	9301      	str	r3, [sp, #4]
   b45d2:	bd08      	pop	{r3, pc}
   b45d4:	00030218 	.word	0x00030218

000b45d8 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b45d8:	b508      	push	{r3, lr}
   b45da:	4b02      	ldr	r3, [pc, #8]	; (b45e4 <hal_timer_millis+0xc>)
   b45dc:	681b      	ldr	r3, [r3, #0]
   b45de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b45e0:	9301      	str	r3, [sp, #4]
   b45e2:	bd08      	pop	{r3, pc}
   b45e4:	00030218 	.word	0x00030218

000b45e8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b45e8:	b508      	push	{r3, lr}
   b45ea:	4b02      	ldr	r3, [pc, #8]	; (b45f4 <os_mutex_recursive_create+0xc>)
   b45ec:	681b      	ldr	r3, [r3, #0]
   b45ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b45f0:	9301      	str	r3, [sp, #4]
   b45f2:	bd08      	pop	{r3, pc}
   b45f4:	00030248 	.word	0x00030248

000b45f8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b45f8:	b508      	push	{r3, lr}
   b45fa:	4b02      	ldr	r3, [pc, #8]	; (b4604 <inet_inet_ntop+0xc>)
   b45fc:	681b      	ldr	r3, [r3, #0]
   b45fe:	695b      	ldr	r3, [r3, #20]
   b4600:	9301      	str	r3, [sp, #4]
   b4602:	bd08      	pop	{r3, pc}
   b4604:	00030264 	.word	0x00030264

000b4608 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4608:	b508      	push	{r3, lr}
   b460a:	4b02      	ldr	r3, [pc, #8]	; (b4614 <hal_usart_write+0xc>)
   b460c:	681b      	ldr	r3, [r3, #0]
   b460e:	68db      	ldr	r3, [r3, #12]
   b4610:	9301      	str	r3, [sp, #4]
   b4612:	bd08      	pop	{r3, pc}
   b4614:	0003023c 	.word	0x0003023c

000b4618 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4618:	b508      	push	{r3, lr}
   b461a:	4b02      	ldr	r3, [pc, #8]	; (b4624 <hal_usart_available+0xc>)
   b461c:	681b      	ldr	r3, [r3, #0]
   b461e:	691b      	ldr	r3, [r3, #16]
   b4620:	9301      	str	r3, [sp, #4]
   b4622:	bd08      	pop	{r3, pc}
   b4624:	0003023c 	.word	0x0003023c

000b4628 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4628:	b508      	push	{r3, lr}
   b462a:	4b02      	ldr	r3, [pc, #8]	; (b4634 <hal_usart_read+0xc>)
   b462c:	681b      	ldr	r3, [r3, #0]
   b462e:	695b      	ldr	r3, [r3, #20]
   b4630:	9301      	str	r3, [sp, #4]
   b4632:	bd08      	pop	{r3, pc}
   b4634:	0003023c 	.word	0x0003023c

000b4638 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4638:	b508      	push	{r3, lr}
   b463a:	4b02      	ldr	r3, [pc, #8]	; (b4644 <hal_usart_peek+0xc>)
   b463c:	681b      	ldr	r3, [r3, #0]
   b463e:	699b      	ldr	r3, [r3, #24]
   b4640:	9301      	str	r3, [sp, #4]
   b4642:	bd08      	pop	{r3, pc}
   b4644:	0003023c 	.word	0x0003023c

000b4648 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4648:	b508      	push	{r3, lr}
   b464a:	4b02      	ldr	r3, [pc, #8]	; (b4654 <hal_usart_flush+0xc>)
   b464c:	681b      	ldr	r3, [r3, #0]
   b464e:	69db      	ldr	r3, [r3, #28]
   b4650:	9301      	str	r3, [sp, #4]
   b4652:	bd08      	pop	{r3, pc}
   b4654:	0003023c 	.word	0x0003023c

000b4658 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4658:	b508      	push	{r3, lr}
   b465a:	4b02      	ldr	r3, [pc, #8]	; (b4664 <hal_usart_is_enabled+0xc>)
   b465c:	681b      	ldr	r3, [r3, #0]
   b465e:	6a1b      	ldr	r3, [r3, #32]
   b4660:	9301      	str	r3, [sp, #4]
   b4662:	bd08      	pop	{r3, pc}
   b4664:	0003023c 	.word	0x0003023c

000b4668 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4668:	b508      	push	{r3, lr}
   b466a:	4b02      	ldr	r3, [pc, #8]	; (b4674 <hal_usart_available_data_for_write+0xc>)
   b466c:	681b      	ldr	r3, [r3, #0]
   b466e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4670:	9301      	str	r3, [sp, #4]
   b4672:	bd08      	pop	{r3, pc}
   b4674:	0003023c 	.word	0x0003023c

000b4678 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4678:	b508      	push	{r3, lr}
   b467a:	4b02      	ldr	r3, [pc, #8]	; (b4684 <hal_usart_init_ex+0xc>)
   b467c:	681b      	ldr	r3, [r3, #0]
   b467e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4680:	9301      	str	r3, [sp, #4]
   b4682:	bd08      	pop	{r3, pc}
   b4684:	0003023c 	.word	0x0003023c

000b4688 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4688:	b508      	push	{r3, lr}
   b468a:	4b02      	ldr	r3, [pc, #8]	; (b4694 <hal_i2c_write+0xc>)
   b468c:	681b      	ldr	r3, [r3, #0]
   b468e:	6a1b      	ldr	r3, [r3, #32]
   b4690:	9301      	str	r3, [sp, #4]
   b4692:	bd08      	pop	{r3, pc}
   b4694:	00030228 	.word	0x00030228

000b4698 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4698:	b508      	push	{r3, lr}
   b469a:	4b02      	ldr	r3, [pc, #8]	; (b46a4 <hal_i2c_available+0xc>)
   b469c:	681b      	ldr	r3, [r3, #0]
   b469e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b46a0:	9301      	str	r3, [sp, #4]
   b46a2:	bd08      	pop	{r3, pc}
   b46a4:	00030228 	.word	0x00030228

000b46a8 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b46a8:	b508      	push	{r3, lr}
   b46aa:	4b02      	ldr	r3, [pc, #8]	; (b46b4 <hal_i2c_read+0xc>)
   b46ac:	681b      	ldr	r3, [r3, #0]
   b46ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b46b0:	9301      	str	r3, [sp, #4]
   b46b2:	bd08      	pop	{r3, pc}
   b46b4:	00030228 	.word	0x00030228

000b46b8 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b46b8:	b508      	push	{r3, lr}
   b46ba:	4b02      	ldr	r3, [pc, #8]	; (b46c4 <hal_i2c_peek+0xc>)
   b46bc:	681b      	ldr	r3, [r3, #0]
   b46be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b46c0:	9301      	str	r3, [sp, #4]
   b46c2:	bd08      	pop	{r3, pc}
   b46c4:	00030228 	.word	0x00030228

000b46c8 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b46c8:	b508      	push	{r3, lr}
   b46ca:	4b02      	ldr	r3, [pc, #8]	; (b46d4 <hal_i2c_flush+0xc>)
   b46cc:	681b      	ldr	r3, [r3, #0]
   b46ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b46d0:	9301      	str	r3, [sp, #4]
   b46d2:	bd08      	pop	{r3, pc}
   b46d4:	00030228 	.word	0x00030228

000b46d8 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b46d8:	b508      	push	{r3, lr}
   b46da:	4b02      	ldr	r3, [pc, #8]	; (b46e4 <hal_i2c_is_enabled+0xc>)
   b46dc:	681b      	ldr	r3, [r3, #0]
   b46de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b46e0:	9301      	str	r3, [sp, #4]
   b46e2:	bd08      	pop	{r3, pc}
   b46e4:	00030228 	.word	0x00030228

000b46e8 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b46e8:	b508      	push	{r3, lr}
   b46ea:	4b02      	ldr	r3, [pc, #8]	; (b46f4 <hal_i2c_init+0xc>)
   b46ec:	681b      	ldr	r3, [r3, #0]
   b46ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b46f0:	9301      	str	r3, [sp, #4]
   b46f2:	bd08      	pop	{r3, pc}
   b46f4:	00030228 	.word	0x00030228

000b46f8 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b46f8:	b508      	push	{r3, lr}
   b46fa:	4b02      	ldr	r3, [pc, #8]	; (b4704 <hal_spi_begin+0xc>)
   b46fc:	681b      	ldr	r3, [r3, #0]
   b46fe:	681b      	ldr	r3, [r3, #0]
   b4700:	9301      	str	r3, [sp, #4]
   b4702:	bd08      	pop	{r3, pc}
   b4704:	00030230 	.word	0x00030230

000b4708 <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   b4708:	b508      	push	{r3, lr}
   b470a:	4b02      	ldr	r3, [pc, #8]	; (b4714 <hal_spi_set_bit_order+0xc>)
   b470c:	681b      	ldr	r3, [r3, #0]
   b470e:	689b      	ldr	r3, [r3, #8]
   b4710:	9301      	str	r3, [sp, #4]
   b4712:	bd08      	pop	{r3, pc}
   b4714:	00030230 	.word	0x00030230

000b4718 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   b4718:	b508      	push	{r3, lr}
   b471a:	4b02      	ldr	r3, [pc, #8]	; (b4724 <hal_spi_set_data_mode+0xc>)
   b471c:	681b      	ldr	r3, [r3, #0]
   b471e:	68db      	ldr	r3, [r3, #12]
   b4720:	9301      	str	r3, [sp, #4]
   b4722:	bd08      	pop	{r3, pc}
   b4724:	00030230 	.word	0x00030230

000b4728 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   b4728:	b508      	push	{r3, lr}
   b472a:	4b02      	ldr	r3, [pc, #8]	; (b4734 <hal_spi_set_clock_divider+0xc>)
   b472c:	681b      	ldr	r3, [r3, #0]
   b472e:	691b      	ldr	r3, [r3, #16]
   b4730:	9301      	str	r3, [sp, #4]
   b4732:	bd08      	pop	{r3, pc}
   b4734:	00030230 	.word	0x00030230

000b4738 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b4738:	b508      	push	{r3, lr}
   b473a:	4b02      	ldr	r3, [pc, #8]	; (b4744 <hal_spi_transfer+0xc>)
   b473c:	681b      	ldr	r3, [r3, #0]
   b473e:	695b      	ldr	r3, [r3, #20]
   b4740:	9301      	str	r3, [sp, #4]
   b4742:	bd08      	pop	{r3, pc}
   b4744:	00030230 	.word	0x00030230

000b4748 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4748:	b508      	push	{r3, lr}
   b474a:	4b02      	ldr	r3, [pc, #8]	; (b4754 <hal_spi_init+0xc>)
   b474c:	681b      	ldr	r3, [r3, #0]
   b474e:	69db      	ldr	r3, [r3, #28]
   b4750:	9301      	str	r3, [sp, #4]
   b4752:	bd08      	pop	{r3, pc}
   b4754:	00030230 	.word	0x00030230

000b4758 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4758:	b508      	push	{r3, lr}
   b475a:	4b02      	ldr	r3, [pc, #8]	; (b4764 <hal_spi_is_enabled+0xc>)
   b475c:	681b      	ldr	r3, [r3, #0]
   b475e:	6a1b      	ldr	r3, [r3, #32]
   b4760:	9301      	str	r3, [sp, #4]
   b4762:	bd08      	pop	{r3, pc}
   b4764:	00030230 	.word	0x00030230

000b4768 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b4768:	b508      	push	{r3, lr}
   b476a:	4b02      	ldr	r3, [pc, #8]	; (b4774 <hal_spi_info+0xc>)
   b476c:	681b      	ldr	r3, [r3, #0]
   b476e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4770:	9301      	str	r3, [sp, #4]
   b4772:	bd08      	pop	{r3, pc}
   b4774:	00030230 	.word	0x00030230

000b4778 <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b4778:	b508      	push	{r3, lr}
   b477a:	4b02      	ldr	r3, [pc, #8]	; (b4784 <hal_spi_acquire+0xc>)
   b477c:	681b      	ldr	r3, [r3, #0]
   b477e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4780:	9301      	str	r3, [sp, #4]
   b4782:	bd08      	pop	{r3, pc}
   b4784:	00030230 	.word	0x00030230

000b4788 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b4788:	b508      	push	{r3, lr}
   b478a:	4b02      	ldr	r3, [pc, #8]	; (b4794 <hal_spi_release+0xc>)
   b478c:	681b      	ldr	r3, [r3, #0]
   b478e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4790:	9301      	str	r3, [sp, #4]
   b4792:	bd08      	pop	{r3, pc}
   b4794:	00030230 	.word	0x00030230

000b4798 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4798:	b508      	push	{r3, lr}
   b479a:	4b02      	ldr	r3, [pc, #8]	; (b47a4 <HAL_USB_USART_Init+0xc>)
   b479c:	681b      	ldr	r3, [r3, #0]
   b479e:	681b      	ldr	r3, [r3, #0]
   b47a0:	9301      	str	r3, [sp, #4]
   b47a2:	bd08      	pop	{r3, pc}
   b47a4:	0003024c 	.word	0x0003024c

000b47a8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b47a8:	b508      	push	{r3, lr}
   b47aa:	4b02      	ldr	r3, [pc, #8]	; (b47b4 <HAL_USB_USART_Begin+0xc>)
   b47ac:	681b      	ldr	r3, [r3, #0]
   b47ae:	685b      	ldr	r3, [r3, #4]
   b47b0:	9301      	str	r3, [sp, #4]
   b47b2:	bd08      	pop	{r3, pc}
   b47b4:	0003024c 	.word	0x0003024c

000b47b8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN_WRAP(4, hal_usb, HAL_USB_USART_Available_Data, protected, int32_t(HAL_USB_USART_Serial))
   b47b8:	b508      	push	{r3, lr}
   b47ba:	4b02      	ldr	r3, [pc, #8]	; (b47c4 <HAL_USB_USART_Available_Data+0xc>)
   b47bc:	681b      	ldr	r3, [r3, #0]
   b47be:	691b      	ldr	r3, [r3, #16]
   b47c0:	9301      	str	r3, [sp, #4]
   b47c2:	bd08      	pop	{r3, pc}
   b47c4:	0003024c 	.word	0x0003024c

000b47c8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN_WRAP(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, protected, int32_t(HAL_USB_USART_Serial))
   b47c8:	b508      	push	{r3, lr}
   b47ca:	4b02      	ldr	r3, [pc, #8]	; (b47d4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b47cc:	681b      	ldr	r3, [r3, #0]
   b47ce:	695b      	ldr	r3, [r3, #20]
   b47d0:	9301      	str	r3, [sp, #4]
   b47d2:	bd08      	pop	{r3, pc}
   b47d4:	0003024c 	.word	0x0003024c

000b47d8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN_WRAP(6, hal_usb, HAL_USB_USART_Receive_Data, protected, int32_t(HAL_USB_USART_Serial, uint8_t))
   b47d8:	b508      	push	{r3, lr}
   b47da:	4b02      	ldr	r3, [pc, #8]	; (b47e4 <HAL_USB_USART_Receive_Data+0xc>)
   b47dc:	681b      	ldr	r3, [r3, #0]
   b47de:	699b      	ldr	r3, [r3, #24]
   b47e0:	9301      	str	r3, [sp, #4]
   b47e2:	bd08      	pop	{r3, pc}
   b47e4:	0003024c 	.word	0x0003024c

000b47e8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN_WRAP(7, hal_usb, HAL_USB_USART_Send_Data, protected, int32_t(HAL_USB_USART_Serial, uint8_t))
   b47e8:	b508      	push	{r3, lr}
   b47ea:	4b02      	ldr	r3, [pc, #8]	; (b47f4 <HAL_USB_USART_Send_Data+0xc>)
   b47ec:	681b      	ldr	r3, [r3, #0]
   b47ee:	69db      	ldr	r3, [r3, #28]
   b47f0:	9301      	str	r3, [sp, #4]
   b47f2:	bd08      	pop	{r3, pc}
   b47f4:	0003024c 	.word	0x0003024c

000b47f8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN_WRAP(8, hal_usb, HAL_USB_USART_Flush_Data, protected, void(HAL_USB_USART_Serial))
   b47f8:	b508      	push	{r3, lr}
   b47fa:	4b02      	ldr	r3, [pc, #8]	; (b4804 <HAL_USB_USART_Flush_Data+0xc>)
   b47fc:	681b      	ldr	r3, [r3, #0]
   b47fe:	6a1b      	ldr	r3, [r3, #32]
   b4800:	9301      	str	r3, [sp, #4]
   b4802:	bd08      	pop	{r3, pc}
   b4804:	0003024c 	.word	0x0003024c

000b4808 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b4808:	b508      	push	{r3, lr}
   b480a:	4b02      	ldr	r3, [pc, #8]	; (b4814 <HAL_USB_USART_Is_Connected+0xc>)
   b480c:	681b      	ldr	r3, [r3, #0]
   b480e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4810:	9301      	str	r3, [sp, #4]
   b4812:	bd08      	pop	{r3, pc}
   b4814:	0003024c 	.word	0x0003024c

000b4818 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4818:	b508      	push	{r3, lr}
   b481a:	4b02      	ldr	r3, [pc, #8]	; (b4824 <set_system_mode+0xc>)
   b481c:	681b      	ldr	r3, [r3, #0]
   b481e:	685b      	ldr	r3, [r3, #4]
   b4820:	9301      	str	r3, [sp, #4]
   b4822:	bd08      	pop	{r3, pc}
   b4824:	00030220 	.word	0x00030220

000b4828 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b4828:	b508      	push	{r3, lr}
   b482a:	4b02      	ldr	r3, [pc, #8]	; (b4834 <system_thread_set_state+0xc>)
   b482c:	681b      	ldr	r3, [r3, #0]
   b482e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4830:	9301      	str	r3, [sp, #4]
   b4832:	bd08      	pop	{r3, pc}
   b4834:	00030220 	.word	0x00030220

000b4838 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4838:	b508      	push	{r3, lr}
   b483a:	4b03      	ldr	r3, [pc, #12]	; (b4848 <system_ctrl_set_app_request_handler+0x10>)
   b483c:	681b      	ldr	r3, [r3, #0]
   b483e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4842:	9301      	str	r3, [sp, #4]
   b4844:	bd08      	pop	{r3, pc}
   b4846:	0000      	.short	0x0000
   b4848:	00030220 	.word	0x00030220

000b484c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b484c:	b508      	push	{r3, lr}
   b484e:	4b03      	ldr	r3, [pc, #12]	; (b485c <system_ctrl_set_result+0x10>)
   b4850:	681b      	ldr	r3, [r3, #0]
   b4852:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4856:	9301      	str	r3, [sp, #4]
   b4858:	bd08      	pop	{r3, pc}
   b485a:	0000      	.short	0x0000
   b485c:	00030220 	.word	0x00030220

000b4860 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4860:	b508      	push	{r3, lr}
   b4862:	4b02      	ldr	r3, [pc, #8]	; (b486c <network_connect+0xc>)
   b4864:	681b      	ldr	r3, [r3, #0]
   b4866:	685b      	ldr	r3, [r3, #4]
   b4868:	9301      	str	r3, [sp, #4]
   b486a:	bd08      	pop	{r3, pc}
   b486c:	00030240 	.word	0x00030240

000b4870 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4870:	b508      	push	{r3, lr}
   b4872:	4b02      	ldr	r3, [pc, #8]	; (b487c <network_connecting+0xc>)
   b4874:	681b      	ldr	r3, [r3, #0]
   b4876:	689b      	ldr	r3, [r3, #8]
   b4878:	9301      	str	r3, [sp, #4]
   b487a:	bd08      	pop	{r3, pc}
   b487c:	00030240 	.word	0x00030240

000b4880 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4880:	b508      	push	{r3, lr}
   b4882:	4b02      	ldr	r3, [pc, #8]	; (b488c <network_disconnect+0xc>)
   b4884:	681b      	ldr	r3, [r3, #0]
   b4886:	68db      	ldr	r3, [r3, #12]
   b4888:	9301      	str	r3, [sp, #4]
   b488a:	bd08      	pop	{r3, pc}
   b488c:	00030240 	.word	0x00030240

000b4890 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4890:	b508      	push	{r3, lr}
   b4892:	4b02      	ldr	r3, [pc, #8]	; (b489c <network_ready+0xc>)
   b4894:	681b      	ldr	r3, [r3, #0]
   b4896:	691b      	ldr	r3, [r3, #16]
   b4898:	9301      	str	r3, [sp, #4]
   b489a:	bd08      	pop	{r3, pc}
   b489c:	00030240 	.word	0x00030240

000b48a0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b48a0:	b508      	push	{r3, lr}
   b48a2:	4b02      	ldr	r3, [pc, #8]	; (b48ac <network_on+0xc>)
   b48a4:	681b      	ldr	r3, [r3, #0]
   b48a6:	695b      	ldr	r3, [r3, #20]
   b48a8:	9301      	str	r3, [sp, #4]
   b48aa:	bd08      	pop	{r3, pc}
   b48ac:	00030240 	.word	0x00030240

000b48b0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b48b0:	b508      	push	{r3, lr}
   b48b2:	4b02      	ldr	r3, [pc, #8]	; (b48bc <network_off+0xc>)
   b48b4:	681b      	ldr	r3, [r3, #0]
   b48b6:	699b      	ldr	r3, [r3, #24]
   b48b8:	9301      	str	r3, [sp, #4]
   b48ba:	bd08      	pop	{r3, pc}
   b48bc:	00030240 	.word	0x00030240

000b48c0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b48c0:	b508      	push	{r3, lr}
   b48c2:	4b02      	ldr	r3, [pc, #8]	; (b48cc <network_listen+0xc>)
   b48c4:	681b      	ldr	r3, [r3, #0]
   b48c6:	69db      	ldr	r3, [r3, #28]
   b48c8:	9301      	str	r3, [sp, #4]
   b48ca:	bd08      	pop	{r3, pc}
   b48cc:	00030240 	.word	0x00030240

000b48d0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b48d0:	b508      	push	{r3, lr}
   b48d2:	4b02      	ldr	r3, [pc, #8]	; (b48dc <network_listening+0xc>)
   b48d4:	681b      	ldr	r3, [r3, #0]
   b48d6:	6a1b      	ldr	r3, [r3, #32]
   b48d8:	9301      	str	r3, [sp, #4]
   b48da:	bd08      	pop	{r3, pc}
   b48dc:	00030240 	.word	0x00030240

000b48e0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b48e0:	b508      	push	{r3, lr}
   b48e2:	4b02      	ldr	r3, [pc, #8]	; (b48ec <network_set_listen_timeout+0xc>)
   b48e4:	681b      	ldr	r3, [r3, #0]
   b48e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b48e8:	9301      	str	r3, [sp, #4]
   b48ea:	bd08      	pop	{r3, pc}
   b48ec:	00030240 	.word	0x00030240

000b48f0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b48f0:	b508      	push	{r3, lr}
   b48f2:	4b02      	ldr	r3, [pc, #8]	; (b48fc <network_get_listen_timeout+0xc>)
   b48f4:	681b      	ldr	r3, [r3, #0]
   b48f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b48f8:	9301      	str	r3, [sp, #4]
   b48fa:	bd08      	pop	{r3, pc}
   b48fc:	00030240 	.word	0x00030240

000b4900 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4900:	b508      	push	{r3, lr}
   b4902:	4b02      	ldr	r3, [pc, #8]	; (b490c <network_is_on+0xc>)
   b4904:	681b      	ldr	r3, [r3, #0]
   b4906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4908:	9301      	str	r3, [sp, #4]
   b490a:	bd08      	pop	{r3, pc}
   b490c:	00030240 	.word	0x00030240

000b4910 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4910:	b508      	push	{r3, lr}
   b4912:	4b02      	ldr	r3, [pc, #8]	; (b491c <network_is_off+0xc>)
   b4914:	681b      	ldr	r3, [r3, #0]
   b4916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4918:	9301      	str	r3, [sp, #4]
   b491a:	bd08      	pop	{r3, pc}
   b491c:	00030240 	.word	0x00030240

000b4920 <network_prefer>:
DYNALIB_FN(18, system_net, network_set_configuration, int(network_handle_t, const network_configuration_t*, void*))
DYNALIB_FN(19, system_net, network_get_configuration, int(network_handle_t, network_configuration_t**, size_t*, const char*, size_t, void*))
DYNALIB_FN(20, system_net, network_free_configuration, int(network_configuration_t*, size_t, void*))
DYNALIB_FN(21, system_net, network_prefer, network_handle_t(network_handle_t, bool, void*))
   b4920:	b508      	push	{r3, lr}
   b4922:	4b02      	ldr	r3, [pc, #8]	; (b492c <network_prefer+0xc>)
   b4924:	681b      	ldr	r3, [r3, #0]
   b4926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4928:	9301      	str	r3, [sp, #4]
   b492a:	bd08      	pop	{r3, pc}
   b492c:	00030240 	.word	0x00030240

000b4930 <network_is_preferred>:
DYNALIB_FN(22, system_net, network_is_preferred, bool(network_handle_t, void*))
   b4930:	b508      	push	{r3, lr}
   b4932:	4b02      	ldr	r3, [pc, #8]	; (b493c <network_is_preferred+0xc>)
   b4934:	681b      	ldr	r3, [r3, #0]
   b4936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b4938:	9301      	str	r3, [sp, #4]
   b493a:	bd08      	pop	{r3, pc}
   b493c:	00030240 	.word	0x00030240

000b4940 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
   b4940:	b508      	push	{r3, lr}
   b4942:	4b02      	ldr	r3, [pc, #8]	; (b494c <spark_process+0xc>)
   b4944:	681b      	ldr	r3, [r3, #0]
   b4946:	689b      	ldr	r3, [r3, #8]
   b4948:	9301      	str	r3, [sp, #4]
   b494a:	bd08      	pop	{r3, pc}
   b494c:	00030244 	.word	0x00030244

000b4950 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4950:	b508      	push	{r3, lr}
   b4952:	4b02      	ldr	r3, [pc, #8]	; (b495c <spark_set_random_seed_from_cloud_handler+0xc>)
   b4954:	681b      	ldr	r3, [r3, #0]
   b4956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4958:	9301      	str	r3, [sp, #4]
   b495a:	bd08      	pop	{r3, pc}
   b495c:	00030244 	.word	0x00030244

000b4960 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4960:	b508      	push	{r3, lr}
   b4962:	4b02      	ldr	r3, [pc, #8]	; (b496c <malloc+0xc>)
   b4964:	681b      	ldr	r3, [r3, #0]
   b4966:	681b      	ldr	r3, [r3, #0]
   b4968:	9301      	str	r3, [sp, #4]
   b496a:	bd08      	pop	{r3, pc}
   b496c:	0003021c 	.word	0x0003021c

000b4970 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4970:	b508      	push	{r3, lr}
   b4972:	4b02      	ldr	r3, [pc, #8]	; (b497c <free+0xc>)
   b4974:	681b      	ldr	r3, [r3, #0]
   b4976:	685b      	ldr	r3, [r3, #4]
   b4978:	9301      	str	r3, [sp, #4]
   b497a:	bd08      	pop	{r3, pc}
   b497c:	0003021c 	.word	0x0003021c

000b4980 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4980:	b508      	push	{r3, lr}
   b4982:	4b02      	ldr	r3, [pc, #8]	; (b498c <__assert_func+0xc>)
   b4984:	681b      	ldr	r3, [r3, #0]
   b4986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4988:	9301      	str	r3, [sp, #4]
   b498a:	bd08      	pop	{r3, pc}
   b498c:	0003021c 	.word	0x0003021c

000b4990 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4990:	b508      	push	{r3, lr}
   b4992:	4b02      	ldr	r3, [pc, #8]	; (b499c <newlib_impure_ptr_callback+0xc>)
   b4994:	681b      	ldr	r3, [r3, #0]
   b4996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4998:	9301      	str	r3, [sp, #4]
   b499a:	bd08      	pop	{r3, pc}
   b499c:	0003021c 	.word	0x0003021c

000b49a0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b49a0:	2200      	movs	r2, #0
   b49a2:	6840      	ldr	r0, [r0, #4]
   b49a4:	4611      	mov	r1, r2
   b49a6:	f7ff bf93 	b.w	b48d0 <network_listening>

000b49aa <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b49aa:	2200      	movs	r2, #0
   b49ac:	6840      	ldr	r0, [r0, #4]
   b49ae:	4611      	mov	r1, r2
   b49b0:	f7ff bf9e 	b.w	b48f0 <network_get_listen_timeout>

000b49b4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b49b4:	6840      	ldr	r0, [r0, #4]
   b49b6:	2200      	movs	r2, #0
   b49b8:	f7ff bf92 	b.w	b48e0 <network_set_listen_timeout>

000b49bc <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b49bc:	6840      	ldr	r0, [r0, #4]
   b49be:	2200      	movs	r2, #0
   b49c0:	f081 0101 	eor.w	r1, r1, #1
   b49c4:	f7ff bf7c 	b.w	b48c0 <network_listen>

000b49c8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b49c8:	2300      	movs	r3, #0
   b49ca:	6840      	ldr	r0, [r0, #4]
   b49cc:	461a      	mov	r2, r3
   b49ce:	4619      	mov	r1, r3
   b49d0:	f7ff bf6e 	b.w	b48b0 <network_off>

000b49d4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b49d4:	2300      	movs	r3, #0
   b49d6:	6840      	ldr	r0, [r0, #4]
   b49d8:	461a      	mov	r2, r3
   b49da:	4619      	mov	r1, r3
   b49dc:	f7ff bf60 	b.w	b48a0 <network_on>

000b49e0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b49e0:	2200      	movs	r2, #0
   b49e2:	6840      	ldr	r0, [r0, #4]
   b49e4:	4611      	mov	r1, r2
   b49e6:	f7ff bf53 	b.w	b4890 <network_ready>

000b49ea <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b49ea:	2200      	movs	r2, #0
   b49ec:	6840      	ldr	r0, [r0, #4]
   b49ee:	4611      	mov	r1, r2
   b49f0:	f7ff bf3e 	b.w	b4870 <network_connecting>

000b49f4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b49f4:	6840      	ldr	r0, [r0, #4]
   b49f6:	2200      	movs	r2, #0
   b49f8:	2102      	movs	r1, #2
   b49fa:	f7ff bf41 	b.w	b4880 <network_disconnect>

000b49fe <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b49fe:	2300      	movs	r3, #0
   b4a00:	6840      	ldr	r0, [r0, #4]
   b4a02:	461a      	mov	r2, r3
   b4a04:	f7ff bf2c 	b.w	b4860 <network_connect>

000b4a08 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4a08:	4b02      	ldr	r3, [pc, #8]	; (b4a14 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4a0a:	2203      	movs	r2, #3
   b4a0c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4a0e:	4a02      	ldr	r2, [pc, #8]	; (b4a18 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4a10:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4a12:	4770      	bx	lr
   b4a14:	2003e6d0 	.word	0x2003e6d0
   b4a18:	000b56e4 	.word	0x000b56e4

000b4a1c <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b4a1c:	2100      	movs	r1, #0
   b4a1e:	f7ff beb3 	b.w	b4788 <hal_spi_release>

000b4a22 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b4a22:	2100      	movs	r1, #0
   b4a24:	f7ff bea8 	b.w	b4778 <hal_spi_acquire>

000b4a28 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b4a28:	b510      	push	{r4, lr}
   b4a2a:	4604      	mov	r4, r0
   b4a2c:	4608      	mov	r0, r1
{
    _spi = spi;
   b4a2e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b4a30:	f7ff fe8a 	bl	b4748 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b4a34:	2300      	movs	r3, #0
   b4a36:	6063      	str	r3, [r4, #4]
}
   b4a38:	4620      	mov	r0, r4
   b4a3a:	bd10      	pop	{r4, pc}

000b4a3c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b4a3c:	b513      	push	{r0, r1, r4, lr}
   b4a3e:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b4a40:	7800      	ldrb	r0, [r0, #0]
   b4a42:	f7ff ffee 	bl	b4a22 <_ZN8SPIClass4lockEv.isra.0>
   b4a46:	b958      	cbnz	r0, b4a60 <_ZN8SPIClass5beginEv+0x24>
   b4a48:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b4a4a:	9001      	str	r0, [sp, #4]
   b4a4c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b4a50:	f7ff fe52 	bl	b46f8 <hal_spi_begin>
        unlock();
   b4a54:	9801      	ldr	r0, [sp, #4]
    }
}
   b4a56:	b002      	add	sp, #8
   b4a58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b4a5c:	f7ff bfde 	b.w	b4a1c <_ZN8SPIClass6unlockEv.isra.0>
   b4a60:	b002      	add	sp, #8
   b4a62:	bd10      	pop	{r4, pc}

000b4a64 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   b4a64:	b513      	push	{r0, r1, r4, lr}
   b4a66:	4604      	mov	r4, r0
    if (!lock())
   b4a68:	7800      	ldrb	r0, [r0, #0]
{
   b4a6a:	9101      	str	r1, [sp, #4]
    if (!lock())
   b4a6c:	f7ff ffd9 	bl	b4a22 <_ZN8SPIClass4lockEv.isra.0>
   b4a70:	9901      	ldr	r1, [sp, #4]
   b4a72:	b948      	cbnz	r0, b4a88 <_ZN8SPIClass11setBitOrderEh+0x24>
   b4a74:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   b4a76:	9001      	str	r0, [sp, #4]
   b4a78:	f7ff fe46 	bl	b4708 <hal_spi_set_bit_order>
        unlock();
   b4a7c:	9801      	ldr	r0, [sp, #4]
    }
}
   b4a7e:	b002      	add	sp, #8
   b4a80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b4a84:	f7ff bfca 	b.w	b4a1c <_ZN8SPIClass6unlockEv.isra.0>
   b4a88:	b002      	add	sp, #8
   b4a8a:	bd10      	pop	{r4, pc}

000b4a8c <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   b4a8c:	b513      	push	{r0, r1, r4, lr}
   b4a8e:	4604      	mov	r4, r0
    if (!lock())
   b4a90:	7800      	ldrb	r0, [r0, #0]
{
   b4a92:	9101      	str	r1, [sp, #4]
    if (!lock())
   b4a94:	f7ff ffc5 	bl	b4a22 <_ZN8SPIClass4lockEv.isra.0>
   b4a98:	9901      	ldr	r1, [sp, #4]
   b4a9a:	b948      	cbnz	r0, b4ab0 <_ZN8SPIClass11setDataModeEh+0x24>
   b4a9c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
   b4a9e:	9001      	str	r0, [sp, #4]
   b4aa0:	f7ff fe3a 	bl	b4718 <hal_spi_set_data_mode>
        unlock();
   b4aa4:	9801      	ldr	r0, [sp, #4]
    }
}
   b4aa6:	b002      	add	sp, #8
   b4aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b4aac:	f7ff bfb6 	b.w	b4a1c <_ZN8SPIClass6unlockEv.isra.0>
   b4ab0:	b002      	add	sp, #8
   b4ab2:	bd10      	pop	{r4, pc}

000b4ab4 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b4ab4:	0840      	lsrs	r0, r0, #1
{
   b4ab6:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b4ab8:	6018      	str	r0, [r3, #0]
   b4aba:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b4abc:	6818      	ldr	r0, [r3, #0]
   b4abe:	4288      	cmp	r0, r1
   b4ac0:	b2e5      	uxtb	r5, r4
   b4ac2:	d906      	bls.n	b4ad2 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b4ac4:	3401      	adds	r4, #1
   b4ac6:	2c08      	cmp	r4, #8
   b4ac8:	d002      	beq.n	b4ad0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b4aca:	0840      	lsrs	r0, r0, #1
   b4acc:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b4ace:	e7f5      	b.n	b4abc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b4ad0:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b4ad2:	4b02      	ldr	r3, [pc, #8]	; (b4adc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b4ad4:	5d5b      	ldrb	r3, [r3, r5]
   b4ad6:	7013      	strb	r3, [r2, #0]
}
   b4ad8:	bd30      	pop	{r4, r5, pc}
   b4ada:	bf00      	nop
   b4adc:	000b5720 	.word	0x000b5720

000b4ae0 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   b4ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4ae4:	b088      	sub	sp, #32
    unsigned clock = 0;
   b4ae6:	2300      	movs	r3, #0
{
   b4ae8:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   b4aea:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   b4aec:	9302      	str	r3, [sp, #8]
{
   b4aee:	460e      	mov	r6, r1
   b4af0:	4617      	mov	r7, r2
    if (!lock())
   b4af2:	f7ff ff96 	bl	b4a22 <_ZN8SPIClass4lockEv.isra.0>
   b4af6:	4605      	mov	r5, r0
   b4af8:	bb00      	cbnz	r0, b4b3c <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   b4afa:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   b4afe:	4601      	mov	r1, r0
   b4b00:	2214      	movs	r2, #20
   b4b02:	a803      	add	r0, sp, #12
   b4b04:	f000 fd2c 	bl	b5560 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b4b08:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b4b0a:	462a      	mov	r2, r5
   b4b0c:	a903      	add	r1, sp, #12
   b4b0e:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   b4b10:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   b4b14:	f7ff fe28 	bl	b4768 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b4b18:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   b4b1a:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b4b1e:	ab02      	add	r3, sp, #8
   b4b20:	f10d 0207 	add.w	r2, sp, #7
   b4b24:	fb07 f106 	mul.w	r1, r7, r6
   b4b28:	f7ff ffc4 	bl	b4ab4 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   b4b2c:	7820      	ldrb	r0, [r4, #0]
   b4b2e:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b4b32:	f7ff fdf9 	bl	b4728 <hal_spi_set_clock_divider>
        unlock();
   b4b36:	7820      	ldrb	r0, [r4, #0]
   b4b38:	f7ff ff70 	bl	b4a1c <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   b4b3c:	9802      	ldr	r0, [sp, #8]
   b4b3e:	b008      	add	sp, #32
   b4b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b4b44 <_ZN8SPIClass15setClockDividerEh>:
{
   b4b44:	b538      	push	{r3, r4, r5, lr}
   b4b46:	4604      	mov	r4, r0
    if (!lock())
   b4b48:	7800      	ldrb	r0, [r0, #0]
{
   b4b4a:	460d      	mov	r5, r1
    if (!lock())
   b4b4c:	f7ff ff69 	bl	b4a22 <_ZN8SPIClass4lockEv.isra.0>
   b4b50:	4603      	mov	r3, r0
   b4b52:	b9d0      	cbnz	r0, b4b8a <_ZN8SPIClass15setClockDividerEh+0x46>
        if (_dividerReference)
   b4b54:	6861      	ldr	r1, [r4, #4]
   b4b56:	b199      	cbz	r1, b4b80 <_ZN8SPIClass15setClockDividerEh+0x3c>
   b4b58:	4a0c      	ldr	r2, [pc, #48]	; (b4b8c <_ZN8SPIClass15setClockDividerEh+0x48>)
        if (clock_divisors[result] == divider)
   b4b5a:	f812 0b01 	ldrb.w	r0, [r2], #1
   b4b5e:	4285      	cmp	r5, r0
   b4b60:	d002      	beq.n	b4b68 <_ZN8SPIClass15setClockDividerEh+0x24>
    for (; result < arraySize(clock_divisors); result++)
   b4b62:	3301      	adds	r3, #1
   b4b64:	2b08      	cmp	r3, #8
   b4b66:	d1f8      	bne.n	b4b5a <_ZN8SPIClass15setClockDividerEh+0x16>
    return result + 1;
   b4b68:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
   b4b6a:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
   b4b6c:	2201      	movs	r2, #1
   b4b6e:	40d9      	lsrs	r1, r3
   b4b70:	4620      	mov	r0, r4
   b4b72:	f7ff ffb5 	bl	b4ae0 <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
   b4b76:	7820      	ldrb	r0, [r4, #0]
}
   b4b78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unlock();
   b4b7c:	f7ff bf4e 	b.w	b4a1c <_ZN8SPIClass6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
   b4b80:	7820      	ldrb	r0, [r4, #0]
   b4b82:	4629      	mov	r1, r5
   b4b84:	f7ff fdd0 	bl	b4728 <hal_spi_set_clock_divider>
   b4b88:	e7f5      	b.n	b4b76 <_ZN8SPIClass15setClockDividerEh+0x32>
}
   b4b8a:	bd38      	pop	{r3, r4, r5, pc}
   b4b8c:	000b5720 	.word	0x000b5720

000b4b90 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   b4b90:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b4b92:	7800      	ldrb	r0, [r0, #0]
   b4b94:	f7ff fdd0 	bl	b4738 <hal_spi_transfer>
}
   b4b98:	b2c0      	uxtb	r0, r0
   b4b9a:	bd08      	pop	{r3, pc}

000b4b9c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b4b9c:	4b05      	ldr	r3, [pc, #20]	; (b4bb4 <_GLOBAL__sub_I_System+0x18>)
   b4b9e:	2202      	movs	r2, #2
   b4ba0:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4ba2:	4b05      	ldr	r3, [pc, #20]	; (b4bb8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b4ba4:	4a05      	ldr	r2, [pc, #20]	; (b4bbc <_GLOBAL__sub_I_System+0x20>)
   b4ba6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4ba8:	2000      	movs	r0, #0
   b4baa:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4bae:	f7ff be33 	b.w	b4818 <set_system_mode>
   b4bb2:	bf00      	nop
   b4bb4:	2003e6e4 	.word	0x2003e6e4
   b4bb8:	2003e6d8 	.word	0x2003e6d8
   b4bbc:	ffff0000 	.word	0xffff0000

000b4bc0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b4bc0:	4802      	ldr	r0, [pc, #8]	; (b4bcc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b4bc2:	2300      	movs	r3, #0
   b4bc4:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b4bc6:	f7ff bd0f 	b.w	b45e8 <os_mutex_recursive_create>
   b4bca:	bf00      	nop
   b4bcc:	2003e6e8 	.word	0x2003e6e8

000b4bd0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b4bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4bd2:	4606      	mov	r6, r0
   b4bd4:	460d      	mov	r5, r1
  size_t n = 0;
   b4bd6:	188f      	adds	r7, r1, r2
   b4bd8:	2400      	movs	r4, #0
  while (size--) {
   b4bda:	42bd      	cmp	r5, r7
   b4bdc:	d00c      	beq.n	b4bf8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b4bde:	6833      	ldr	r3, [r6, #0]
   b4be0:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4be4:	689b      	ldr	r3, [r3, #8]
   b4be6:	4630      	mov	r0, r6
   b4be8:	4798      	blx	r3
     if (chunk>=0)
   b4bea:	1e03      	subs	r3, r0, #0
   b4bec:	db01      	blt.n	b4bf2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b4bee:	441c      	add	r4, r3
  while (size--) {
   b4bf0:	e7f3      	b.n	b4bda <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b4bf2:	2c00      	cmp	r4, #0
   b4bf4:	bf08      	it	eq
   b4bf6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b4bf8:	4620      	mov	r0, r4
   b4bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4bfc <_ZN5Print5writeEPKc>:

    int getWriteError() const { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b4bfc:	b513      	push	{r0, r1, r4, lr}
   b4bfe:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b4c00:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b4c02:	b159      	cbz	r1, b4c1c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b4c04:	9101      	str	r1, [sp, #4]
   b4c06:	f7ff fa09 	bl	b401c <strlen>
   b4c0a:	6823      	ldr	r3, [r4, #0]
   b4c0c:	9901      	ldr	r1, [sp, #4]
   b4c0e:	68db      	ldr	r3, [r3, #12]
   b4c10:	4602      	mov	r2, r0
   b4c12:	4620      	mov	r0, r4
    }
   b4c14:	b002      	add	sp, #8
   b4c16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b4c1a:	4718      	bx	r3
    }
   b4c1c:	b002      	add	sp, #8
   b4c1e:	bd10      	pop	{r4, pc}

000b4c20 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b4c20:	6803      	ldr	r3, [r0, #0]
   b4c22:	689b      	ldr	r3, [r3, #8]
   b4c24:	4718      	bx	r3

000b4c26 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b4c26:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b4c28:	210d      	movs	r1, #13
{
   b4c2a:	4605      	mov	r5, r0
  size_t n = print('\r');
   b4c2c:	f7ff fff8 	bl	b4c20 <_ZN5Print5printEc>
  n += print('\n');
   b4c30:	210a      	movs	r1, #10
  size_t n = print('\r');
   b4c32:	4604      	mov	r4, r0
  n += print('\n');
   b4c34:	4628      	mov	r0, r5
   b4c36:	f7ff fff3 	bl	b4c20 <_ZN5Print5printEc>
  return n;
}
   b4c3a:	4420      	add	r0, r4
   b4c3c:	bd38      	pop	{r3, r4, r5, pc}

000b4c3e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b4c3e:	b538      	push	{r3, r4, r5, lr}
   b4c40:	4605      	mov	r5, r0
  return write(str);
   b4c42:	f7ff ffdb 	bl	b4bfc <_ZN5Print5writeEPKc>
   b4c46:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b4c48:	4628      	mov	r0, r5
   b4c4a:	f7ff ffec 	bl	b4c26 <_ZN5Print7printlnEv>
  return n;
}
   b4c4e:	4420      	add	r0, r4
   b4c50:	bd38      	pop	{r3, r4, r5, pc}

000b4c52 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b4c52:	b530      	push	{r4, r5, lr}
   b4c54:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b4c56:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b4c58:	2a01      	cmp	r2, #1
  *str = '\0';
   b4c5a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b4c5e:	bf98      	it	ls
   b4c60:	220a      	movls	r2, #10
   b4c62:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b4c64:	460d      	mov	r5, r1
   b4c66:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b4c6a:	fb01 5312 	mls	r3, r1, r2, r5
   b4c6e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4c72:	2b09      	cmp	r3, #9
   b4c74:	bf94      	ite	ls
   b4c76:	3330      	addls	r3, #48	; 0x30
   b4c78:	3337      	addhi	r3, #55	; 0x37
   b4c7a:	b2db      	uxtb	r3, r3
  } while(n);
   b4c7c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4c7e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b4c82:	d9ef      	bls.n	b4c64 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b4c84:	4621      	mov	r1, r4
   b4c86:	f7ff ffb9 	bl	b4bfc <_ZN5Print5writeEPKc>
}
   b4c8a:	b00b      	add	sp, #44	; 0x2c
   b4c8c:	bd30      	pop	{r4, r5, pc}

000b4c8e <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b4c8e:	b510      	push	{r4, lr}
   b4c90:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4c92:	f7ff fc99 	bl	b45c8 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b4c96:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b4c98:	6823      	ldr	r3, [r4, #0]
   b4c9a:	4620      	mov	r0, r4
   b4c9c:	695b      	ldr	r3, [r3, #20]
   b4c9e:	4798      	blx	r3
    if (c >= 0) return c;
   b4ca0:	2800      	cmp	r0, #0
   b4ca2:	da08      	bge.n	b4cb6 <_ZN6Stream9timedReadEv+0x28>
   b4ca4:	f7ff fc90 	bl	b45c8 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b4ca8:	68e3      	ldr	r3, [r4, #12]
   b4caa:	1ac0      	subs	r0, r0, r3
   b4cac:	68a3      	ldr	r3, [r4, #8]
   b4cae:	4298      	cmp	r0, r3
   b4cb0:	d3f2      	bcc.n	b4c98 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b4cb2:	f04f 30ff 	mov.w	r0, #4294967295
}
   b4cb6:	bd10      	pop	{r4, pc}

000b4cb8 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   b4cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4cbc:	4607      	mov	r7, r0
   b4cbe:	460c      	mov	r4, r1
   b4cc0:	188e      	adds	r6, r1, r2
   b4cc2:	460d      	mov	r5, r1
  size_t count = 0;
  while (count < length) {
   b4cc4:	42b5      	cmp	r5, r6
   b4cc6:	eba5 0804 	sub.w	r8, r5, r4
   b4cca:	d007      	beq.n	b4cdc <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
   b4ccc:	4638      	mov	r0, r7
   b4cce:	f7ff ffde 	bl	b4c8e <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   b4cd2:	1e03      	subs	r3, r0, #0
   b4cd4:	db02      	blt.n	b4cdc <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
   b4cd6:	f805 3b01 	strb.w	r3, [r5], #1
  while (count < length) {
   b4cda:	e7f3      	b.n	b4cc4 <_ZN6Stream9readBytesEPcj+0xc>
    count++;
  }
  return count;
}
   b4cdc:	4640      	mov	r0, r8
   b4cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b4ce4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b4ce4:	4b01      	ldr	r3, [pc, #4]	; (b4cec <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b4ce6:	4a02      	ldr	r2, [pc, #8]	; (b4cf0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b4ce8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b4cea:	4770      	bx	lr
   b4cec:	2003e6ec 	.word	0x2003e6ec
   b4cf0:	000b5728 	.word	0x000b5728

000b4cf4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b4cf4:	4b02      	ldr	r3, [pc, #8]	; (b4d00 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b4cf6:	681a      	ldr	r2, [r3, #0]
   b4cf8:	4b02      	ldr	r3, [pc, #8]	; (b4d04 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b4cfa:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b4cfc:	4770      	bx	lr
   b4cfe:	bf00      	nop
   b4d00:	2003e614 	.word	0x2003e614
   b4d04:	2003e6f0 	.word	0x2003e6f0

000b4d08 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b4d08:	4b01      	ldr	r3, [pc, #4]	; (b4d10 <_GLOBAL__sub_I_RGB+0x8>)
   b4d0a:	2200      	movs	r2, #0
   b4d0c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b4d0e:	4770      	bx	lr
   b4d10:	2003e6f4 	.word	0x2003e6f4

000b4d14 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b4d14:	4b01      	ldr	r3, [pc, #4]	; (b4d1c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b4d16:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b4d18:	4770      	bx	lr
   b4d1a:	bf00      	nop
   b4d1c:	2003e618 	.word	0x2003e618

000b4d20 <serialEventRun>:
{
   b4d20:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b4d22:	4b0b      	ldr	r3, [pc, #44]	; (b4d50 <serialEventRun+0x30>)
   b4d24:	b143      	cbz	r3, b4d38 <serialEventRun+0x18>
   b4d26:	f000 f96b 	bl	b5000 <_Z16_fetch_usbserialv>
   b4d2a:	6803      	ldr	r3, [r0, #0]
   b4d2c:	691b      	ldr	r3, [r3, #16]
   b4d2e:	4798      	blx	r3
   b4d30:	2800      	cmp	r0, #0
   b4d32:	dd01      	ble.n	b4d38 <serialEventRun+0x18>
        serialEvent();
   b4d34:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b4d38:	4b06      	ldr	r3, [pc, #24]	; (b4d54 <serialEventRun+0x34>)
   b4d3a:	b143      	cbz	r3, b4d4e <serialEventRun+0x2e>
   b4d3c:	f000 fb96 	bl	b546c <_Z22__fetch_global_Serial1v>
   b4d40:	6803      	ldr	r3, [r0, #0]
   b4d42:	691b      	ldr	r3, [r3, #16]
   b4d44:	4798      	blx	r3
   b4d46:	2800      	cmp	r0, #0
   b4d48:	dd01      	ble.n	b4d4e <serialEventRun+0x2e>
        serialEvent1();
   b4d4a:	f3af 8000 	nop.w
}
   b4d4e:	bd08      	pop	{r3, pc}
	...

000b4d58 <_post_loop>:
{
   b4d58:	b508      	push	{r3, lr}
	serialEventRun();
   b4d5a:	f7ff ffe1 	bl	b4d20 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b4d5e:	f7ff fc33 	bl	b45c8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b4d62:	4b01      	ldr	r3, [pc, #4]	; (b4d68 <_post_loop+0x10>)
   b4d64:	6018      	str	r0, [r3, #0]
}
   b4d66:	bd08      	pop	{r3, pc}
   b4d68:	2003e74c 	.word	0x2003e74c

000b4d6c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4d6c:	4805      	ldr	r0, [pc, #20]	; (b4d84 <_Z33system_initialize_user_backup_ramv+0x18>)
   b4d6e:	4a06      	ldr	r2, [pc, #24]	; (b4d88 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b4d70:	4906      	ldr	r1, [pc, #24]	; (b4d8c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b4d72:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b4d74:	1a12      	subs	r2, r2, r0
   b4d76:	f000 fbe5 	bl	b5544 <memcpy>
    __backup_sram_signature = signature;
   b4d7a:	4b05      	ldr	r3, [pc, #20]	; (b4d90 <_Z33system_initialize_user_backup_ramv+0x24>)
   b4d7c:	4a05      	ldr	r2, [pc, #20]	; (b4d94 <_Z33system_initialize_user_backup_ramv+0x28>)
   b4d7e:	601a      	str	r2, [r3, #0]
}
   b4d80:	bd08      	pop	{r3, pc}
   b4d82:	bf00      	nop
   b4d84:	2003f400 	.word	0x2003f400
   b4d88:	2003f404 	.word	0x2003f404
   b4d8c:	000b59d4 	.word	0x000b59d4
   b4d90:	2003f400 	.word	0x2003f400
   b4d94:	9a271c1e 	.word	0x9a271c1e

000b4d98 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b4d98:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4d9a:	2300      	movs	r3, #0
   b4d9c:	9300      	str	r3, [sp, #0]
   b4d9e:	461a      	mov	r2, r3
   b4da0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4da4:	f7ff fd52 	bl	b484c <system_ctrl_set_result>
}
   b4da8:	b003      	add	sp, #12
   b4daa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b4db0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b4db0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b4db2:	8843      	ldrh	r3, [r0, #2]
   b4db4:	2b0a      	cmp	r3, #10
   b4db6:	d008      	beq.n	b4dca <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b4db8:	2b50      	cmp	r3, #80	; 0x50
   b4dba:	d10b      	bne.n	b4dd4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b4dbc:	4b09      	ldr	r3, [pc, #36]	; (b4de4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b4dbe:	681b      	ldr	r3, [r3, #0]
   b4dc0:	b14b      	cbz	r3, b4dd6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b4dc2:	b003      	add	sp, #12
   b4dc4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b4dc8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b4dca:	f7ff ffe5 	bl	b4d98 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b4dce:	b003      	add	sp, #12
   b4dd0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b4dd4:	2300      	movs	r3, #0
   b4dd6:	9300      	str	r3, [sp, #0]
   b4dd8:	461a      	mov	r2, r3
   b4dda:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b4dde:	f7ff fd35 	bl	b484c <system_ctrl_set_result>
}
   b4de2:	e7f4      	b.n	b4dce <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b4de4:	2003e708 	.word	0x2003e708

000b4de8 <module_user_init_hook>:
{
   b4de8:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b4dea:	4812      	ldr	r0, [pc, #72]	; (b4e34 <module_user_init_hook+0x4c>)
   b4dec:	2100      	movs	r1, #0
   b4dee:	f7ff fdcf 	bl	b4990 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b4df2:	4b11      	ldr	r3, [pc, #68]	; (b4e38 <module_user_init_hook+0x50>)
   b4df4:	681a      	ldr	r2, [r3, #0]
   b4df6:	4b11      	ldr	r3, [pc, #68]	; (b4e3c <module_user_init_hook+0x54>)
   b4df8:	429a      	cmp	r2, r3
   b4dfa:	4b11      	ldr	r3, [pc, #68]	; (b4e40 <module_user_init_hook+0x58>)
   b4dfc:	bf0c      	ite	eq
   b4dfe:	2201      	moveq	r2, #1
   b4e00:	2200      	movne	r2, #0
   b4e02:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b4e04:	d001      	beq.n	b4e0a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b4e06:	f7ff ffb1 	bl	b4d6c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b4e0a:	f7ff fbd5 	bl	b45b8 <HAL_RNG_GetRandomNumber>
   b4e0e:	4604      	mov	r4, r0
    srand(seed);
   b4e10:	f000 fbae 	bl	b5570 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b4e14:	4b0b      	ldr	r3, [pc, #44]	; (b4e44 <module_user_init_hook+0x5c>)
   b4e16:	b113      	cbz	r3, b4e1e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b4e18:	4620      	mov	r0, r4
   b4e1a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b4e1e:	2100      	movs	r1, #0
   b4e20:	4808      	ldr	r0, [pc, #32]	; (b4e44 <module_user_init_hook+0x5c>)
   b4e22:	f7ff fd95 	bl	b4950 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b4e26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b4e2a:	4807      	ldr	r0, [pc, #28]	; (b4e48 <module_user_init_hook+0x60>)
   b4e2c:	2100      	movs	r1, #0
   b4e2e:	f7ff bd03 	b.w	b4838 <system_ctrl_set_app_request_handler>
   b4e32:	bf00      	nop
   b4e34:	000b4d15 	.word	0x000b4d15
   b4e38:	2003f400 	.word	0x2003f400
   b4e3c:	9a271c1e 	.word	0x9a271c1e
   b4e40:	2003e704 	.word	0x2003e704
   b4e44:	00000000 	.word	0x00000000
   b4e48:	000b4db1 	.word	0x000b4db1

000b4e4c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b4e4c:	4770      	bx	lr

000b4e4e <_ZN9IPAddressD0Ev>:
   b4e4e:	b510      	push	{r4, lr}
   b4e50:	2118      	movs	r1, #24
   b4e52:	4604      	mov	r4, r0
   b4e54:	f7ff f927 	bl	b40a6 <_ZdlPvj>
   b4e58:	4620      	mov	r0, r4
   b4e5a:	bd10      	pop	{r4, pc}

000b4e5c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b4e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b4e5e:	7d03      	ldrb	r3, [r0, #20]
   b4e60:	2b06      	cmp	r3, #6
{
   b4e62:	b08d      	sub	sp, #52	; 0x34
   b4e64:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4e66:	f100 0704 	add.w	r7, r0, #4
   b4e6a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b4e6e:	d012      	beq.n	b4e96 <_ZNK9IPAddress7printToER5Print+0x3a>
   b4e70:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4e74:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b4e78:	220a      	movs	r2, #10
   b4e7a:	4630      	mov	r0, r6
   b4e7c:	f7ff fee9 	bl	b4c52 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b4e80:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b4e82:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b4e84:	d019      	beq.n	b4eba <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b4e86:	2c00      	cmp	r4, #0
   b4e88:	d0f4      	beq.n	b4e74 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b4e8a:	212e      	movs	r1, #46	; 0x2e
   b4e8c:	4630      	mov	r0, r6
   b4e8e:	f7ff fec7 	bl	b4c20 <_ZN5Print5printEc>
   b4e92:	4404      	add	r4, r0
   b4e94:	e7ee      	b.n	b4e74 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4e96:	232f      	movs	r3, #47	; 0x2f
   b4e98:	466a      	mov	r2, sp
   b4e9a:	4639      	mov	r1, r7
   b4e9c:	200a      	movs	r0, #10
		buf[0] = 0;
   b4e9e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4ea2:	f7ff fba9 	bl	b45f8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b4ea6:	4668      	mov	r0, sp
   b4ea8:	f7ff f8b8 	bl	b401c <strlen>
   b4eac:	6833      	ldr	r3, [r6, #0]
   b4eae:	4602      	mov	r2, r0
   b4eb0:	68db      	ldr	r3, [r3, #12]
   b4eb2:	4669      	mov	r1, sp
   b4eb4:	4630      	mov	r0, r6
   b4eb6:	4798      	blx	r3
   b4eb8:	4604      	mov	r4, r0
    }
    return n;
}
   b4eba:	4620      	mov	r0, r4
   b4ebc:	b00d      	add	sp, #52	; 0x34
   b4ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4ec0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b4ec0:	b510      	push	{r4, lr}
   b4ec2:	4b05      	ldr	r3, [pc, #20]	; (b4ed8 <_ZN9IPAddressC1Ev+0x18>)
   b4ec4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b4ec6:	2211      	movs	r2, #17
   b4ec8:	f840 3b04 	str.w	r3, [r0], #4
   b4ecc:	2100      	movs	r1, #0
   b4ece:	f000 fb47 	bl	b5560 <memset>
}
   b4ed2:	4620      	mov	r0, r4
   b4ed4:	bd10      	pop	{r4, pc}
   b4ed6:	bf00      	nop
   b4ed8:	000b5750 	.word	0x000b5750

000b4edc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b4edc:	4603      	mov	r3, r0
   b4ede:	4a07      	ldr	r2, [pc, #28]	; (b4efc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b4ee0:	b510      	push	{r4, lr}
   b4ee2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b4ee6:	f101 0210 	add.w	r2, r1, #16
   b4eea:	f851 4b04 	ldr.w	r4, [r1], #4
   b4eee:	f843 4b04 	str.w	r4, [r3], #4
   b4ef2:	4291      	cmp	r1, r2
   b4ef4:	d1f9      	bne.n	b4eea <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b4ef6:	780a      	ldrb	r2, [r1, #0]
   b4ef8:	701a      	strb	r2, [r3, #0]
}
   b4efa:	bd10      	pop	{r4, pc}
   b4efc:	000b5750 	.word	0x000b5750

000b4f00 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b4f00:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b4f02:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b4f06:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b4f0a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b4f0e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b4f12:	2304      	movs	r3, #4
   b4f14:	6041      	str	r1, [r0, #4]
   b4f16:	7503      	strb	r3, [r0, #20]
}
   b4f18:	bd10      	pop	{r4, pc}
	...

000b4f1c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b4f1c:	b507      	push	{r0, r1, r2, lr}
   b4f1e:	4b06      	ldr	r3, [pc, #24]	; (b4f38 <_ZN9IPAddressC1EPKh+0x1c>)
   b4f20:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b4f22:	78cb      	ldrb	r3, [r1, #3]
   b4f24:	9300      	str	r3, [sp, #0]
   b4f26:	788b      	ldrb	r3, [r1, #2]
   b4f28:	784a      	ldrb	r2, [r1, #1]
   b4f2a:	7809      	ldrb	r1, [r1, #0]
   b4f2c:	f7ff ffe8 	bl	b4f00 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b4f30:	b003      	add	sp, #12
   b4f32:	f85d fb04 	ldr.w	pc, [sp], #4
   b4f36:	bf00      	nop
   b4f38:	000b5750 	.word	0x000b5750

000b4f3c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b4f3c:	7441      	strb	r1, [r0, #17]
}
   b4f3e:	4770      	bx	lr

000b4f40 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b4f40:	4770      	bx	lr

000b4f42 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b4f42:	4770      	bx	lr

000b4f44 <_ZN9USBSerial4readEv>:
{
   b4f44:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b4f46:	2100      	movs	r1, #0
   b4f48:	7c00      	ldrb	r0, [r0, #16]
   b4f4a:	f7ff fc45 	bl	b47d8 <HAL_USB_USART_Receive_Data>
}
   b4f4e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4f52:	bd08      	pop	{r3, pc}

000b4f54 <_ZN9USBSerial4peekEv>:
{
   b4f54:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b4f56:	2101      	movs	r1, #1
   b4f58:	7c00      	ldrb	r0, [r0, #16]
   b4f5a:	f7ff fc3d 	bl	b47d8 <HAL_USB_USART_Receive_Data>
}
   b4f5e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b4f62:	bd08      	pop	{r3, pc}

000b4f64 <_ZN9USBSerial17availableForWriteEv>:
{
   b4f64:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b4f66:	7c00      	ldrb	r0, [r0, #16]
   b4f68:	f7ff fc2e 	bl	b47c8 <HAL_USB_USART_Available_Data_For_Write>
}
   b4f6c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4f70:	bd08      	pop	{r3, pc}

000b4f72 <_ZN9USBSerial9availableEv>:
{
   b4f72:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b4f74:	7c00      	ldrb	r0, [r0, #16]
   b4f76:	f7ff fc1f 	bl	b47b8 <HAL_USB_USART_Available_Data>
}
   b4f7a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b4f7e:	bd08      	pop	{r3, pc}

000b4f80 <_ZN9USBSerial5writeEh>:
{
   b4f80:	b513      	push	{r0, r1, r4, lr}
   b4f82:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4f84:	7c00      	ldrb	r0, [r0, #16]
{
   b4f86:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b4f88:	f7ff fc1e 	bl	b47c8 <HAL_USB_USART_Available_Data_For_Write>
   b4f8c:	2800      	cmp	r0, #0
   b4f8e:	9901      	ldr	r1, [sp, #4]
   b4f90:	dc01      	bgt.n	b4f96 <_ZN9USBSerial5writeEh+0x16>
   b4f92:	7c60      	ldrb	r0, [r4, #17]
   b4f94:	b120      	cbz	r0, b4fa0 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b4f96:	7c20      	ldrb	r0, [r4, #16]
   b4f98:	f7ff fc26 	bl	b47e8 <HAL_USB_USART_Send_Data>
   b4f9c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b4fa0:	b002      	add	sp, #8
   b4fa2:	bd10      	pop	{r4, pc}

000b4fa4 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b4fa4:	7c00      	ldrb	r0, [r0, #16]
   b4fa6:	f7ff bc27 	b.w	b47f8 <HAL_USB_USART_Flush_Data>

000b4faa <_ZN9USBSerialD0Ev>:
   b4faa:	b510      	push	{r4, lr}
   b4fac:	2114      	movs	r1, #20
   b4fae:	4604      	mov	r4, r0
   b4fb0:	f7ff f879 	bl	b40a6 <_ZdlPvj>
   b4fb4:	4620      	mov	r0, r4
   b4fb6:	bd10      	pop	{r4, pc}

000b4fb8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b4fb8:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b4fba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4fbe:	4604      	mov	r4, r0
   b4fc0:	4608      	mov	r0, r1
   b4fc2:	2100      	movs	r1, #0
   b4fc4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b4fc8:	4b04      	ldr	r3, [pc, #16]	; (b4fdc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b4fca:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b4fcc:	2301      	movs	r3, #1
  _serial = serial;
   b4fce:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b4fd0:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b4fd2:	4611      	mov	r1, r2
   b4fd4:	f7ff fbe0 	bl	b4798 <HAL_USB_USART_Init>
}
   b4fd8:	4620      	mov	r0, r4
   b4fda:	bd10      	pop	{r4, pc}
   b4fdc:	000b5764 	.word	0x000b5764

000b4fe0 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b4fe0:	7c00      	ldrb	r0, [r0, #16]
   b4fe2:	2200      	movs	r2, #0
   b4fe4:	f7ff bbe0 	b.w	b47a8 <HAL_USB_USART_Begin>

000b4fe8 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   b4fe8:	7c00      	ldrb	r0, [r0, #16]
   b4fea:	f7ff bc0d 	b.w	b4808 <HAL_USB_USART_Is_Connected>

000b4fee <_Z19acquireSerialBufferv>:
{
   b4fee:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b4ff0:	2214      	movs	r2, #20
{
   b4ff2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b4ff4:	2100      	movs	r1, #0
   b4ff6:	f000 fab3 	bl	b5560 <memset>
}
   b4ffa:	4620      	mov	r0, r4
   b4ffc:	bd10      	pop	{r4, pc}
	...

000b5000 <_Z16_fetch_usbserialv>:
{
   b5000:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5002:	4c0f      	ldr	r4, [pc, #60]	; (b5040 <_Z16_fetch_usbserialv+0x40>)
{
   b5004:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b5006:	a803      	add	r0, sp, #12
   b5008:	f7ff fff1 	bl	b4fee <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b500c:	7821      	ldrb	r1, [r4, #0]
   b500e:	f3bf 8f5b 	dmb	ish
   b5012:	f011 0101 	ands.w	r1, r1, #1
   b5016:	d10f      	bne.n	b5038 <_Z16_fetch_usbserialv+0x38>
   b5018:	4620      	mov	r0, r4
   b501a:	9101      	str	r1, [sp, #4]
   b501c:	f7ff f845 	bl	b40aa <__cxa_guard_acquire>
   b5020:	9901      	ldr	r1, [sp, #4]
   b5022:	b148      	cbz	r0, b5038 <_Z16_fetch_usbserialv+0x38>
   b5024:	aa03      	add	r2, sp, #12
   b5026:	4807      	ldr	r0, [pc, #28]	; (b5044 <_Z16_fetch_usbserialv+0x44>)
   b5028:	f7ff ffc6 	bl	b4fb8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b502c:	4620      	mov	r0, r4
   b502e:	f7ff f841 	bl	b40b4 <__cxa_guard_release>
   b5032:	4805      	ldr	r0, [pc, #20]	; (b5048 <_Z16_fetch_usbserialv+0x48>)
   b5034:	f000 fa80 	bl	b5538 <atexit>
	return _usbserial;
}
   b5038:	4802      	ldr	r0, [pc, #8]	; (b5044 <_Z16_fetch_usbserialv+0x44>)
   b503a:	b008      	add	sp, #32
   b503c:	bd10      	pop	{r4, pc}
   b503e:	bf00      	nop
   b5040:	2003e70c 	.word	0x2003e70c
   b5044:	2003e710 	.word	0x2003e710
   b5048:	000b4f41 	.word	0x000b4f41

000b504c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b504c:	4770      	bx	lr

000b504e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b504e:	7441      	strb	r1, [r0, #17]
}
   b5050:	4770      	bx	lr

000b5052 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b5052:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5054:	7c00      	ldrb	r0, [r0, #16]
   b5056:	f7ff fb07 	bl	b4668 <hal_usart_available_data_for_write>
}
   b505a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b505e:	bd08      	pop	{r3, pc}

000b5060 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b5060:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b5062:	7c00      	ldrb	r0, [r0, #16]
   b5064:	f7ff fad8 	bl	b4618 <hal_usart_available>
}
   b5068:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b506c:	bd08      	pop	{r3, pc}

000b506e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b506e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5070:	7c00      	ldrb	r0, [r0, #16]
   b5072:	f7ff fae1 	bl	b4638 <hal_usart_peek>
}
   b5076:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b507a:	bd08      	pop	{r3, pc}

000b507c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b507c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b507e:	7c00      	ldrb	r0, [r0, #16]
   b5080:	f7ff fad2 	bl	b4628 <hal_usart_read>
}
   b5084:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5088:	bd08      	pop	{r3, pc}

000b508a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b508a:	7c00      	ldrb	r0, [r0, #16]
   b508c:	f7ff badc 	b.w	b4648 <hal_usart_flush>

000b5090 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5090:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5092:	7c45      	ldrb	r5, [r0, #17]
{
   b5094:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5096:	b12d      	cbz	r5, b50a4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5098:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b509a:	b003      	add	sp, #12
   b509c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b50a0:	f7ff bab2 	b.w	b4608 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b50a4:	7c00      	ldrb	r0, [r0, #16]
   b50a6:	9101      	str	r1, [sp, #4]
   b50a8:	f7ff fade 	bl	b4668 <hal_usart_available_data_for_write>
   b50ac:	2800      	cmp	r0, #0
   b50ae:	9901      	ldr	r1, [sp, #4]
   b50b0:	dcf2      	bgt.n	b5098 <_ZN11USARTSerial5writeEh+0x8>
}
   b50b2:	4628      	mov	r0, r5
   b50b4:	b003      	add	sp, #12
   b50b6:	bd30      	pop	{r4, r5, pc}

000b50b8 <_ZN11USARTSerialD0Ev>:
   b50b8:	b510      	push	{r4, lr}
   b50ba:	2114      	movs	r1, #20
   b50bc:	4604      	mov	r4, r0
   b50be:	f7fe fff2 	bl	b40a6 <_ZdlPvj>
   b50c2:	4620      	mov	r0, r4
   b50c4:	bd10      	pop	{r4, pc}
	...

000b50c8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b50c8:	b510      	push	{r4, lr}
   b50ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b50ce:	4604      	mov	r4, r0
   b50d0:	4608      	mov	r0, r1
   b50d2:	4611      	mov	r1, r2
   b50d4:	2200      	movs	r2, #0
   b50d6:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b50da:	4b04      	ldr	r3, [pc, #16]	; (b50ec <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b50dc:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b50de:	2301      	movs	r3, #1
  _serial = serial;
   b50e0:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b50e2:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b50e4:	f7ff fac8 	bl	b4678 <hal_usart_init_ex>
}
   b50e8:	4620      	mov	r0, r4
   b50ea:	bd10      	pop	{r4, pc}
   b50ec:	000b5798 	.word	0x000b5798

000b50f0 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b50f0:	4770      	bx	lr

000b50f2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b50f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b50f4:	4606      	mov	r6, r0
   b50f6:	4615      	mov	r5, r2
   b50f8:	460c      	mov	r4, r1
   b50fa:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b50fc:	42bc      	cmp	r4, r7
   b50fe:	d006      	beq.n	b510e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b5100:	6833      	ldr	r3, [r6, #0]
   b5102:	f814 1b01 	ldrb.w	r1, [r4], #1
   b5106:	689b      	ldr	r3, [r3, #8]
   b5108:	4630      	mov	r0, r6
   b510a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b510c:	e7f6      	b.n	b50fc <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b510e:	4628      	mov	r0, r5
   b5110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5112 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b5112:	7c00      	ldrb	r0, [r0, #16]
   b5114:	2200      	movs	r2, #0
   b5116:	f7ff bab7 	b.w	b4688 <hal_i2c_write>

000b511a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b511a:	7c00      	ldrb	r0, [r0, #16]
   b511c:	2100      	movs	r1, #0
   b511e:	f7ff babb 	b.w	b4698 <hal_i2c_available>

000b5122 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b5122:	7c00      	ldrb	r0, [r0, #16]
   b5124:	2100      	movs	r1, #0
   b5126:	f7ff babf 	b.w	b46a8 <hal_i2c_read>

000b512a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b512a:	7c00      	ldrb	r0, [r0, #16]
   b512c:	2100      	movs	r1, #0
   b512e:	f7ff bac3 	b.w	b46b8 <hal_i2c_peek>

000b5132 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b5132:	7c00      	ldrb	r0, [r0, #16]
   b5134:	2100      	movs	r1, #0
   b5136:	f7ff bac7 	b.w	b46c8 <hal_i2c_flush>

000b513a <_ZN7TwoWireD0Ev>:
   b513a:	b510      	push	{r4, lr}
   b513c:	2114      	movs	r1, #20
   b513e:	4604      	mov	r4, r0
   b5140:	f7fe ffb1 	bl	b40a6 <_ZdlPvj>
   b5144:	4620      	mov	r0, r4
   b5146:	bd10      	pop	{r4, pc}

000b5148 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5148:	b538      	push	{r3, r4, r5, lr}
   b514a:	4604      	mov	r4, r0
   b514c:	4615      	mov	r5, r2
   b514e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5152:	2200      	movs	r2, #0
   b5154:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5158:	4b09      	ldr	r3, [pc, #36]	; (b5180 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b515a:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b515c:	4608      	mov	r0, r1
   b515e:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b5160:	4629      	mov	r1, r5
   b5162:	f7ff fac1 	bl	b46e8 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b5166:	30bf      	adds	r0, #191	; 0xbf
   b5168:	d108      	bne.n	b517c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b516a:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b516c:	07db      	lsls	r3, r3, #31
   b516e:	d505      	bpl.n	b517c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b5170:	6868      	ldr	r0, [r5, #4]
   b5172:	f7ff fbfd 	bl	b4970 <free>
    free(conf.tx_buffer);
   b5176:	68e8      	ldr	r0, [r5, #12]
   b5178:	f7ff fbfa 	bl	b4970 <free>
}
   b517c:	4620      	mov	r0, r4
   b517e:	bd38      	pop	{r3, r4, r5, pc}
   b5180:	000b57cc 	.word	0x000b57cc

000b5184 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b5184:	2200      	movs	r2, #0
   b5186:	6840      	ldr	r0, [r0, #4]
   b5188:	4611      	mov	r1, r2
   b518a:	f7ff bb81 	b.w	b4890 <network_ready>

000b518e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b518e:	2200      	movs	r2, #0
   b5190:	6840      	ldr	r0, [r0, #4]
   b5192:	4611      	mov	r1, r2
   b5194:	f7ff bb9c 	b.w	b48d0 <network_listening>

000b5198 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5198:	2200      	movs	r2, #0
   b519a:	6840      	ldr	r0, [r0, #4]
   b519c:	4611      	mov	r1, r2
   b519e:	f7ff bba7 	b.w	b48f0 <network_get_listen_timeout>

000b51a2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b51a2:	6840      	ldr	r0, [r0, #4]
   b51a4:	2200      	movs	r2, #0
   b51a6:	f7ff bb9b 	b.w	b48e0 <network_set_listen_timeout>

000b51aa <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b51aa:	6840      	ldr	r0, [r0, #4]
   b51ac:	2200      	movs	r2, #0
   b51ae:	f081 0101 	eor.w	r1, r1, #1
   b51b2:	f7ff bb85 	b.w	b48c0 <network_listen>

000b51b6 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b51b6:	2300      	movs	r3, #0
   b51b8:	6840      	ldr	r0, [r0, #4]
   b51ba:	461a      	mov	r2, r3
   b51bc:	4619      	mov	r1, r3
   b51be:	f7ff bb77 	b.w	b48b0 <network_off>

000b51c2 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b51c2:	2300      	movs	r3, #0
   b51c4:	6840      	ldr	r0, [r0, #4]
   b51c6:	461a      	mov	r2, r3
   b51c8:	4619      	mov	r1, r3
   b51ca:	f7ff bb69 	b.w	b48a0 <network_on>

000b51ce <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b51ce:	2200      	movs	r2, #0
   b51d0:	6840      	ldr	r0, [r0, #4]
   b51d2:	4611      	mov	r1, r2
   b51d4:	f7ff bb4c 	b.w	b4870 <network_connecting>

000b51d8 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b51d8:	6840      	ldr	r0, [r0, #4]
   b51da:	2200      	movs	r2, #0
   b51dc:	2102      	movs	r1, #2
   b51de:	f7ff bb4f 	b.w	b4880 <network_disconnect>

000b51e2 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b51e2:	2300      	movs	r3, #0
   b51e4:	6840      	ldr	r0, [r0, #4]
   b51e6:	461a      	mov	r2, r3
   b51e8:	f7ff bb3a 	b.w	b4860 <network_connect>

000b51ec <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b51ec:	4b02      	ldr	r3, [pc, #8]	; (b51f8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b51ee:	2204      	movs	r2, #4
   b51f0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b51f2:	4a02      	ldr	r2, [pc, #8]	; (b51fc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b51f4:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b51f6:	4770      	bx	lr
   b51f8:	2003e724 	.word	0x2003e724
   b51fc:	000b57f8 	.word	0x000b57f8

000b5200 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b5200:	2300      	movs	r3, #0
   b5202:	6840      	ldr	r0, [r0, #4]
   b5204:	461a      	mov	r2, r3
   b5206:	f7ff bb2b 	b.w	b4860 <network_connect>

000b520a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b520a:	6840      	ldr	r0, [r0, #4]
   b520c:	2200      	movs	r2, #0
   b520e:	2102      	movs	r1, #2
   b5210:	f7ff bb36 	b.w	b4880 <network_disconnect>

000b5214 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b5214:	2200      	movs	r2, #0
   b5216:	6840      	ldr	r0, [r0, #4]
   b5218:	4611      	mov	r1, r2
   b521a:	f7ff bb29 	b.w	b4870 <network_connecting>

000b521e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b521e:	2200      	movs	r2, #0
   b5220:	6840      	ldr	r0, [r0, #4]
   b5222:	4611      	mov	r1, r2
   b5224:	f7ff bb34 	b.w	b4890 <network_ready>

000b5228 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b5228:	2300      	movs	r3, #0
   b522a:	6840      	ldr	r0, [r0, #4]
   b522c:	461a      	mov	r2, r3
   b522e:	4619      	mov	r1, r3
   b5230:	f7ff bb36 	b.w	b48a0 <network_on>

000b5234 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b5234:	2300      	movs	r3, #0
   b5236:	6840      	ldr	r0, [r0, #4]
   b5238:	461a      	mov	r2, r3
   b523a:	4619      	mov	r1, r3
   b523c:	f7ff bb38 	b.w	b48b0 <network_off>

000b5240 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b5240:	6840      	ldr	r0, [r0, #4]
   b5242:	2100      	movs	r1, #0
   b5244:	f7ff bb5c 	b.w	b4900 <network_is_on>

000b5248 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b5248:	6840      	ldr	r0, [r0, #4]
   b524a:	2100      	movs	r1, #0
   b524c:	f7ff bb60 	b.w	b4910 <network_is_off>

000b5250 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5250:	6840      	ldr	r0, [r0, #4]
   b5252:	2200      	movs	r2, #0
   b5254:	f081 0101 	eor.w	r1, r1, #1
   b5258:	f7ff bb32 	b.w	b48c0 <network_listen>

000b525c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b525c:	6840      	ldr	r0, [r0, #4]
   b525e:	2200      	movs	r2, #0
   b5260:	f7ff bb3e 	b.w	b48e0 <network_set_listen_timeout>

000b5264 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5264:	2200      	movs	r2, #0
   b5266:	6840      	ldr	r0, [r0, #4]
   b5268:	4611      	mov	r1, r2
   b526a:	f7ff bb41 	b.w	b48f0 <network_get_listen_timeout>

000b526e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b526e:	2200      	movs	r2, #0
   b5270:	6840      	ldr	r0, [r0, #4]
   b5272:	4611      	mov	r1, r2
   b5274:	f7ff bb2c 	b.w	b48d0 <network_listening>

000b5278 <_ZN5spark12NetworkClass11isPreferredEv>:
    network_handle_t network = network_prefer(*this, prefer, nullptr);
    return Network.from(network);
}

bool NetworkClass::isPreferred() {
    return network_is_preferred(*this, nullptr);
   b5278:	6840      	ldr	r0, [r0, #4]
   b527a:	2100      	movs	r1, #0
   b527c:	f7ff bb58 	b.w	b4930 <network_is_preferred>

000b5280 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b5280:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5284:	b095      	sub	sp, #84	; 0x54
   b5286:	4614      	mov	r4, r2
   b5288:	460d      	mov	r5, r1
   b528a:	4607      	mov	r7, r0
    IPAddress addr;
   b528c:	f7ff fe18 	bl	b4ec0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b5290:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b5292:	221c      	movs	r2, #28
   b5294:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b5296:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5298:	f000 f962 	bl	b5560 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b529c:	2340      	movs	r3, #64	; 0x40
   b529e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b52a0:	4620      	mov	r0, r4
   b52a2:	466b      	mov	r3, sp
   b52a4:	aa0c      	add	r2, sp, #48	; 0x30
   b52a6:	2100      	movs	r1, #0
   b52a8:	f7ff f96e 	bl	b4588 <netdb_getaddrinfo>
    if (!r) {
   b52ac:	4604      	mov	r4, r0
   b52ae:	2800      	cmp	r0, #0
   b52b0:	d14b      	bne.n	b534a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b52b2:	4602      	mov	r2, r0
   b52b4:	2101      	movs	r1, #1
   b52b6:	6868      	ldr	r0, [r5, #4]
   b52b8:	f7ff faea 	bl	b4890 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b52bc:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b52be:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b52c0:	4622      	mov	r2, r4
   b52c2:	6868      	ldr	r0, [r5, #4]
   b52c4:	f7ff fae4 	bl	b4890 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b52c8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b52ca:	4681      	mov	r9, r0
        bool ok = false;
   b52cc:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b52ce:	2e00      	cmp	r6, #0
   b52d0:	d03b      	beq.n	b534a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b52d2:	2900      	cmp	r1, #0
   b52d4:	d139      	bne.n	b534a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b52d6:	6873      	ldr	r3, [r6, #4]
   b52d8:	2b02      	cmp	r3, #2
   b52da:	d003      	beq.n	b52e4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b52dc:	2b0a      	cmp	r3, #10
   b52de:	d011      	beq.n	b5304 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b52e0:	69f6      	ldr	r6, [r6, #28]
   b52e2:	e7f4      	b.n	b52ce <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b52e4:	f1b8 0f00 	cmp.w	r8, #0
   b52e8:	d0fa      	beq.n	b52e0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b52ea:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b52ec:	a806      	add	r0, sp, #24
   b52ee:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b52f0:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b52f2:	f7ff fe13 	bl	b4f1c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b52f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b52f8:	1d3c      	adds	r4, r7, #4
   b52fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b52fc:	682b      	ldr	r3, [r5, #0]
   b52fe:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5300:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b5302:	e7ed      	b.n	b52e0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b5304:	f1b9 0f00 	cmp.w	r9, #0
   b5308:	d0ea      	beq.n	b52e0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b530a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b530c:	2210      	movs	r2, #16
   b530e:	a801      	add	r0, sp, #4
   b5310:	f000 f926 	bl	b5560 <memset>
                    a.v = 6;
   b5314:	2306      	movs	r3, #6
   b5316:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b531a:	ad01      	add	r5, sp, #4
   b531c:	f104 0308 	add.w	r3, r4, #8
   b5320:	3418      	adds	r4, #24
   b5322:	6818      	ldr	r0, [r3, #0]
   b5324:	6859      	ldr	r1, [r3, #4]
   b5326:	462a      	mov	r2, r5
   b5328:	c203      	stmia	r2!, {r0, r1}
   b532a:	3308      	adds	r3, #8
   b532c:	42a3      	cmp	r3, r4
   b532e:	4615      	mov	r5, r2
   b5330:	d1f7      	bne.n	b5322 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b5332:	a901      	add	r1, sp, #4
   b5334:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b5336:	ad07      	add	r5, sp, #28
   b5338:	f7ff fdd0 	bl	b4edc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b533c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b533e:	1d3c      	adds	r4, r7, #4
   b5340:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5342:	682b      	ldr	r3, [r5, #0]
   b5344:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5346:	4649      	mov	r1, r9
   b5348:	e7ca      	b.n	b52e0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b534a:	9800      	ldr	r0, [sp, #0]
   b534c:	f7ff f914 	bl	b4578 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b5350:	4638      	mov	r0, r7
   b5352:	b015      	add	sp, #84	; 0x54
   b5354:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5358 <_ZN5spark12NetworkClass4fromEm>:
    switch (nif) {
   b5358:	3803      	subs	r0, #3
   b535a:	2802      	cmp	r0, #2
   b535c:	bf9a      	itte	ls
   b535e:	4b02      	ldrls	r3, [pc, #8]	; (b5368 <_ZN5spark12NetworkClass4fromEm+0x10>)
   b5360:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
NetworkClass& NetworkClass::from(network_interface_t nif) {
   b5364:	4801      	ldrhi	r0, [pc, #4]	; (b536c <_ZN5spark12NetworkClass4fromEm+0x14>)
}
   b5366:	4770      	bx	lr
   b5368:	000b5834 	.word	0x000b5834
   b536c:	2003e72c 	.word	0x2003e72c

000b5370 <_ZN5spark12NetworkClass6preferEb>:
NetworkClass& NetworkClass::prefer(bool prefer) {
   b5370:	b508      	push	{r3, lr}
    network_handle_t network = network_prefer(*this, prefer, nullptr);
   b5372:	2200      	movs	r2, #0
   b5374:	6840      	ldr	r0, [r0, #4]
   b5376:	f7ff fad3 	bl	b4920 <network_prefer>
}
   b537a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return Network.from(network);
   b537e:	f7ff bfeb 	b.w	b5358 <_ZN5spark12NetworkClass4fromEm>
	...

000b5384 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b5384:	4b02      	ldr	r3, [pc, #8]	; (b5390 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b5386:	4a03      	ldr	r2, [pc, #12]	; (b5394 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b5388:	601a      	str	r2, [r3, #0]
   b538a:	2200      	movs	r2, #0
   b538c:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b538e:	4770      	bx	lr
   b5390:	2003e72c 	.word	0x2003e72c
   b5394:	000b5848 	.word	0x000b5848

000b5398 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b5398:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b539a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b539c:	d902      	bls.n	b53a4 <pinAvailable+0xc>
    return false;
   b539e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b53a0:	b002      	add	sp, #8
   b53a2:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b53a4:	f1a0 030b 	sub.w	r3, r0, #11
   b53a8:	2b02      	cmp	r3, #2
   b53aa:	d81a      	bhi.n	b53e2 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b53ac:	4c17      	ldr	r4, [pc, #92]	; (b540c <pinAvailable+0x74>)
   b53ae:	7821      	ldrb	r1, [r4, #0]
   b53b0:	f3bf 8f5b 	dmb	ish
   b53b4:	f011 0101 	ands.w	r1, r1, #1
   b53b8:	d10b      	bne.n	b53d2 <pinAvailable+0x3a>
   b53ba:	4620      	mov	r0, r4
   b53bc:	9101      	str	r1, [sp, #4]
   b53be:	f7fe fe74 	bl	b40aa <__cxa_guard_acquire>
   b53c2:	9901      	ldr	r1, [sp, #4]
   b53c4:	b128      	cbz	r0, b53d2 <pinAvailable+0x3a>
   b53c6:	4812      	ldr	r0, [pc, #72]	; (b5410 <pinAvailable+0x78>)
   b53c8:	f7ff fb2e 	bl	b4a28 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b53cc:	4620      	mov	r0, r4
   b53ce:	f7fe fe71 	bl	b40b4 <__cxa_guard_release>
   b53d2:	4b0f      	ldr	r3, [pc, #60]	; (b5410 <pinAvailable+0x78>)
   b53d4:	7818      	ldrb	r0, [r3, #0]
   b53d6:	f7ff f9bf 	bl	b4758 <hal_spi_is_enabled>
   b53da:	2800      	cmp	r0, #0
   b53dc:	d1df      	bne.n	b539e <pinAvailable+0x6>
  return true; // 'pin' is available
   b53de:	2001      	movs	r0, #1
   b53e0:	e7de      	b.n	b53a0 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b53e2:	2801      	cmp	r0, #1
   b53e4:	d809      	bhi.n	b53fa <pinAvailable+0x62>
   b53e6:	f000 f881 	bl	b54ec <_Z19__fetch_global_Wirev>
   b53ea:	2100      	movs	r1, #0
   b53ec:	7c00      	ldrb	r0, [r0, #16]
   b53ee:	f7ff f973 	bl	b46d8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b53f2:	f080 0001 	eor.w	r0, r0, #1
   b53f6:	b2c0      	uxtb	r0, r0
   b53f8:	e7d2      	b.n	b53a0 <pinAvailable+0x8>
   b53fa:	3809      	subs	r0, #9
   b53fc:	2801      	cmp	r0, #1
   b53fe:	d8ee      	bhi.n	b53de <pinAvailable+0x46>
   b5400:	f000 f834 	bl	b546c <_Z22__fetch_global_Serial1v>
   b5404:	7c00      	ldrb	r0, [r0, #16]
   b5406:	f7ff f927 	bl	b4658 <hal_usart_is_enabled>
   b540a:	e7f2      	b.n	b53f2 <pinAvailable+0x5a>
   b540c:	2003e6c0 	.word	0x2003e6c0
   b5410:	2003e6c4 	.word	0x2003e6c4

000b5414 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5414:	2823      	cmp	r0, #35	; 0x23
{
   b5416:	b538      	push	{r3, r4, r5, lr}
   b5418:	4604      	mov	r4, r0
   b541a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b541c:	d80a      	bhi.n	b5434 <pinMode+0x20>
   b541e:	29ff      	cmp	r1, #255	; 0xff
   b5420:	d008      	beq.n	b5434 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b5422:	f7ff ffb9 	bl	b5398 <pinAvailable>
   b5426:	b128      	cbz	r0, b5434 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b5428:	4629      	mov	r1, r5
   b542a:	4620      	mov	r0, r4
}
   b542c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b5430:	f7ff b8ba 	b.w	b45a8 <hal_gpio_mode>
}
   b5434:	bd38      	pop	{r3, r4, r5, pc}

000b5436 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5436:	4770      	bx	lr

000b5438 <_Z20acquireSerial1Bufferv>:
{
   b5438:	b538      	push	{r3, r4, r5, lr}
   b543a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b543c:	2514      	movs	r5, #20
   b543e:	462a      	mov	r2, r5
   b5440:	2100      	movs	r1, #0
   b5442:	f000 f88d 	bl	b5560 <memset>
   b5446:	8025      	strh	r5, [r4, #0]
   b5448:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b544a:	4907      	ldr	r1, [pc, #28]	; (b5468 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b544c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b544e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b5450:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5452:	f000 f86f 	bl	b5534 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5456:	4904      	ldr	r1, [pc, #16]	; (b5468 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b5458:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b545a:	4628      	mov	r0, r5
   b545c:	f000 f86a 	bl	b5534 <_ZnajRKSt9nothrow_t>
    };
   b5460:	60e0      	str	r0, [r4, #12]
}
   b5462:	4620      	mov	r0, r4
   b5464:	bd38      	pop	{r3, r4, r5, pc}
   b5466:	bf00      	nop
   b5468:	000b5884 	.word	0x000b5884

000b546c <_Z22__fetch_global_Serial1v>:
{
   b546c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b546e:	4d0e      	ldr	r5, [pc, #56]	; (b54a8 <_Z22__fetch_global_Serial1v+0x3c>)
   b5470:	7829      	ldrb	r1, [r5, #0]
   b5472:	f3bf 8f5b 	dmb	ish
   b5476:	f011 0401 	ands.w	r4, r1, #1
{
   b547a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b547c:	d111      	bne.n	b54a2 <_Z22__fetch_global_Serial1v+0x36>
   b547e:	4628      	mov	r0, r5
   b5480:	f7fe fe13 	bl	b40aa <__cxa_guard_acquire>
   b5484:	b168      	cbz	r0, b54a2 <_Z22__fetch_global_Serial1v+0x36>
   b5486:	a801      	add	r0, sp, #4
   b5488:	f7ff ffd6 	bl	b5438 <_Z20acquireSerial1Bufferv>
   b548c:	aa01      	add	r2, sp, #4
   b548e:	4621      	mov	r1, r4
   b5490:	4806      	ldr	r0, [pc, #24]	; (b54ac <_Z22__fetch_global_Serial1v+0x40>)
   b5492:	f7ff fe19 	bl	b50c8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b5496:	4628      	mov	r0, r5
   b5498:	f7fe fe0c 	bl	b40b4 <__cxa_guard_release>
   b549c:	4804      	ldr	r0, [pc, #16]	; (b54b0 <_Z22__fetch_global_Serial1v+0x44>)
   b549e:	f000 f84b 	bl	b5538 <atexit>
    return serial1;
}
   b54a2:	4802      	ldr	r0, [pc, #8]	; (b54ac <_Z22__fetch_global_Serial1v+0x40>)
   b54a4:	b007      	add	sp, #28
   b54a6:	bd30      	pop	{r4, r5, pc}
   b54a8:	2003e734 	.word	0x2003e734
   b54ac:	2003e738 	.word	0x2003e738
   b54b0:	000b5437 	.word	0x000b5437

000b54b4 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b54b4:	4770      	bx	lr
	...

000b54b8 <_Z17acquireWireBufferv>:
{
   b54b8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b54ba:	4b0a      	ldr	r3, [pc, #40]	; (b54e4 <_Z17acquireWireBufferv+0x2c>)
   b54bc:	6003      	str	r3, [r0, #0]
   b54be:	2301      	movs	r3, #1
{
   b54c0:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b54c2:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b54c4:	4908      	ldr	r1, [pc, #32]	; (b54e8 <_Z17acquireWireBufferv+0x30>)
   b54c6:	2020      	movs	r0, #32
   b54c8:	f000 f834 	bl	b5534 <_ZnajRKSt9nothrow_t>
	};
   b54cc:	2520      	movs	r5, #32
   b54ce:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b54d0:	4905      	ldr	r1, [pc, #20]	; (b54e8 <_Z17acquireWireBufferv+0x30>)
	};
   b54d2:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b54d4:	4628      	mov	r0, r5
   b54d6:	f000 f82d 	bl	b5534 <_ZnajRKSt9nothrow_t>
	};
   b54da:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b54de:	4620      	mov	r0, r4
   b54e0:	bd38      	pop	{r3, r4, r5, pc}
   b54e2:	bf00      	nop
   b54e4:	00010018 	.word	0x00010018
   b54e8:	000b5884 	.word	0x000b5884

000b54ec <_Z19__fetch_global_Wirev>:
{
   b54ec:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b54ee:	4d0e      	ldr	r5, [pc, #56]	; (b5528 <_Z19__fetch_global_Wirev+0x3c>)
   b54f0:	7829      	ldrb	r1, [r5, #0]
   b54f2:	f3bf 8f5b 	dmb	ish
   b54f6:	f011 0401 	ands.w	r4, r1, #1
{
   b54fa:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b54fc:	d111      	bne.n	b5522 <_Z19__fetch_global_Wirev+0x36>
   b54fe:	4628      	mov	r0, r5
   b5500:	f7fe fdd3 	bl	b40aa <__cxa_guard_acquire>
   b5504:	b168      	cbz	r0, b5522 <_Z19__fetch_global_Wirev+0x36>
   b5506:	4668      	mov	r0, sp
   b5508:	f7ff ffd6 	bl	b54b8 <_Z17acquireWireBufferv>
   b550c:	466a      	mov	r2, sp
   b550e:	4621      	mov	r1, r4
   b5510:	4806      	ldr	r0, [pc, #24]	; (b552c <_Z19__fetch_global_Wirev+0x40>)
   b5512:	f7ff fe19 	bl	b5148 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b5516:	4628      	mov	r0, r5
   b5518:	f7fe fdcc 	bl	b40b4 <__cxa_guard_release>
   b551c:	4804      	ldr	r0, [pc, #16]	; (b5530 <_Z19__fetch_global_Wirev+0x44>)
   b551e:	f000 f80b 	bl	b5538 <atexit>
	return wire;
}
   b5522:	4802      	ldr	r0, [pc, #8]	; (b552c <_Z19__fetch_global_Wirev+0x40>)
   b5524:	b007      	add	sp, #28
   b5526:	bd30      	pop	{r4, r5, pc}
   b5528:	2003e750 	.word	0x2003e750
   b552c:	2003e754 	.word	0x2003e754
   b5530:	000b54b5 	.word	0x000b54b5

000b5534 <_ZnajRKSt9nothrow_t>:
   b5534:	f7fe bdb5 	b.w	b40a2 <_Znaj>

000b5538 <atexit>:
   b5538:	2300      	movs	r3, #0
   b553a:	4601      	mov	r1, r0
   b553c:	461a      	mov	r2, r3
   b553e:	4618      	mov	r0, r3
   b5540:	f000 b844 	b.w	b55cc <__register_exitproc>

000b5544 <memcpy>:
   b5544:	440a      	add	r2, r1
   b5546:	4291      	cmp	r1, r2
   b5548:	f100 33ff 	add.w	r3, r0, #4294967295
   b554c:	d100      	bne.n	b5550 <memcpy+0xc>
   b554e:	4770      	bx	lr
   b5550:	b510      	push	{r4, lr}
   b5552:	f811 4b01 	ldrb.w	r4, [r1], #1
   b5556:	f803 4f01 	strb.w	r4, [r3, #1]!
   b555a:	4291      	cmp	r1, r2
   b555c:	d1f9      	bne.n	b5552 <memcpy+0xe>
   b555e:	bd10      	pop	{r4, pc}

000b5560 <memset>:
   b5560:	4402      	add	r2, r0
   b5562:	4603      	mov	r3, r0
   b5564:	4293      	cmp	r3, r2
   b5566:	d100      	bne.n	b556a <memset+0xa>
   b5568:	4770      	bx	lr
   b556a:	f803 1b01 	strb.w	r1, [r3], #1
   b556e:	e7f9      	b.n	b5564 <memset+0x4>

000b5570 <srand>:
   b5570:	b538      	push	{r3, r4, r5, lr}
   b5572:	4b10      	ldr	r3, [pc, #64]	; (b55b4 <srand+0x44>)
   b5574:	681d      	ldr	r5, [r3, #0]
   b5576:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5578:	4604      	mov	r4, r0
   b557a:	b9b3      	cbnz	r3, b55aa <srand+0x3a>
   b557c:	2018      	movs	r0, #24
   b557e:	f7ff f9ef 	bl	b4960 <malloc>
   b5582:	4602      	mov	r2, r0
   b5584:	63a8      	str	r0, [r5, #56]	; 0x38
   b5586:	b920      	cbnz	r0, b5592 <srand+0x22>
   b5588:	4b0b      	ldr	r3, [pc, #44]	; (b55b8 <srand+0x48>)
   b558a:	480c      	ldr	r0, [pc, #48]	; (b55bc <srand+0x4c>)
   b558c:	2142      	movs	r1, #66	; 0x42
   b558e:	f7ff f9f7 	bl	b4980 <__assert_func>
   b5592:	490b      	ldr	r1, [pc, #44]	; (b55c0 <srand+0x50>)
   b5594:	4b0b      	ldr	r3, [pc, #44]	; (b55c4 <srand+0x54>)
   b5596:	e9c0 1300 	strd	r1, r3, [r0]
   b559a:	4b0b      	ldr	r3, [pc, #44]	; (b55c8 <srand+0x58>)
   b559c:	6083      	str	r3, [r0, #8]
   b559e:	230b      	movs	r3, #11
   b55a0:	8183      	strh	r3, [r0, #12]
   b55a2:	2100      	movs	r1, #0
   b55a4:	2001      	movs	r0, #1
   b55a6:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b55aa:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b55ac:	2200      	movs	r2, #0
   b55ae:	611c      	str	r4, [r3, #16]
   b55b0:	615a      	str	r2, [r3, #20]
   b55b2:	bd38      	pop	{r3, r4, r5, pc}
   b55b4:	2003e618 	.word	0x2003e618
   b55b8:	000b5885 	.word	0x000b5885
   b55bc:	000b589c 	.word	0x000b589c
   b55c0:	abcd330e 	.word	0xabcd330e
   b55c4:	e66d1234 	.word	0xe66d1234
   b55c8:	0005deec 	.word	0x0005deec

000b55cc <__register_exitproc>:
   b55cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b55d0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b568c <__register_exitproc+0xc0>
   b55d4:	4606      	mov	r6, r0
   b55d6:	f8d8 0000 	ldr.w	r0, [r8]
   b55da:	461f      	mov	r7, r3
   b55dc:	460d      	mov	r5, r1
   b55de:	4691      	mov	r9, r2
   b55e0:	f000 f856 	bl	b5690 <__retarget_lock_acquire_recursive>
   b55e4:	4b25      	ldr	r3, [pc, #148]	; (b567c <__register_exitproc+0xb0>)
   b55e6:	681c      	ldr	r4, [r3, #0]
   b55e8:	b934      	cbnz	r4, b55f8 <__register_exitproc+0x2c>
   b55ea:	4c25      	ldr	r4, [pc, #148]	; (b5680 <__register_exitproc+0xb4>)
   b55ec:	601c      	str	r4, [r3, #0]
   b55ee:	4b25      	ldr	r3, [pc, #148]	; (b5684 <__register_exitproc+0xb8>)
   b55f0:	b113      	cbz	r3, b55f8 <__register_exitproc+0x2c>
   b55f2:	681b      	ldr	r3, [r3, #0]
   b55f4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b55f8:	6863      	ldr	r3, [r4, #4]
   b55fa:	2b1f      	cmp	r3, #31
   b55fc:	dd07      	ble.n	b560e <__register_exitproc+0x42>
   b55fe:	f8d8 0000 	ldr.w	r0, [r8]
   b5602:	f000 f847 	bl	b5694 <__retarget_lock_release_recursive>
   b5606:	f04f 30ff 	mov.w	r0, #4294967295
   b560a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b560e:	b34e      	cbz	r6, b5664 <__register_exitproc+0x98>
   b5610:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b5614:	b988      	cbnz	r0, b563a <__register_exitproc+0x6e>
   b5616:	4b1c      	ldr	r3, [pc, #112]	; (b5688 <__register_exitproc+0xbc>)
   b5618:	b923      	cbnz	r3, b5624 <__register_exitproc+0x58>
   b561a:	f8d8 0000 	ldr.w	r0, [r8]
   b561e:	f000 f838 	bl	b5692 <__retarget_lock_release>
   b5622:	e7f0      	b.n	b5606 <__register_exitproc+0x3a>
   b5624:	f44f 7084 	mov.w	r0, #264	; 0x108
   b5628:	f7ff f99a 	bl	b4960 <malloc>
   b562c:	2800      	cmp	r0, #0
   b562e:	d0f4      	beq.n	b561a <__register_exitproc+0x4e>
   b5630:	2300      	movs	r3, #0
   b5632:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b5636:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b563a:	6863      	ldr	r3, [r4, #4]
   b563c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b5640:	2201      	movs	r2, #1
   b5642:	409a      	lsls	r2, r3
   b5644:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b5648:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b564c:	4313      	orrs	r3, r2
   b564e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b5652:	2e02      	cmp	r6, #2
   b5654:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b5658:	bf02      	ittt	eq
   b565a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b565e:	4313      	orreq	r3, r2
   b5660:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b5664:	6863      	ldr	r3, [r4, #4]
   b5666:	f8d8 0000 	ldr.w	r0, [r8]
   b566a:	1c5a      	adds	r2, r3, #1
   b566c:	3302      	adds	r3, #2
   b566e:	6062      	str	r2, [r4, #4]
   b5670:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b5674:	f000 f80e 	bl	b5694 <__retarget_lock_release_recursive>
   b5678:	2000      	movs	r0, #0
   b567a:	e7c6      	b.n	b560a <__register_exitproc+0x3e>
   b567c:	2003e7f4 	.word	0x2003e7f4
   b5680:	2003e768 	.word	0x2003e768
   b5684:	00000000 	.word	0x00000000
   b5688:	000b4961 	.word	0x000b4961
   b568c:	2003e67c 	.word	0x2003e67c

000b5690 <__retarget_lock_acquire_recursive>:
   b5690:	4770      	bx	lr

000b5692 <__retarget_lock_release>:
   b5692:	4770      	bx	lr

000b5694 <__retarget_lock_release_recursive>:
   b5694:	4770      	bx	lr

000b5696 <link_code_end>:
	...

000b5698 <dynalib_user>:
   b5698:	402d 000b 4069 000b 4091 000b 4095 000b     -@..i@...@...@..
   b56a8:	0000 0000 6441 6661 7572 7469 4d20 5250     ....Adafruit MPR
   b56b8:	3231 2031 6143 6170 6963 6974 6576 5420     121 Capacitive T
   b56c8:	756f 6863 7320 6e65 6f73 2072 6574 7473     ouch sensor test
   b56d8:	0000 0000                                   ....

000b56dc <_ZTVN5spark13EthernetClassE>:
	...
   b56e4:	49ff 000b 49f5 000b 49eb 000b 49e1 000b     .I...I...I...I..
   b56f4:	49d5 000b 49c9 000b 5241 000b 5249 000b     .I...I..AR..IR..
   b5704:	49bd 000b 49b5 000b 49ab 000b 49a1 000b     .I...I...I...I..
   b5714:	5371 000b 5279 000b 5281 000b               qS..yR...R..

000b5720 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b5720:	0800 1810 2820 3830 7061 0070 5925 252d     .... (08app.%Y-%
   b5730:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   b5740:	7361 7463 6d69 0065                         asctime.

000b5748 <_ZTV9IPAddress>:
	...
   b5750:	4e5d 000b 4e4d 000b 4e4f 000b               ]N..MN..ON..

000b575c <_ZTV9USBSerial>:
	...
   b5764:	4f43 000b 4fab 000b 4f81 000b 4bd1 000b     CO...O...O...K..
   b5774:	4f73 000b 4f45 000b 4f55 000b 4fa5 000b     sO..EO..UO...O..
   b5784:	4cb9 000b 4f65 000b 4f3d 000b               .L..eO..=O..

000b5790 <_ZTV11USARTSerial>:
	...
   b5798:	504d 000b 50b9 000b 5091 000b 4bd1 000b     MP...P...P...K..
   b57a8:	5061 000b 507d 000b 506f 000b 508b 000b     aP..}P..oP...P..
   b57b8:	4cb9 000b 504f 000b 5053 000b               .L..OP..SP..

000b57c4 <_ZTV7TwoWire>:
	...
   b57cc:	50f1 000b 513b 000b 5113 000b 50f3 000b     .P..;Q...Q...P..
   b57dc:	511b 000b 5123 000b 512b 000b 5133 000b     .Q..#Q..+Q..3Q..
   b57ec:	4cb9 000b                                   .L..

000b57f0 <_ZTVN5spark9WiFiClassE>:
	...
   b57f8:	51e3 000b 51d9 000b 51cf 000b 5185 000b     .Q...Q...Q...Q..
   b5808:	51c3 000b 51b7 000b 5241 000b 5249 000b     .Q...Q..AR..IR..
   b5818:	51ab 000b 51a3 000b 5199 000b 518f 000b     .Q...Q...Q...Q..
   b5828:	5371 000b 5279 000b 5281 000b               qS..yR...R..

000b5834 <CSWTCH.109>:
   b5834:	e6d0 2003 e724 2003 e72c 2003               ... $.. ,.. 

000b5840 <_ZTVN5spark12NetworkClassE>:
	...
   b5848:	5201 000b 520b 000b 5215 000b 521f 000b     .R...R...R...R..
   b5858:	5229 000b 5235 000b 5241 000b 5249 000b     )R..5R..AR..IR..
   b5868:	5251 000b 525d 000b 5265 000b 526f 000b     QR..]R..eR..oR..
   b5878:	5371 000b 5279 000b 5281 000b               qS..yR...R..

000b5884 <_ZSt7nothrow>:
   b5884:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b5894:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   b58a4:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   b58b4:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   b58c4:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   b58d4:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   b58e4:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   b58f4:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   b5904:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   b5914:	646e 632e                                    nd.c.

000b5919 <link_const_data_end>:
   b5919:	00          	.byte	0x00
	...

000b591c <link_constructors_location>:
   b591c:	000b41ad 	.word	0x000b41ad
   b5920:	000b4569 	.word	0x000b4569
   b5924:	000b4a09 	.word	0x000b4a09
   b5928:	000b4b9d 	.word	0x000b4b9d
   b592c:	000b4bc1 	.word	0x000b4bc1
   b5930:	000b4ce5 	.word	0x000b4ce5
   b5934:	000b4cf5 	.word	0x000b4cf5
   b5938:	000b4d09 	.word	0x000b4d09
   b593c:	000b51ed 	.word	0x000b51ed
   b5940:	000b5385 	.word	0x000b5385
