
c:/Users/Maaou99/Downloads/STEMMA-CAPACITIVE-TOUCH/STEMMA-CAPACITIVE-TOUCH/target/6.1.1/argon/STEMMA-CAPACITIVE-TOUCH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002460  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b647c  000b647c  0000647c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         0000006c  2003e5c4  000b64a0  0000e5c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000001cc  2003e630  2003e630  0001e630  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000b650c  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000b6510  000b6510  00016510  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000b6516  000b6516  00016516  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b653a  000b653a  0001653a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   0016139a  00000000  00000000  0001653e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00016c73  00000000  00000000  001778d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0003a889  00000000  00000000  0018e54b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002ba8  00000000  00000000  001c8dd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000a540  00000000  00000000  001cb97c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00042ae2  00000000  00000000  001d5ebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0004ec56  00000000  00000000  0021899e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0015990a  00000000  00000000  002675f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00007aac  00000000  00000000  003c0f00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <strlen>:
   b401c:	4603      	mov	r3, r0
   b401e:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4022:	2a00      	cmp	r2, #0
   b4024:	d1fb      	bne.n	b401e <strlen+0x2>
   b4026:	1a18      	subs	r0, r3, r0
   b4028:	3801      	subs	r0, #1
   b402a:	4770      	bx	lr

000b402c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b402c:	4809      	ldr	r0, [pc, #36]	; (b4054 <module_user_pre_init+0x28>)
   b402e:	490a      	ldr	r1, [pc, #40]	; (b4058 <module_user_pre_init+0x2c>)
   b4030:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4032:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4034:	d005      	beq.n	b4042 <module_user_pre_init+0x16>
   b4036:	4a09      	ldr	r2, [pc, #36]	; (b405c <module_user_pre_init+0x30>)
   b4038:	4282      	cmp	r2, r0
   b403a:	d002      	beq.n	b4042 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f001 fffd 	bl	b603c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4042:	4807      	ldr	r0, [pc, #28]	; (b4060 <module_user_pre_init+0x34>)
   b4044:	4a07      	ldr	r2, [pc, #28]	; (b4064 <module_user_pre_init+0x38>)
   b4046:	2100      	movs	r1, #0
   b4048:	1a12      	subs	r2, r2, r0
   b404a:	f002 f805 	bl	b6058 <memset>
    return &link_global_data_start;
}
   b404e:	4801      	ldr	r0, [pc, #4]	; (b4054 <module_user_pre_init+0x28>)
   b4050:	bd08      	pop	{r3, pc}
   b4052:	bf00      	nop
   b4054:	2003e5c4 	.word	0x2003e5c4
   b4058:	000b64a0 	.word	0x000b64a0
   b405c:	2003e630 	.word	0x2003e630
   b4060:	2003e630 	.word	0x2003e630
   b4064:	2003e7fc 	.word	0x2003e7fc

000b4068 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4068:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b406a:	4e07      	ldr	r6, [pc, #28]	; (b4088 <module_user_init+0x20>)
   b406c:	4c07      	ldr	r4, [pc, #28]	; (b408c <module_user_init+0x24>)
    module_user_init_hook();
   b406e:	f001 fbe3 	bl	b5838 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4072:	1ba4      	subs	r4, r4, r6
   b4074:	08a4      	lsrs	r4, r4, #2
   b4076:	2500      	movs	r5, #0
   b4078:	42ac      	cmp	r4, r5
   b407a:	d100      	bne.n	b407e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b407c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b407e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4082:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4084:	3501      	adds	r5, #1
   b4086:	e7f7      	b.n	b4078 <module_user_init+0x10>
   b4088:	000b6454 	.word	0x000b6454
   b408c:	000b647c 	.word	0x000b647c

000b4090 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4090:	f000 b816 	b.w	b40c0 <setup>

000b4094 <module_user_loop>:
}

void module_user_loop() {
   b4094:	b508      	push	{r3, lr}
    loop();
   b4096:	f000 f881 	bl	b419c <loop>
    _post_loop();
}
   b409a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b409e:	f001 bb83 	b.w	b57a8 <_post_loop>

000b40a2 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b40a2:	f001 b8fb 	b.w	b529c <malloc>

000b40a6 <_Znaj>:
   b40a6:	f001 b8f9 	b.w	b529c <malloc>

000b40aa <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b40aa:	f001 b8ff 	b.w	b52ac <free>

000b40ae <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40ae:	7800      	ldrb	r0, [r0, #0]
   b40b0:	fab0 f080 	clz	r0, r0
   b40b4:	0940      	lsrs	r0, r0, #5
   b40b6:	4770      	bx	lr

000b40b8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40b8:	2301      	movs	r3, #1
   b40ba:	7003      	strb	r3, [r0, #0]
   b40bc:	4770      	bx	lr
	...

000b40c0 <setup>:
const long interval = 100;         // Interval between LED movements (ms)
int ledPositions[12];              // Position of the moving LED for each touchpad
bool moving[12];                   // If an LED is currently moving for each pad

// setup() runs once, when the device is first turned on.
void setup() {
   b40c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 strip.begin();
   b40c2:	4831      	ldr	r0, [pc, #196]	; (b4188 <setup+0xc8>)
   b40c4:	f000 fbe4 	bl	b4890 <_ZN16Adafruit_DotStar5beginEv>
  strip.show();
   b40c8:	482f      	ldr	r0, [pc, #188]	; (b4188 <setup+0xc8>)
   b40ca:	f000 fb3d 	bl	b4748 <_ZN16Adafruit_DotStar4showEv>
  
  strip.setBrightness(72);
   b40ce:	2148      	movs	r1, #72	; 0x48
   b40d0:	482d      	ldr	r0, [pc, #180]	; (b4188 <setup+0xc8>)
   b40d2:	f000 fb0f 	bl	b46f4 <_ZN16Adafruit_DotStar13setBrightnessEh>
  // strip2.show();
  // strip3.setBrightness(8);
  // strip3.begin();
  // strip3.show();
  
  Serial.begin(115200);
   b40d6:	f001 fcbb 	bl	b5a50 <_Z16_fetch_usbserialv>
   b40da:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   b40de:	f001 fca7 	bl	b5a30 <_ZN9USBSerial5beginEl>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   b40e2:	2000      	movs	r0, #0
   b40e4:	f000 fed6 	bl	b4e94 <hal_timer_millis>
        while (_while() && !_condition()) {
   b40e8:	f241 3588 	movw	r5, #5000	; 0x1388
        return hal_timer_millis(nullptr);
   b40ec:	4604      	mov	r4, r0
   b40ee:	2000      	movs	r0, #0
   b40f0:	f000 fed0 	bl	b4e94 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b40f4:	1b00      	subs	r0, r0, r4
   b40f6:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b40fa:	42a8      	cmp	r0, r5
   b40fc:	f171 0300 	sbcs.w	r3, r1, #0
   b4100:	d207      	bcs.n	b4112 <setup+0x52>
  waitFor(Serial.isConnected, 5000);
   b4102:	f001 fca5 	bl	b5a50 <_Z16_fetch_usbserialv>
   b4106:	f001 fc97 	bl	b5a38 <_ZN9USBSerial11isConnectedEv>
   b410a:	b910      	cbnz	r0, b4112 <setup+0x52>
            spark_process();
   b410c:	f001 f8b6 	bl	b527c <spark_process>
        while (_while() && !_condition()) {
   b4110:	e7ed      	b.n	b40ee <setup+0x2e>
   b4112:	f001 fc9d 	bl	b5a50 <_Z16_fetch_usbserialv>
   b4116:	f001 fc8f 	bl	b5a38 <_ZN9USBSerial11isConnectedEv>
  
   Serial.println("Adafruit MPR121 Capacitive Touch sensor test"); 
   b411a:	f001 fc99 	bl	b5a50 <_Z16_fetch_usbserialv>
   b411e:	491b      	ldr	r1, [pc, #108]	; (b418c <setup+0xcc>)
   b4120:	f001 fab1 	bl	b5686 <_ZN5Print7printlnEPKc>
  
  // Default address is 0x5A, if tied to 3.3V its 0x5B
  // If tied to SDA its 0x5C and if SCL then 0x5D
  if (!cap.begin(0x5A)) {
   b4124:	f001 ff5e 	bl	b5fe4 <_Z19__fetch_global_Wirev>
   b4128:	2306      	movs	r3, #6
   b412a:	4602      	mov	r2, r0
   b412c:	9300      	str	r3, [sp, #0]
   b412e:	4818      	ldr	r0, [pc, #96]	; (b4190 <setup+0xd0>)
   b4130:	230c      	movs	r3, #12
   b4132:	215a      	movs	r1, #90	; 0x5a
   b4134:	f000 f98b 	bl	b444e <_ZN15Adafruit_MPR1215beginEhP7TwoWirehh>
   b4138:	b928      	cbnz	r0, b4146 <setup+0x86>
    Serial.println("MPR121 not found, check wiring?");
   b413a:	f001 fc89 	bl	b5a50 <_Z16_fetch_usbserialv>
   b413e:	4915      	ldr	r1, [pc, #84]	; (b4194 <setup+0xd4>)
   b4140:	f001 faa1 	bl	b5686 <_ZN5Print7printlnEPKc>
    while (1);
   b4144:	e7fe      	b.n	b4144 <setup+0x84>
  }
  Serial.println("MPR121 found!");
   b4146:	f001 fc83 	bl	b5a50 <_Z16_fetch_usbserialv>
   b414a:	4913      	ldr	r1, [pc, #76]	; (b4198 <setup+0xd8>)
      //strip.setPixelColor(i, 255, 204, 0); // Bright yellow
      strip.setPixelColor(i, 64, 51, 0); // Dim yellow
    } else { // The other LEDs will be dim yellow
      //strip3.setPixelColor(i, 64, 51, 0); // Dim yellow
      //strip.setPixelColor(i, 64, 51, 0); // Dim yellow
      strip.setPixelColor(i, 255, 204, 0); // Bright yellow
   b414c:	4d0e      	ldr	r5, [pc, #56]	; (b4188 <setup+0xc8>)
  Serial.println("MPR121 found!");
   b414e:	f001 fa9a 	bl	b5686 <_ZN5Print7printlnEPKc>
  for (int i = 0; i < NUMPIXELS; i++) {
   b4152:	2400      	movs	r4, #0
      strip.setPixelColor(i, 255, 204, 0); // Bright yellow
   b4154:	4626      	mov	r6, r4
    if (i % 4 == 0) {  
   b4156:	f014 0303 	ands.w	r3, r4, #3
      strip.setPixelColor(i, 64, 51, 0); // Dim yellow
   b415a:	bf08      	it	eq
   b415c:	9300      	streq	r3, [sp, #0]
   b415e:	b2a1      	uxth	r1, r4
   b4160:	bf07      	ittee	eq
   b4162:	2333      	moveq	r3, #51	; 0x33
   b4164:	2240      	moveq	r2, #64	; 0x40
      strip.setPixelColor(i, 255, 204, 0); // Bright yellow
   b4166:	9600      	strne	r6, [sp, #0]
   b4168:	23cc      	movne	r3, #204	; 0xcc
   b416a:	bf18      	it	ne
   b416c:	22ff      	movne	r2, #255	; 0xff
   b416e:	4628      	mov	r0, r5
  for (int i = 0; i < NUMPIXELS; i++) {
   b4170:	3401      	adds	r4, #1
      strip.setPixelColor(i, 255, 204, 0); // Bright yellow
   b4172:	f000 faae 	bl	b46d2 <_ZN16Adafruit_DotStar13setPixelColorEthhh>
  for (int i = 0; i < NUMPIXELS; i++) {
   b4176:	2c3b      	cmp	r4, #59	; 0x3b
   b4178:	d1ed      	bne.n	b4156 <setup+0x96>
    }
  }
   strip.show();
   b417a:	4803      	ldr	r0, [pc, #12]	; (b4188 <setup+0xc8>)
  // strip2.show();
  // strip3.show();
  
}
   b417c:	b002      	add	sp, #8
   b417e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   strip.show();
   b4182:	f000 bae1 	b.w	b4748 <_ZN16Adafruit_DotStar4showEv>
   b4186:	bf00      	nop
   b4188:	2003e6b0 	.word	0x2003e6b0
   b418c:	000b61a4 	.word	0x000b61a4
   b4190:	2003e63c 	.word	0x2003e63c
   b4194:	000b61d1 	.word	0x000b61d1
   b4198:	000b61f1 	.word	0x000b61f1

000b419c <loop>:
void loop() {
   b419c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // Get the currently touched pads
  currtouched = cap.touched();
   b41a0:	484f      	ldr	r0, [pc, #316]	; (b42e0 <loop+0x144>)
   b41a2:	f8df 9154 	ldr.w	r9, [pc, #340]	; b42f8 <loop+0x15c>
   b41a6:	4d4f      	ldr	r5, [pc, #316]	; (b42e4 <loop+0x148>)
   b41a8:	4e4f      	ldr	r6, [pc, #316]	; (b42e8 <loop+0x14c>)
          moving[i] = true;
          ledPositions[i] = 0; // Start animation at the first pixel
        }
      }
    } else { // Touchpads 6 to 11 for strip2
      if ((currtouched & _BV(i)) && !(lasttouched & _BV(i))) {
   b41aa:	4f50      	ldr	r7, [pc, #320]	; (b42ec <loop+0x150>)
        Serial.print(i);
        Serial.println(" touched");
   b41ac:	f8df 814c 	ldr.w	r8, [pc, #332]	; b42fc <loop+0x160>
        Serial.println(" touched ");
   b41b0:	f8df a14c 	ldr.w	sl, [pc, #332]	; b4300 <loop+0x164>
  currtouched = cap.touched();
   b41b4:	f000 f8f6 	bl	b43a4 <_ZN15Adafruit_MPR1217touchedEv>
   b41b8:	2400      	movs	r4, #0
   b41ba:	f8a9 0000 	strh.w	r0, [r9]
      if ((currtouched & _BV(i)) && !(lasttouched & _BV(i))) {
   b41be:	f8b9 3000 	ldrh.w	r3, [r9]
    if (i <= 5) { // Touchpads 0 to 5 for strip1
   b41c2:	2c05      	cmp	r4, #5
   b41c4:	fa23 f304 	lsr.w	r3, r3, r4
   b41c8:	d849      	bhi.n	b425e <loop+0xc2>
      if ((currtouched & _BV(i)) && !(lasttouched & _BV(i))) {
   b41ca:	07d8      	lsls	r0, r3, #31
   b41cc:	d513      	bpl.n	b41f6 <loop+0x5a>
   b41ce:	883b      	ldrh	r3, [r7, #0]
   b41d0:	40e3      	lsrs	r3, r4
   b41d2:	07d9      	lsls	r1, r3, #31
   b41d4:	d40f      	bmi.n	b41f6 <loop+0x5a>
        Serial.print(i);
   b41d6:	f001 fc3b 	bl	b5a50 <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b41da:	4621      	mov	r1, r4
   b41dc:	220a      	movs	r2, #10
   b41de:	f001 fa5c 	bl	b569a <_ZN5Print11printNumberEmh>
        Serial.println(" touched ");
   b41e2:	f001 fc35 	bl	b5a50 <_Z16_fetch_usbserialv>
   b41e6:	4651      	mov	r1, sl
        Serial.println(" touched");
   b41e8:	f001 fa4d 	bl	b5686 <_ZN5Print7printlnEPKc>

        if (!moving[i]) {
   b41ec:	782b      	ldrb	r3, [r5, #0]
   b41ee:	b913      	cbnz	r3, b41f6 <loop+0x5a>
          moving[i] = true;
   b41f0:	2201      	movs	r2, #1
   b41f2:	702a      	strb	r2, [r5, #0]
          ledPositions[i] = 0; // Start animation at the first pixel
   b41f4:	6033      	str	r3, [r6, #0]
  for (uint8_t i = 0; i < 12; i++) { // Iterate over all touchpads
   b41f6:	3401      	adds	r4, #1
   b41f8:	2c0c      	cmp	r4, #12
   b41fa:	f105 0501 	add.w	r5, r5, #1
   b41fe:	f106 0604 	add.w	r6, r6, #4
   b4202:	d1dc      	bne.n	b41be <loop+0x22>
   b4204:	f8df b0fc 	ldr.w	fp, [pc, #252]	; b4304 <loop+0x168>
   b4208:	4d39      	ldr	r5, [pc, #228]	; (b42f0 <loop+0x154>)
   b420a:	f8df 80fc 	ldr.w	r8, [pc, #252]	; b4308 <loop+0x16c>
        for (int j = ledPositions[i]; j < ledPositions[i] + 4 && j < NUMPIXELS; j++) {
          if (j == ledPositions[i]) {
            strip.setPixelColor(j, 255, 204, 0); // Set the current pixel to bright yellow
            //strip3.setPixelColor(j, 255, 204, 0); // Set the current pixel to bright yellow
          } else {
            strip.setPixelColor(j, 64, 51, 0); // Set following pixels to dim yellow
   b420e:	4f39      	ldr	r7, [pc, #228]	; (b42f4 <loop+0x158>)
  for (uint8_t i = 0; i < 12; i++) { // Iterate over all touchpads
   b4210:	f04f 0a06 	mov.w	sl, #6
   b4214:	2600      	movs	r6, #0
    if (moving[i]) {
   b4216:	f81b 3b01 	ldrb.w	r3, [fp], #1
   b421a:	2b00      	cmp	r3, #0
   b421c:	d04d      	beq.n	b42ba <loop+0x11e>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b421e:	f000 fe31 	bl	b4e84 <HAL_Timer_Get_Milli_Seconds>
      if (currentMillis - previousMillis[i] >= interval) {
   b4222:	f8d8 3000 	ldr.w	r3, [r8]
   b4226:	1ac3      	subs	r3, r0, r3
   b4228:	2b63      	cmp	r3, #99	; 0x63
   b422a:	d946      	bls.n	b42ba <loop+0x11e>
        if (ledPositions[i] > 0) {
   b422c:	682c      	ldr	r4, [r5, #0]
        previousMillis[i] = currentMillis;
   b422e:	f8c8 0000 	str.w	r0, [r8]
        if (ledPositions[i] > 0) {
   b4232:	2c00      	cmp	r4, #0
   b4234:	dd23      	ble.n	b427e <loop+0xe2>
          for (int j = ledPositions[i] - 4; j < ledPositions[i]; j++) {
   b4236:	3c04      	subs	r4, #4
   b4238:	682b      	ldr	r3, [r5, #0]
   b423a:	42a3      	cmp	r3, r4
   b423c:	dd1f      	ble.n	b427e <loop+0xe2>
            if (j >= 0) {
   b423e:	2c00      	cmp	r4, #0
   b4240:	db0b      	blt.n	b425a <loop+0xbe>
              if (j == ledPositions[i] - 1) {
   b4242:	3b01      	subs	r3, #1
   b4244:	42a3      	cmp	r3, r4
                strip.setPixelColor(j, 255, 204, 0); // Set current pixel to bright yellow
   b4246:	b2a1      	uxth	r1, r4
   b4248:	9600      	str	r6, [sp, #0]
   b424a:	bf07      	ittee	eq
   b424c:	23cc      	moveq	r3, #204	; 0xcc
   b424e:	22ff      	moveq	r2, #255	; 0xff
                strip.setPixelColor(j, 64, 51, 0); // Set the non-animated pixels to dim yellow
   b4250:	2333      	movne	r3, #51	; 0x33
   b4252:	2240      	movne	r2, #64	; 0x40
   b4254:	4638      	mov	r0, r7
   b4256:	f000 fa3c 	bl	b46d2 <_ZN16Adafruit_DotStar13setPixelColorEthhh>
          for (int j = ledPositions[i] - 4; j < ledPositions[i]; j++) {
   b425a:	3401      	adds	r4, #1
   b425c:	e7ec      	b.n	b4238 <loop+0x9c>
      if ((currtouched & _BV(i)) && !(lasttouched & _BV(i))) {
   b425e:	07da      	lsls	r2, r3, #31
   b4260:	d5c9      	bpl.n	b41f6 <loop+0x5a>
   b4262:	883b      	ldrh	r3, [r7, #0]
   b4264:	40e3      	lsrs	r3, r4
   b4266:	07db      	lsls	r3, r3, #31
   b4268:	d4c5      	bmi.n	b41f6 <loop+0x5a>
        Serial.print(i);
   b426a:	f001 fbf1 	bl	b5a50 <_Z16_fetch_usbserialv>
   b426e:	4621      	mov	r1, r4
   b4270:	220a      	movs	r2, #10
   b4272:	f001 fa12 	bl	b569a <_ZN5Print11printNumberEmh>
        Serial.println(" touched");
   b4276:	f001 fbeb 	bl	b5a50 <_Z16_fetch_usbserialv>
   b427a:	4641      	mov	r1, r8
   b427c:	e7b4      	b.n	b41e8 <loop+0x4c>
        for (int j = ledPositions[i]; j < ledPositions[i] + 4 && j < NUMPIXELS; j++) {
   b427e:	682c      	ldr	r4, [r5, #0]
   b4280:	682b      	ldr	r3, [r5, #0]
   b4282:	1cda      	adds	r2, r3, #3
   b4284:	42a2      	cmp	r2, r4
   b4286:	db0e      	blt.n	b42a6 <loop+0x10a>
   b4288:	2c3a      	cmp	r4, #58	; 0x3a
   b428a:	dc0c      	bgt.n	b42a6 <loop+0x10a>
          if (j == ledPositions[i]) {
   b428c:	42a3      	cmp	r3, r4
   b428e:	b2a1      	uxth	r1, r4
            strip.setPixelColor(j, 255, 204, 0); // Set the current pixel to bright yellow
   b4290:	9600      	str	r6, [sp, #0]
   b4292:	bf07      	ittee	eq
   b4294:	23cc      	moveq	r3, #204	; 0xcc
   b4296:	22ff      	moveq	r2, #255	; 0xff
            strip.setPixelColor(j, 64, 51, 0); // Set following pixels to dim yellow
   b4298:	2333      	movne	r3, #51	; 0x33
   b429a:	2240      	movne	r2, #64	; 0x40
   b429c:	4638      	mov	r0, r7
   b429e:	f000 fa18 	bl	b46d2 <_ZN16Adafruit_DotStar13setPixelColorEthhh>
        for (int j = ledPositions[i]; j < ledPositions[i] + 4 && j < NUMPIXELS; j++) {
   b42a2:	3401      	adds	r4, #1
   b42a4:	e7ec      	b.n	b4280 <loop+0xe4>
             //strip3.setPixelColor(j, 64, 51, 0); // Set following pixels to dim yellow
          }
        }
        strip.show();
   b42a6:	4638      	mov	r0, r7
   b42a8:	f000 fa4e 	bl	b4748 <_ZN16Adafruit_DotStar4showEv>
        //strip3.show();

        ledPositions[i] += 4; // Advance by 4 pixels
   b42ac:	682b      	ldr	r3, [r5, #0]
   b42ae:	3304      	adds	r3, #4

        // Stop animation if it reaches or exceeds the end of the strip
        if (ledPositions[i] >= NUMPIXELS) {
   b42b0:	2b3a      	cmp	r3, #58	; 0x3a
        ledPositions[i] += 4; // Advance by 4 pixels
   b42b2:	602b      	str	r3, [r5, #0]
          moving[i] = false; // Mark this animation as complete
   b42b4:	bfc8      	it	gt
   b42b6:	f80b 6c01 	strbgt.w	r6, [fp, #-1]
  for (uint8_t i = 6; i <= 11; i++) {
   b42ba:	f10a 0a01 	add.w	sl, sl, #1
   b42be:	f1ba 0f0c 	cmp.w	sl, #12
   b42c2:	f105 0504 	add.w	r5, r5, #4
   b42c6:	f108 0804 	add.w	r8, r8, #4
   b42ca:	d1a4      	bne.n	b4216 <loop+0x7a>
        }
      }
    }
  }
  // Save the current touch state for comparison in the next loop
  lasttouched = currtouched;
   b42cc:	f8b9 2000 	ldrh.w	r2, [r9]
   b42d0:	4b06      	ldr	r3, [pc, #24]	; (b42ec <loop+0x150>)

  delay(10); // Small delay for smooth execution
   b42d2:	200a      	movs	r0, #10
  lasttouched = currtouched;
   b42d4:	801a      	strh	r2, [r3, #0]
 }
   b42d6:	b003      	add	sp, #12
   b42d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  delay(10); // Small delay for smooth execution
   b42dc:	f001 ba38 	b.w	b5750 <delay>
   b42e0:	2003e63c 	.word	0x2003e63c
   b42e4:	2003e674 	.word	0x2003e674
   b42e8:	2003e644 	.word	0x2003e644
   b42ec:	2003e642 	.word	0x2003e642
   b42f0:	2003e65c 	.word	0x2003e65c
   b42f4:	2003e6b0 	.word	0x2003e6b0
   b42f8:	2003e640 	.word	0x2003e640
   b42fc:	000b6209 	.word	0x000b6209
   b4300:	000b61ff 	.word	0x000b61ff
   b4304:	2003e67a 	.word	0x2003e67a
   b4308:	2003e698 	.word	0x2003e698

000b430c <_GLOBAL__sub_I_SystemMode>:
 }
   b430c:	b507      	push	{r0, r1, r2, lr}
SYSTEM_THREAD(ENABLED);
   b430e:	2100      	movs	r1, #0
   b4310:	2001      	movs	r0, #1
   b4312:	f000 ff27 	bl	b5164 <system_thread_set_state>
              error_(SYSTEM_ERROR_NONE) {
   b4316:	4b0c      	ldr	r3, [pc, #48]	; (b4348 <_GLOBAL__sub_I_SystemMode+0x3c>)
   b4318:	2200      	movs	r2, #0
   b431a:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b431e:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b4322:	609a      	str	r2, [r3, #8]
        set_system_mode(mode);
   b4324:	2003      	movs	r0, #3
   b4326:	f000 ff0d 	bl	b5144 <set_system_mode>
Adafruit_DotStar strip(NUMPIXELS, DATAPIN2, CLOCKPIN2, DOTSTAR_BGR);
   b432a:	2306      	movs	r3, #6
   b432c:	9300      	str	r3, [sp, #0]
   b432e:	2204      	movs	r2, #4
   b4330:	2305      	movs	r3, #5
   b4332:	213b      	movs	r1, #59	; 0x3b
   b4334:	4805      	ldr	r0, [pc, #20]	; (b434c <_GLOBAL__sub_I_SystemMode+0x40>)
   b4336:	f000 f9b6 	bl	b46a6 <_ZN16Adafruit_DotStarC1Ethhh>
Adafruit_MPR121 cap = Adafruit_MPR121();
   b433a:	4805      	ldr	r0, [pc, #20]	; (b4350 <_GLOBAL__sub_I_SystemMode+0x44>)
 }
   b433c:	b003      	add	sp, #12
   b433e:	f85d eb04 	ldr.w	lr, [sp], #4
Adafruit_MPR121 cap = Adafruit_MPR121();
   b4342:	f000 b807 	b.w	b4354 <_ZN15Adafruit_MPR121C1Ev>
   b4346:	bf00      	nop
   b4348:	2003e630 	.word	0x2003e630
   b434c:	2003e6b0 	.word	0x2003e6b0
   b4350:	2003e63c 	.word	0x2003e63c

000b4354 <_ZN15Adafruit_MPR121C1Ev>:
//#define AUTOCONFIG // use autoconfig (Yes it works pretty well!)

/*!
 *  @brief      Default constructor
 */
Adafruit_MPR121::Adafruit_MPR121() {}
   b4354:	2200      	movs	r2, #0
   b4356:	6002      	str	r2, [r0, #0]
   b4358:	4770      	bx	lr

000b435a <_ZN15Adafruit_MPR12113readRegister8Eh>:
/*!
 *  @brief      Read the contents of an 8 bit device register.
 *  @param      reg the register address to read from
 *  @returns    the 8 bit value that was read.
 */
uint8_t Adafruit_MPR121::readRegister8(uint8_t reg) {
   b435a:	b500      	push	{lr}
   b435c:	460a      	mov	r2, r1
   b435e:	b089      	sub	sp, #36	; 0x24
  Adafruit_BusIO_Register thereg = Adafruit_BusIO_Register(i2c_dev, reg, 1);
   b4360:	2301      	movs	r3, #1
   b4362:	2100      	movs	r1, #0
   b4364:	e9cd 1300 	strd	r1, r3, [sp]
   b4368:	6801      	ldr	r1, [r0, #0]
   b436a:	a802      	add	r0, sp, #8
   b436c:	f000 faa0 	bl	b48b0 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>

  return (thereg.read());
   b4370:	a802      	add	r0, sp, #8
   b4372:	f000 fb58 	bl	b4a26 <_ZN23Adafruit_BusIO_Register4readEv>
}
   b4376:	b2c0      	uxtb	r0, r0
   b4378:	b009      	add	sp, #36	; 0x24
   b437a:	f85d fb04 	ldr.w	pc, [sp], #4

000b437e <_ZN15Adafruit_MPR12114readRegister16Eh>:
/*!
 *  @brief      Read the contents of a 16 bit device register.
 *  @param      reg the register address to read from
 *  @returns    the 16 bit value that was read.
 */
uint16_t Adafruit_MPR121::readRegister16(uint8_t reg) {
   b437e:	b500      	push	{lr}
   b4380:	460a      	mov	r2, r1
   b4382:	b089      	sub	sp, #36	; 0x24
  Adafruit_BusIO_Register thereg =
      Adafruit_BusIO_Register(i2c_dev, reg, 2, LSBFIRST);
   b4384:	2300      	movs	r3, #0
   b4386:	2101      	movs	r1, #1
   b4388:	e9cd 3100 	strd	r3, r1, [sp]
   b438c:	2302      	movs	r3, #2
   b438e:	6801      	ldr	r1, [r0, #0]
   b4390:	a802      	add	r0, sp, #8
   b4392:	f000 fa8d 	bl	b48b0 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>

  return (thereg.read());
   b4396:	a802      	add	r0, sp, #8
   b4398:	f000 fb45 	bl	b4a26 <_ZN23Adafruit_BusIO_Register4readEv>
}
   b439c:	b280      	uxth	r0, r0
   b439e:	b009      	add	sp, #36	; 0x24
   b43a0:	f85d fb04 	ldr.w	pc, [sp], #4

000b43a4 <_ZN15Adafruit_MPR1217touchedEv>:
uint16_t Adafruit_MPR121::touched(void) {
   b43a4:	b508      	push	{r3, lr}
  uint16_t t = readRegister16(MPR121_TOUCHSTATUS_L);
   b43a6:	2100      	movs	r1, #0
   b43a8:	f7ff ffe9 	bl	b437e <_ZN15Adafruit_MPR12114readRegister16Eh>
}
   b43ac:	f3c0 000b 	ubfx	r0, r0, #0, #12
   b43b0:	bd08      	pop	{r3, pc}

000b43b2 <_ZN15Adafruit_MPR12113writeRegisterEhh>:
/*!
    @brief  Writes 8-bits to the specified destination register
    @param  reg the register address to write to
    @param  value the value to write
*/
void Adafruit_MPR121::writeRegister(uint8_t reg, uint8_t value) {
   b43b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  // MPR121 must be put in Stop Mode to write to most registers
  bool stop_required = true;

  // first get the current set value of the MPR121_ECR register
  Adafruit_BusIO_Register ecr_reg =
      Adafruit_BusIO_Register(i2c_dev, MPR121_ECR, 1);
   b43b6:	f04f 0801 	mov.w	r8, #1
void Adafruit_MPR121::writeRegister(uint8_t reg, uint8_t value) {
   b43ba:	b08f      	sub	sp, #60	; 0x3c
      Adafruit_BusIO_Register(i2c_dev, MPR121_ECR, 1);
   b43bc:	2400      	movs	r4, #0
   b43be:	e9cd 4800 	strd	r4, r8, [sp]
void Adafruit_MPR121::writeRegister(uint8_t reg, uint8_t value) {
   b43c2:	460d      	mov	r5, r1
      Adafruit_BusIO_Register(i2c_dev, MPR121_ECR, 1);
   b43c4:	4643      	mov	r3, r8
   b43c6:	6801      	ldr	r1, [r0, #0]
void Adafruit_MPR121::writeRegister(uint8_t reg, uint8_t value) {
   b43c8:	4606      	mov	r6, r0
   b43ca:	4691      	mov	r9, r2
      Adafruit_BusIO_Register(i2c_dev, MPR121_ECR, 1);
   b43cc:	a802      	add	r0, sp, #8
   b43ce:	225e      	movs	r2, #94	; 0x5e
   b43d0:	f000 fa6e 	bl	b48b0 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>

  uint8_t ecr_backup = ecr_reg.read();
   b43d4:	a802      	add	r0, sp, #8
   b43d6:	f000 fb26 	bl	b4a26 <_ZN23Adafruit_BusIO_Register4readEv>
  if ((reg == MPR121_ECR) || ((0x73 <= reg) && (reg <= 0x7A))) {
   b43da:	2d5e      	cmp	r5, #94	; 0x5e
  uint8_t ecr_backup = ecr_reg.read();
   b43dc:	4607      	mov	r7, r0
  if ((reg == MPR121_ECR) || ((0x73 <= reg) && (reg <= 0x7A))) {
   b43de:	d009      	beq.n	b43f4 <_ZN15Adafruit_MPR12113writeRegisterEhh+0x42>
   b43e0:	f1a5 0373 	sub.w	r3, r5, #115	; 0x73
   b43e4:	2b07      	cmp	r3, #7
   b43e6:	d905      	bls.n	b43f4 <_ZN15Adafruit_MPR12113writeRegisterEhh+0x42>
    stop_required = false;
  }

  if (stop_required) {
    // clear this register to set stop mode
    ecr_reg.write(0x00);
   b43e8:	4622      	mov	r2, r4
   b43ea:	4621      	mov	r1, r4
   b43ec:	a802      	add	r0, sp, #8
   b43ee:	f000 faba 	bl	b4966 <_ZN23Adafruit_BusIO_Register5writeEmh>
  bool stop_required = true;
   b43f2:	4644      	mov	r4, r8
  }

  Adafruit_BusIO_Register the_reg = Adafruit_BusIO_Register(i2c_dev, reg, 1);
   b43f4:	f04f 0800 	mov.w	r8, #0
   b43f8:	2301      	movs	r3, #1
   b43fa:	6831      	ldr	r1, [r6, #0]
   b43fc:	462a      	mov	r2, r5
   b43fe:	e9cd 8300 	strd	r8, r3, [sp]
   b4402:	a808      	add	r0, sp, #32
   b4404:	f000 fa54 	bl	b48b0 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  the_reg.write(value);
   b4408:	4642      	mov	r2, r8
   b440a:	4649      	mov	r1, r9
   b440c:	a808      	add	r0, sp, #32
   b440e:	f000 faaa 	bl	b4966 <_ZN23Adafruit_BusIO_Register5writeEmh>

  if (stop_required) {
   b4412:	b124      	cbz	r4, b441e <_ZN15Adafruit_MPR12113writeRegisterEhh+0x6c>
    // write back the previous set ECR settings
    ecr_reg.write(ecr_backup);
   b4414:	4642      	mov	r2, r8
   b4416:	b2f9      	uxtb	r1, r7
   b4418:	a802      	add	r0, sp, #8
   b441a:	f000 faa4 	bl	b4966 <_ZN23Adafruit_BusIO_Register5writeEmh>
  }
}
   b441e:	b00f      	add	sp, #60	; 0x3c
   b4420:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b4424 <_ZN15Adafruit_MPR12113setThresholdsEhh>:
void Adafruit_MPR121::setThresholds(uint8_t touch, uint8_t release) {
   b4424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4426:	4605      	mov	r5, r0
   b4428:	460f      	mov	r7, r1
   b442a:	4616      	mov	r6, r2
   b442c:	2441      	movs	r4, #65	; 0x41
    writeRegister(MPR121_TOUCHTH_0 + 2 * i, touch);
   b442e:	4621      	mov	r1, r4
   b4430:	463a      	mov	r2, r7
   b4432:	4628      	mov	r0, r5
   b4434:	f7ff ffbd 	bl	b43b2 <_ZN15Adafruit_MPR12113writeRegisterEhh>
    writeRegister(MPR121_RELEASETH_0 + 2 * i, release);
   b4438:	1c61      	adds	r1, r4, #1
  for (uint8_t i = 0; i < 12; i++) {
   b443a:	3402      	adds	r4, #2
    writeRegister(MPR121_RELEASETH_0 + 2 * i, release);
   b443c:	4632      	mov	r2, r6
   b443e:	b2c9      	uxtb	r1, r1
   b4440:	4628      	mov	r0, r5
  for (uint8_t i = 0; i < 12; i++) {
   b4442:	b2e4      	uxtb	r4, r4
    writeRegister(MPR121_RELEASETH_0 + 2 * i, release);
   b4444:	f7ff ffb5 	bl	b43b2 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  for (uint8_t i = 0; i < 12; i++) {
   b4448:	2c59      	cmp	r4, #89	; 0x59
   b444a:	d1f0      	bne.n	b442e <_ZN15Adafruit_MPR12113setThresholdsEhh+0xa>
}
   b444c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b444e <_ZN15Adafruit_MPR1215beginEhP7TwoWirehh>:
                            uint8_t touchThreshold, uint8_t releaseThreshold) {
   b444e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4452:	4604      	mov	r4, r0
  if (i2c_dev) {
   b4454:	6800      	ldr	r0, [r0, #0]
                            uint8_t touchThreshold, uint8_t releaseThreshold) {
   b4456:	460f      	mov	r7, r1
   b4458:	4690      	mov	r8, r2
   b445a:	461e      	mov	r6, r3
  if (i2c_dev) {
   b445c:	b110      	cbz	r0, b4464 <_ZN15Adafruit_MPR1215beginEhP7TwoWirehh+0x16>
    delete i2c_dev;
   b445e:	2110      	movs	r1, #16
   b4460:	f7ff fe23 	bl	b40aa <_ZdlPvj>
  i2c_dev = new Adafruit_I2CDevice(i2caddr, theWire);
   b4464:	2010      	movs	r0, #16
   b4466:	f7ff fe1c 	bl	b40a2 <_Znwj>
   b446a:	4605      	mov	r5, r0
   b446c:	b118      	cbz	r0, b4476 <_ZN15Adafruit_MPR1215beginEhP7TwoWirehh+0x28>
   b446e:	4642      	mov	r2, r8
   b4470:	4639      	mov	r1, r7
   b4472:	f000 fc17 	bl	b4ca4 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   b4476:	6025      	str	r5, [r4, #0]
  if (!i2c_dev->begin()) {
   b4478:	4628      	mov	r0, r5
   b447a:	2101      	movs	r1, #1
   b447c:	f000 fc2e 	bl	b4cdc <_ZN18Adafruit_I2CDevice5beginEb>
   b4480:	4605      	mov	r5, r0
   b4482:	b918      	cbnz	r0, b448c <_ZN15Adafruit_MPR1215beginEhP7TwoWirehh+0x3e>
    return false;
   b4484:	2500      	movs	r5, #0
}
   b4486:	4628      	mov	r0, r5
   b4488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  writeRegister(MPR121_SOFTRESET, 0x63);
   b448c:	2263      	movs	r2, #99	; 0x63
   b448e:	2180      	movs	r1, #128	; 0x80
   b4490:	4620      	mov	r0, r4
   b4492:	f7ff ff8e 	bl	b43b2 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  delay(1);
   b4496:	2001      	movs	r0, #1
   b4498:	f001 f95a 	bl	b5750 <delay>
  writeRegister(MPR121_ECR, 0x0);
   b449c:	2200      	movs	r2, #0
   b449e:	215e      	movs	r1, #94	; 0x5e
   b44a0:	4620      	mov	r0, r4
   b44a2:	f7ff ff86 	bl	b43b2 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  uint8_t c = readRegister8(MPR121_CONFIG2);
   b44a6:	215d      	movs	r1, #93	; 0x5d
   b44a8:	4620      	mov	r0, r4
   b44aa:	f7ff ff56 	bl	b435a <_ZN15Adafruit_MPR12113readRegister8Eh>
  if (c != 0x24)
   b44ae:	2824      	cmp	r0, #36	; 0x24
   b44b0:	d1e8      	bne.n	b4484 <_ZN15Adafruit_MPR1215beginEhP7TwoWirehh+0x36>
  setThresholds(touchThreshold, releaseThreshold);
   b44b2:	f89d 2018 	ldrb.w	r2, [sp, #24]
   b44b6:	4631      	mov	r1, r6
   b44b8:	4620      	mov	r0, r4
   b44ba:	f7ff ffb3 	bl	b4424 <_ZN15Adafruit_MPR12113setThresholdsEhh>
  writeRegister(MPR121_MHDR, 0x01);
   b44be:	4620      	mov	r0, r4
   b44c0:	2201      	movs	r2, #1
   b44c2:	212b      	movs	r1, #43	; 0x2b
   b44c4:	f7ff ff75 	bl	b43b2 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_NHDR, 0x01);
   b44c8:	4620      	mov	r0, r4
   b44ca:	2201      	movs	r2, #1
   b44cc:	212c      	movs	r1, #44	; 0x2c
   b44ce:	f7ff ff70 	bl	b43b2 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_NCLR, 0x0E);
   b44d2:	4620      	mov	r0, r4
   b44d4:	220e      	movs	r2, #14
   b44d6:	212d      	movs	r1, #45	; 0x2d
   b44d8:	f7ff ff6b 	bl	b43b2 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_FDLR, 0x00);
   b44dc:	4620      	mov	r0, r4
   b44de:	2200      	movs	r2, #0
   b44e0:	212e      	movs	r1, #46	; 0x2e
   b44e2:	f7ff ff66 	bl	b43b2 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_MHDF, 0x01);
   b44e6:	4620      	mov	r0, r4
   b44e8:	2201      	movs	r2, #1
   b44ea:	212f      	movs	r1, #47	; 0x2f
   b44ec:	f7ff ff61 	bl	b43b2 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_NHDF, 0x05);
   b44f0:	4620      	mov	r0, r4
   b44f2:	2205      	movs	r2, #5
   b44f4:	2130      	movs	r1, #48	; 0x30
   b44f6:	f7ff ff5c 	bl	b43b2 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_NCLF, 0x01);
   b44fa:	4620      	mov	r0, r4
   b44fc:	2201      	movs	r2, #1
   b44fe:	2131      	movs	r1, #49	; 0x31
   b4500:	f7ff ff57 	bl	b43b2 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_FDLF, 0x00);
   b4504:	4620      	mov	r0, r4
   b4506:	2200      	movs	r2, #0
   b4508:	2132      	movs	r1, #50	; 0x32
   b450a:	f7ff ff52 	bl	b43b2 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_NHDT, 0x00);
   b450e:	4620      	mov	r0, r4
   b4510:	2200      	movs	r2, #0
   b4512:	2133      	movs	r1, #51	; 0x33
   b4514:	f7ff ff4d 	bl	b43b2 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_NCLT, 0x00);
   b4518:	4620      	mov	r0, r4
   b451a:	2200      	movs	r2, #0
   b451c:	2134      	movs	r1, #52	; 0x34
   b451e:	f7ff ff48 	bl	b43b2 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_FDLT, 0x00);
   b4522:	4620      	mov	r0, r4
   b4524:	2200      	movs	r2, #0
   b4526:	2135      	movs	r1, #53	; 0x35
   b4528:	f7ff ff43 	bl	b43b2 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_DEBOUNCE, 0);
   b452c:	4620      	mov	r0, r4
   b452e:	2200      	movs	r2, #0
   b4530:	215b      	movs	r1, #91	; 0x5b
   b4532:	f7ff ff3e 	bl	b43b2 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_CONFIG1, 0x10); // default, 16uA charge current
   b4536:	4620      	mov	r0, r4
   b4538:	2210      	movs	r2, #16
   b453a:	215c      	movs	r1, #92	; 0x5c
   b453c:	f7ff ff39 	bl	b43b2 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_CONFIG2, 0x20); // 0.5uS encoding, 1ms period
   b4540:	4620      	mov	r0, r4
   b4542:	2220      	movs	r2, #32
   b4544:	215d      	movs	r1, #93	; 0x5d
   b4546:	f7ff ff34 	bl	b43b2 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  writeRegister(MPR121_ECR, ECR_SETTING); // start with above ECR setting
   b454a:	228c      	movs	r2, #140	; 0x8c
   b454c:	215e      	movs	r1, #94	; 0x5e
   b454e:	4620      	mov	r0, r4
   b4550:	f7ff ff2f 	bl	b43b2 <_ZN15Adafruit_MPR12113writeRegisterEhh>
  return true;
   b4554:	e797      	b.n	b4486 <_ZN15Adafruit_MPR1215beginEhP7TwoWirehh+0x38>
	...

000b4558 <nrf_gpio_pin_clear>:
{
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   b4558:	281f      	cmp	r0, #31
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
        return NRF_P1;
   b455a:	bf86      	itte	hi
   b455c:	4a05      	ldrhi	r2, [pc, #20]	; (b4574 <nrf_gpio_pin_clear+0x1c>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   b455e:	f000 001f 	andhi.w	r0, r0, #31
        return NRF_P0;
   b4562:	f04f 42a0 	movls.w	r2, #1342177280	; 0x50000000

__STATIC_INLINE void nrf_gpio_pin_clear(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   b4566:	2301      	movs	r3, #1
   b4568:	fa03 f000 	lsl.w	r0, r3, r0
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   b456c:	f8c2 050c 	str.w	r0, [r2, #1292]	; 0x50c
}
   b4570:	4770      	bx	lr
   b4572:	bf00      	nop
   b4574:	50000300 	.word	0x50000300

000b4578 <_ZN16Adafruit_DotStar11sw_spi_initEv>:
#else
  spi_->end();
#endif
}

void Adafruit_DotStar::sw_spi_init(void) { // Init 'soft' (bitbang) SPI
   b4578:	b510      	push	{r4, lr}
   b457a:	4604      	mov	r4, r0
#if (PLATFORM_ID != 32)
  pinMode(dataPin , OUTPUT);
   b457c:	2101      	movs	r1, #1
   b457e:	7880      	ldrb	r0, [r0, #2]
   b4580:	f001 fcaa 	bl	b5ed8 <pinMode>
  pinMode(clockPin, OUTPUT);
   b4584:	78e0      	ldrb	r0, [r4, #3]
   b4586:	2101      	movs	r1, #1
   b4588:	f001 fca6 	bl	b5ed8 <pinMode>
  pinSet(dataPin , LOW);
   b458c:	490e      	ldr	r1, [pc, #56]	; (b45c8 <_ZN16Adafruit_DotStar11sw_spi_initEv+0x50>)
   b458e:	78a3      	ldrb	r3, [r4, #2]
   b4590:	680a      	ldr	r2, [r1, #0]
   b4592:	0118      	lsls	r0, r3, #4
   b4594:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   b4598:	5c10      	ldrb	r0, [r2, r0]
   b459a:	785b      	ldrb	r3, [r3, #1]
   b459c:	f003 031f 	and.w	r3, r3, #31
   b45a0:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   b45a4:	f7ff ffd8 	bl	b4558 <nrf_gpio_pin_clear>
  pinSet(clockPin, LOW);
   b45a8:	78e3      	ldrb	r3, [r4, #3]
   b45aa:	680a      	ldr	r2, [r1, #0]
   b45ac:	0118      	lsls	r0, r3, #4
   b45ae:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   b45b2:	5c10      	ldrb	r0, [r2, r0]
   b45b4:	785b      	ldrb	r3, [r3, #1]
   b45b6:	f003 031f 	and.w	r3, r3, #31
#endif
}
   b45ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pinSet(clockPin, LOW);
   b45be:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   b45c2:	f7ff bfc9 	b.w	b4558 <nrf_gpio_pin_clear>
   b45c6:	bf00      	nop
   b45c8:	2003e6cc 	.word	0x2003e6cc

000b45cc <_ZN16Adafruit_DotStar10sw_spi_outEh>:
  pinMode(dataPin , INPUT);
  pinMode(clockPin, INPUT);
#endif
}

void Adafruit_DotStar::sw_spi_out(uint8_t n) { // Bitbang SPI write
   b45cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if (PLATFORM_ID != 32)
  for (uint8_t i=8; i--; n <<= 1) {
    if (n & 0x80) pinSet(dataPin, HIGH);
   b45ce:	4f25      	ldr	r7, [pc, #148]	; (b4664 <_ZN16Adafruit_DotStar10sw_spi_outEh+0x98>)
        return NRF_P1;
   b45d0:	4d25      	ldr	r5, [pc, #148]	; (b4668 <_ZN16Adafruit_DotStar10sw_spi_outEh+0x9c>)
void Adafruit_DotStar::sw_spi_out(uint8_t n) { // Bitbang SPI write
   b45d2:	4606      	mov	r6, r0
   b45d4:	2409      	movs	r4, #9
  for (uint8_t i=8; i--; n <<= 1) {
   b45d6:	3c01      	subs	r4, #1
   b45d8:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   b45dc:	d041      	beq.n	b4662 <_ZN16Adafruit_DotStar10sw_spi_outEh+0x96>
    if (n & 0x80) pinSet(dataPin, HIGH);
   b45de:	78b3      	ldrb	r3, [r6, #2]
   b45e0:	683a      	ldr	r2, [r7, #0]
   b45e2:	0118      	lsls	r0, r3, #4
   b45e4:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   b45e8:	5c10      	ldrb	r0, [r2, r0]
   b45ea:	785b      	ldrb	r3, [r3, #1]
   b45ec:	f003 031f 	and.w	r3, r3, #31
   b45f0:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   b45f4:	060b      	lsls	r3, r1, #24
   b45f6:	d531      	bpl.n	b465c <_ZN16Adafruit_DotStar10sw_spi_outEh+0x90>
    if (*p_pin < P0_PIN_NUM)
   b45f8:	281f      	cmp	r0, #31
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   b45fa:	bfc6      	itte	gt
   b45fc:	f000 001f 	andgt.w	r0, r0, #31
        return NRF_P1;
   b4600:	462a      	movgt	r2, r5
        return NRF_P0;
   b4602:	f04f 42a0 	movle.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   b4606:	2301      	movs	r3, #1
   b4608:	fa03 f000 	lsl.w	r0, r3, r0
    p_reg->OUTSET = set_mask;
   b460c:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    else          pinSet(dataPin, LOW);
    pinSet(clockPin, HIGH);
   b4610:	683a      	ldr	r2, [r7, #0]
   b4612:	78f3      	ldrb	r3, [r6, #3]
   b4614:	0118      	lsls	r0, r3, #4
   b4616:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   b461a:	5c10      	ldrb	r0, [r2, r0]
   b461c:	785b      	ldrb	r3, [r3, #1]
   b461e:	f003 031f 	and.w	r3, r3, #31
   b4622:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
    if (*p_pin < P0_PIN_NUM)
   b4626:	2b1f      	cmp	r3, #31
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   b4628:	bfc6      	itte	gt
   b462a:	f003 031f 	andgt.w	r3, r3, #31
        return NRF_P1;
   b462e:	46ac      	movgt	ip, r5
        return NRF_P0;
   b4630:	f04f 4ca0 	movle.w	ip, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   b4634:	2001      	movs	r0, #1
   b4636:	fa00 f303 	lsl.w	r3, r0, r3
    p_reg->OUTSET = set_mask;
   b463a:	f8cc 3508 	str.w	r3, [ip, #1288]	; 0x508
    pinSet(clockPin, LOW);
   b463e:	78f3      	ldrb	r3, [r6, #3]
   b4640:	0118      	lsls	r0, r3, #4
   b4642:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   b4646:	5c10      	ldrb	r0, [r2, r0]
   b4648:	785b      	ldrb	r3, [r3, #1]
   b464a:	f003 031f 	and.w	r3, r3, #31
   b464e:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
  for (uint8_t i=8; i--; n <<= 1) {
   b4652:	0049      	lsls	r1, r1, #1
    pinSet(clockPin, LOW);
   b4654:	f7ff ff80 	bl	b4558 <nrf_gpio_pin_clear>
  for (uint8_t i=8; i--; n <<= 1) {
   b4658:	b2c9      	uxtb	r1, r1
   b465a:	e7bc      	b.n	b45d6 <_ZN16Adafruit_DotStar10sw_spi_outEh+0xa>
    else          pinSet(dataPin, LOW);
   b465c:	f7ff ff7c 	bl	b4558 <nrf_gpio_pin_clear>
   b4660:	e7d6      	b.n	b4610 <_ZN16Adafruit_DotStar10sw_spi_outEh+0x44>
  }
#endif
}
   b4662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b4664:	2003e6cc 	.word	0x2003e6cc
   b4668:	50000300 	.word	0x50000300

000b466c <_ZN16Adafruit_DotStar5clearEv>:

  //__enable_irq();
}

void Adafruit_DotStar::clear() { // Write 0s (off) to full pixel buffer
  memset(pixels, 0, numLEDs * 3);
   b466c:	8802      	ldrh	r2, [r0, #0]
   b466e:	6880      	ldr	r0, [r0, #8]
   b4670:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   b4674:	2100      	movs	r1, #0
   b4676:	f001 bcef 	b.w	b6058 <memset>

000b467a <_ZN16Adafruit_DotStar12updateLengthEt>:
void Adafruit_DotStar::updateLength(uint16_t n) {
   b467a:	b538      	push	{r3, r4, r5, lr}
   b467c:	4604      	mov	r4, r0
  if (pixels) free(pixels);
   b467e:	6880      	ldr	r0, [r0, #8]
void Adafruit_DotStar::updateLength(uint16_t n) {
   b4680:	460d      	mov	r5, r1
  if (pixels) free(pixels);
   b4682:	b108      	cbz	r0, b4688 <_ZN16Adafruit_DotStar12updateLengthEt+0xe>
   b4684:	f000 fe12 	bl	b52ac <free>
  uint16_t bytes = n * 3;
   b4688:	eb05 0045 	add.w	r0, r5, r5, lsl #1
  if ((pixels = (uint8_t *)malloc(bytes))) {
   b468c:	b280      	uxth	r0, r0
   b468e:	f000 fe05 	bl	b529c <malloc>
   b4692:	60a0      	str	r0, [r4, #8]
   b4694:	b128      	cbz	r0, b46a2 <_ZN16Adafruit_DotStar12updateLengthEt+0x28>
    numLEDs = n;
   b4696:	8025      	strh	r5, [r4, #0]
    clear();
   b4698:	4620      	mov	r0, r4
}
   b469a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    clear();
   b469e:	f7ff bfe5 	b.w	b466c <_ZN16Adafruit_DotStar5clearEv>
    numLEDs = 0;
   b46a2:	8020      	strh	r0, [r4, #0]
}
   b46a4:	bd38      	pop	{r3, r4, r5, pc}

000b46a6 <_ZN16Adafruit_DotStarC1Ethhh>:
Adafruit_DotStar::Adafruit_DotStar(uint16_t n, uint8_t data, uint8_t clock,
   b46a6:	b538      	push	{r3, r4, r5, lr}
   b46a8:	f89d 5010 	ldrb.w	r5, [sp, #16]
 rOffset(o & 3), gOffset((o >> 2) & 3), bOffset((o >> 4) & 3)
   b46ac:	70c3      	strb	r3, [r0, #3]
   b46ae:	2300      	movs	r3, #0
   b46b0:	7103      	strb	r3, [r0, #4]
   b46b2:	6083      	str	r3, [r0, #8]
   b46b4:	f005 0303 	and.w	r3, r5, #3
   b46b8:	7303      	strb	r3, [r0, #12]
   b46ba:	f3c5 0381 	ubfx	r3, r5, #2, #2
   b46be:	f3c5 1501 	ubfx	r5, r5, #4, #2
Adafruit_DotStar::Adafruit_DotStar(uint16_t n, uint8_t data, uint8_t clock,
   b46c2:	4604      	mov	r4, r0
 rOffset(o & 3), gOffset((o >> 2) & 3), bOffset((o >> 4) & 3)
   b46c4:	7082      	strb	r2, [r0, #2]
   b46c6:	7343      	strb	r3, [r0, #13]
   b46c8:	7385      	strb	r5, [r0, #14]
  updateLength(n);
   b46ca:	f7ff ffd6 	bl	b467a <_ZN16Adafruit_DotStar12updateLengthEt>
}
   b46ce:	4620      	mov	r0, r4
   b46d0:	bd38      	pop	{r3, r4, r5, pc}

000b46d2 <_ZN16Adafruit_DotStar13setPixelColorEthhh>:
}

// Set pixel color, separate R,G,B values (0-255 ea.)
void Adafruit_DotStar::setPixelColor(
 uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
   b46d2:	b510      	push	{r4, lr}
  if (n < numLEDs) {
   b46d4:	8804      	ldrh	r4, [r0, #0]
   b46d6:	428c      	cmp	r4, r1
   b46d8:	d90b      	bls.n	b46f2 <_ZN16Adafruit_DotStar13setPixelColorEthhh+0x20>
    uint8_t *p = &pixels[n * 3];
   b46da:	6884      	ldr	r4, [r0, #8]
   b46dc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   b46e0:	4421      	add	r1, r4
    p[rOffset] = r;
   b46e2:	7b04      	ldrb	r4, [r0, #12]
   b46e4:	550a      	strb	r2, [r1, r4]
    p[gOffset] = g;
   b46e6:	7b42      	ldrb	r2, [r0, #13]
   b46e8:	548b      	strb	r3, [r1, r2]
    p[bOffset] = b;
   b46ea:	7b83      	ldrb	r3, [r0, #14]
   b46ec:	f89d 2008 	ldrb.w	r2, [sp, #8]
   b46f0:	54ca      	strb	r2, [r1, r3]
  }
}
   b46f2:	bd10      	pop	{r4, pc}

000b46f4 <_ZN16Adafruit_DotStar13setBrightnessEh>:
  // optimizes the actual scaling math later, allowing a fast 8x8-bit
  // multiply and taking the MSB.  'brightness' is a uint8_t, adding 1
  // here may (intentionally) roll over...so 0 = max brightness (color
  // values are interpreted literally; no scaling), 1 = min brightness
  // (off), 255 = just below max brightness.
  brightness = b + 1;
   b46f4:	3101      	adds	r1, #1
   b46f6:	7101      	strb	r1, [r0, #4]
}
   b46f8:	4770      	bx	lr
	...

000b46fc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b46fc:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b46fe:	4c0b      	ldr	r4, [pc, #44]	; (b472c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b4700:	7821      	ldrb	r1, [r4, #0]
   b4702:	f3bf 8f5b 	dmb	ish
   b4706:	f011 0101 	ands.w	r1, r1, #1
   b470a:	d10b      	bne.n	b4724 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b470c:	4620      	mov	r0, r4
   b470e:	9101      	str	r1, [sp, #4]
   b4710:	f7ff fccd 	bl	b40ae <__cxa_guard_acquire>
   b4714:	9901      	ldr	r1, [sp, #4]
   b4716:	b128      	cbz	r0, b4724 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b4718:	4805      	ldr	r0, [pc, #20]	; (b4730 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b471a:	f000 fe23 	bl	b5364 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b471e:	4620      	mov	r0, r4
   b4720:	f7ff fcca 	bl	b40b8 <__cxa_guard_release>
        return instance;
    }
   b4724:	4802      	ldr	r0, [pc, #8]	; (b4730 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b4726:	b002      	add	sp, #8
   b4728:	bd10      	pop	{r4, pc}
   b472a:	bf00      	nop
   b472c:	2003e6c0 	.word	0x2003e6c0
   b4730:	2003e6c4 	.word	0x2003e6c4

000b4734 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>:
        return instance().setClockSpeed(value, scale);
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
   b4734:	b507      	push	{r0, r1, r2, lr}
   b4736:	9001      	str	r0, [sp, #4]
        return instance().transfer(data);
   b4738:	f7ff ffe0 	bl	b46fc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b473c:	9901      	ldr	r1, [sp, #4]
    }
   b473e:	b003      	add	sp, #12
   b4740:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().transfer(data);
   b4744:	f000 bf34 	b.w	b55b0 <_ZN8SPIClass8transferEh>

000b4748 <_ZN16Adafruit_DotStar4showEv>:
void Adafruit_DotStar::show(void) {
   b4748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!pixels) return;
   b474c:	6884      	ldr	r4, [r0, #8]
void Adafruit_DotStar::show(void) {
   b474e:	4607      	mov	r7, r0
  if (!pixels) return;
   b4750:	2c00      	cmp	r4, #0
   b4752:	f000 8085 	beq.w	b4860 <_ZN16Adafruit_DotStar4showEv+0x118>
  if (dataPin == USE_HW_SPI) {
   b4756:	7883      	ldrb	r3, [r0, #2]
  uint16_t n   = numLEDs;              // Counter
   b4758:	8806      	ldrh	r6, [r0, #0]
  uint16_t b16 = (uint16_t)brightness; // Type-convert for fixed-point math
   b475a:	f890 8004 	ldrb.w	r8, [r0, #4]
  if (dataPin == USE_HW_SPI) {
   b475e:	2bff      	cmp	r3, #255	; 0xff
   b4760:	d141      	bne.n	b47e6 <_ZN16Adafruit_DotStar4showEv+0x9e>
      spi_out(0);                        // Start-frame marker
   b4762:	2000      	movs	r0, #0
   b4764:	f7ff ffe6 	bl	b4734 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
   b4768:	2000      	movs	r0, #0
   b476a:	f7ff ffe3 	bl	b4734 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
   b476e:	2000      	movs	r0, #0
   b4770:	f7ff ffe0 	bl	b4734 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
   b4774:	2000      	movs	r0, #0
   b4776:	f7ff ffdd 	bl	b4734 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
    if (brightness) {                    // Scale pixel brightness on output
   b477a:	793b      	ldrb	r3, [r7, #4]
   b477c:	b1eb      	cbz	r3, b47ba <_ZN16Adafruit_DotStar4showEv+0x72>
        spi_out(0xFF);                   //  Pixel start
   b477e:	20ff      	movs	r0, #255	; 0xff
   b4780:	f7ff ffd8 	bl	b4734 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
        for (i = 0; i < 3; i++) {
   b4784:	1ce5      	adds	r5, r4, #3
          spi_out((*ptr++ * b16) >> 8);  // Scale, write RGB
   b4786:	f814 0b01 	ldrb.w	r0, [r4], #1
   b478a:	fb10 f008 	smulbb	r0, r0, r8
   b478e:	0a00      	lsrs	r0, r0, #8
   b4790:	f7ff ffd0 	bl	b4734 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
        for (i = 0; i < 3; i++) {
   b4794:	42ac      	cmp	r4, r5
   b4796:	d1f6      	bne.n	b4786 <_ZN16Adafruit_DotStar4showEv+0x3e>
      } while (--n);
   b4798:	3e01      	subs	r6, #1
   b479a:	b2b6      	uxth	r6, r6
   b479c:	2e00      	cmp	r6, #0
   b479e:	d1ee      	bne.n	b477e <_ZN16Adafruit_DotStar4showEv+0x36>
        spi_out(0xFF);                   //  Pixel start
   b47a0:	2400      	movs	r4, #0
    for (i = 0; i < ((numLEDs + 15) / 16); i++) {
   b47a2:	883a      	ldrh	r2, [r7, #0]
   b47a4:	b2e3      	uxtb	r3, r4
   b47a6:	320f      	adds	r2, #15
   b47a8:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
   b47ac:	f104 0401 	add.w	r4, r4, #1
   b47b0:	da56      	bge.n	b4860 <_ZN16Adafruit_DotStar4showEv+0x118>
      spi_out(0xFF);
   b47b2:	20ff      	movs	r0, #255	; 0xff
   b47b4:	f7ff ffbe 	bl	b4734 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
    for (i = 0; i < ((numLEDs + 15) / 16); i++) {
   b47b8:	e7f3      	b.n	b47a2 <_ZN16Adafruit_DotStar4showEv+0x5a>
   b47ba:	3403      	adds	r4, #3
        spi_out(0xFF);                   //  Pixel start
   b47bc:	20ff      	movs	r0, #255	; 0xff
   b47be:	f7ff ffb9 	bl	b4734 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
          spi_out(*ptr++);               // Write R,G,B
   b47c2:	f814 0c03 	ldrb.w	r0, [r4, #-3]
   b47c6:	f7ff ffb5 	bl	b4734 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
      } while (--n);
   b47ca:	3e01      	subs	r6, #1
          spi_out(*ptr++);               // Write R,G,B
   b47cc:	f814 0c02 	ldrb.w	r0, [r4, #-2]
   b47d0:	f7ff ffb0 	bl	b4734 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
      } while (--n);
   b47d4:	b2b6      	uxth	r6, r6
          spi_out(*ptr++);               // Write R,G,B
   b47d6:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   b47da:	f7ff ffab 	bl	b4734 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
      } while (--n);
   b47de:	3403      	adds	r4, #3
   b47e0:	2e00      	cmp	r6, #0
   b47e2:	d1eb      	bne.n	b47bc <_ZN16Adafruit_DotStar4showEv+0x74>
   b47e4:	e7dc      	b.n	b47a0 <_ZN16Adafruit_DotStar4showEv+0x58>
   b47e6:	2504      	movs	r5, #4
      sw_spi_out(0);                     // Start-frame marker
   b47e8:	2100      	movs	r1, #0
   b47ea:	4638      	mov	r0, r7
    for (i = 0; i < 4; i++) {
   b47ec:	3d01      	subs	r5, #1
      sw_spi_out(0);                     // Start-frame marker
   b47ee:	f7ff feed 	bl	b45cc <_ZN16Adafruit_DotStar10sw_spi_outEh>
    for (i = 0; i < 4; i++) {
   b47f2:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b47f6:	d1f7      	bne.n	b47e8 <_ZN16Adafruit_DotStar4showEv+0xa0>
    if (brightness) {                    // Scale pixel brightness on output
   b47f8:	793b      	ldrb	r3, [r7, #4]
   b47fa:	b303      	cbz	r3, b483e <_ZN16Adafruit_DotStar4showEv+0xf6>
        sw_spi_out(0xFF);                //  Pixel start
   b47fc:	21ff      	movs	r1, #255	; 0xff
   b47fe:	4638      	mov	r0, r7
   b4800:	f7ff fee4 	bl	b45cc <_ZN16Adafruit_DotStar10sw_spi_outEh>
        for (i = 0; i < 3; i++) {
   b4804:	1ce5      	adds	r5, r4, #3
          sw_spi_out((*ptr++ * b16) >> 8); // Scale, write
   b4806:	f814 1b01 	ldrb.w	r1, [r4], #1
   b480a:	fb11 f108 	smulbb	r1, r1, r8
   b480e:	0a09      	lsrs	r1, r1, #8
   b4810:	4638      	mov	r0, r7
   b4812:	f7ff fedb 	bl	b45cc <_ZN16Adafruit_DotStar10sw_spi_outEh>
        for (i = 0; i < 3; i++) {
   b4816:	42ac      	cmp	r4, r5
   b4818:	d1f5      	bne.n	b4806 <_ZN16Adafruit_DotStar4showEv+0xbe>
      } while (--n);
   b481a:	3e01      	subs	r6, #1
   b481c:	b2b6      	uxth	r6, r6
   b481e:	2e00      	cmp	r6, #0
   b4820:	d1ec      	bne.n	b47fc <_ZN16Adafruit_DotStar4showEv+0xb4>
        sw_spi_out(0xFF);                //  Pixel start
   b4822:	2400      	movs	r4, #0
    for (i = 0; i < ((numLEDs + 15) / 16); i++) {
   b4824:	883a      	ldrh	r2, [r7, #0]
   b4826:	b2e3      	uxtb	r3, r4
   b4828:	320f      	adds	r2, #15
   b482a:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
   b482e:	f104 0401 	add.w	r4, r4, #1
   b4832:	da15      	bge.n	b4860 <_ZN16Adafruit_DotStar4showEv+0x118>
      sw_spi_out(0xFF);
   b4834:	21ff      	movs	r1, #255	; 0xff
   b4836:	4638      	mov	r0, r7
   b4838:	f7ff fec8 	bl	b45cc <_ZN16Adafruit_DotStar10sw_spi_outEh>
    for (i = 0; i < ((numLEDs + 15) / 16); i++) {
   b483c:	e7f2      	b.n	b4824 <_ZN16Adafruit_DotStar4showEv+0xdc>
        sw_spi_out(0xFF);                //  Pixel start
   b483e:	21ff      	movs	r1, #255	; 0xff
   b4840:	4638      	mov	r0, r7
   b4842:	f7ff fec3 	bl	b45cc <_ZN16Adafruit_DotStar10sw_spi_outEh>
        for (i = 0; i < 3; i++) {
   b4846:	1ce5      	adds	r5, r4, #3
          sw_spi_out(*ptr++);            // R,G,B
   b4848:	f814 1b01 	ldrb.w	r1, [r4], #1
   b484c:	4638      	mov	r0, r7
   b484e:	f7ff febd 	bl	b45cc <_ZN16Adafruit_DotStar10sw_spi_outEh>
        for (i = 0; i < 3; i++) {
   b4852:	42ac      	cmp	r4, r5
   b4854:	d1f8      	bne.n	b4848 <_ZN16Adafruit_DotStar4showEv+0x100>
      } while (--n);
   b4856:	3e01      	subs	r6, #1
   b4858:	b2b6      	uxth	r6, r6
   b485a:	2e00      	cmp	r6, #0
   b485c:	d1ef      	bne.n	b483e <_ZN16Adafruit_DotStar4showEv+0xf6>
   b485e:	e7e0      	b.n	b4822 <_ZN16Adafruit_DotStar4showEv+0xda>
}
   b4860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b4864 <_ZN16Adafruit_DotStar11hw_spi_initEv>:
void Adafruit_DotStar::hw_spi_init(void) { // Initialize hardware SPI
   b4864:	b508      	push	{r3, lr}
        instance().begin();
   b4866:	f7ff ff49 	bl	b46fc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b486a:	f000 fd85 	bl	b5378 <_ZN8SPIClass5beginEv>
        instance().setClockDivider(divider);
   b486e:	f7ff ff45 	bl	b46fc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4872:	2108      	movs	r1, #8
   b4874:	f000 fe76 	bl	b5564 <_ZN8SPIClass15setClockDividerEh>
        instance().setBitOrder(order);
   b4878:	f7ff ff40 	bl	b46fc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b487c:	2101      	movs	r1, #1
   b487e:	f000 fd8f 	bl	b53a0 <_ZN8SPIClass11setBitOrderEh>
        instance().setDataMode(mode);
   b4882:	f7ff ff3b 	bl	b46fc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
}
   b4886:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b488a:	2100      	movs	r1, #0
   b488c:	f000 bd9c 	b.w	b53c8 <_ZN8SPIClass11setDataModeEh>

000b4890 <_ZN16Adafruit_DotStar5beginEv>:
  if (dataPin == USE_HW_SPI) hw_spi_init();
   b4890:	7883      	ldrb	r3, [r0, #2]
   b4892:	2bff      	cmp	r3, #255	; 0xff
   b4894:	d101      	bne.n	b489a <_ZN16Adafruit_DotStar5beginEv+0xa>
   b4896:	f7ff bfe5 	b.w	b4864 <_ZN16Adafruit_DotStar11hw_spi_initEv>
  else                       sw_spi_init();
   b489a:	f7ff be6d 	b.w	b4578 <_ZN16Adafruit_DotStar11sw_spi_initEv>
	...

000b48a0 <_GLOBAL__sub_I_PIN_MAP2>:
    uint32_t color = ColorHSV(hue, saturation, brightness);
    if (gammify)
      color = gamma32(color);
    setPixelColor(i, color);
  }
}
   b48a0:	b508      	push	{r3, lr}
  NRF5x_Pin_Info* PIN_MAP2 = hal_pin_map();
   b48a2:	f000 fabf 	bl	b4e24 <hal_pin_map>
   b48a6:	4b01      	ldr	r3, [pc, #4]	; (b48ac <_GLOBAL__sub_I_PIN_MAP2+0xc>)
   b48a8:	6018      	str	r0, [r3, #0]
}
   b48aa:	bd08      	pop	{r3, pc}
   b48ac:	2003e6cc 	.word	0x2003e6cc

000b48b0 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>:
 *    @param  byteorder The byte order of the register (used when width is > 1),
 * defaults to LSBFIRST
 *    @param  address_width The width of the register address itself, defaults
 * to 1 byte
 */
Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice *i2cdevice,
   b48b0:	b530      	push	{r4, r5, lr}
                                                 uint16_t reg_addr,
                                                 uint8_t width,
                                                 uint8_t byteorder,
                                                 uint8_t address_width) {
   b48b2:	2500      	movs	r5, #0
  _i2cdevice = i2cdevice;
  _spidevice = nullptr;
   b48b4:	e9c0 1500 	strd	r1, r5, [r0]
  _addrwidth = address_width;
  _address = reg_addr;
   b48b8:	8142      	strh	r2, [r0, #10]
  _addrwidth = address_width;
   b48ba:	f89d 1010 	ldrb.w	r1, [sp, #16]
  _byteorder = byteorder;
   b48be:	f89d 200c 	ldrb.w	r2, [sp, #12]
                                                 uint8_t address_width) {
   b48c2:	6145      	str	r5, [r0, #20]
  _addrwidth = address_width;
   b48c4:	7341      	strb	r1, [r0, #13]
  _byteorder = byteorder;
   b48c6:	7382      	strb	r2, [r0, #14]
  _width = width;
   b48c8:	7303      	strb	r3, [r0, #12]
}
   b48ca:	bd30      	pop	{r4, r5, pc}

000b48cc <_ZN23Adafruit_BusIO_Register5writeEPhh>:
 *    @param  buffer Pointer to data to write
 *    @param  len Number of bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   b48cc:	b5f0      	push	{r4, r5, r6, r7, lr}

  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
   b48ce:	8945      	ldrh	r5, [r0, #10]
                           (uint8_t)(_address >> 8)};
   b48d0:	7a84      	ldrb	r4, [r0, #10]
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   b48d2:	b085      	sub	sp, #20
   b48d4:	4603      	mov	r3, r0

  if (_i2cdevice) {
   b48d6:	6800      	ldr	r0, [r0, #0]
                           (uint8_t)(_address >> 8)};
   b48d8:	f88d 400c 	strb.w	r4, [sp, #12]
   b48dc:	0a2d      	lsrs	r5, r5, #8
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   b48de:	460e      	mov	r6, r1
   b48e0:	4617      	mov	r7, r2
                           (uint8_t)(_address >> 8)};
   b48e2:	f88d 500d 	strb.w	r5, [sp, #13]
  if (_i2cdevice) {
   b48e6:	b140      	cbz	r0, b48fa <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2e>
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
   b48e8:	7b5b      	ldrb	r3, [r3, #13]
   b48ea:	9301      	str	r3, [sp, #4]
   b48ec:	ab03      	add	r3, sp, #12
   b48ee:	9300      	str	r3, [sp, #0]
   b48f0:	2301      	movs	r3, #1
   b48f2:	f000 fa02 	bl	b4cfa <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
      addrbuffer[0] |= 0x40;
    }
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
  }
  return false;
}
   b48f6:	b005      	add	sp, #20
   b48f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (_spidevice) {
   b48fa:	6858      	ldr	r0, [r3, #4]
   b48fc:	2800      	cmp	r0, #0
   b48fe:	d0fa      	beq.n	b48f6 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2a>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   b4900:	f893 e008 	ldrb.w	lr, [r3, #8]
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
   b4904:	f893 c00d 	ldrb.w	ip, [r3, #13]
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   b4908:	f1be 0f03 	cmp.w	lr, #3
   b490c:	d10c      	bne.n	b4928 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x5c>
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   b490e:	f10c 0301 	add.w	r3, ip, #1
          (uint8_t)(_address >> 8) & ~0x01; // set bottom bit low to write
   b4912:	f025 0501 	bic.w	r5, r5, #1
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   b4916:	9300      	str	r3, [sp, #0]
      addrbuffer[0] =
   b4918:	f88d 500c 	strb.w	r5, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
   b491c:	f88d 400d 	strb.w	r4, [sp, #13]
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   b4920:	ab03      	add	r3, sp, #12
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
   b4922:	f000 f979 	bl	b4c18 <_ZN18Adafruit_SPIDevice5writeEPKhjS1_j>
   b4926:	e7e6      	b.n	b48f6 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2a>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   b4928:	f1be 0f00 	cmp.w	lr, #0
   b492c:	d109      	bne.n	b4942 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x76>
      addrbuffer[0] &= ~0x80;
   b492e:	f004 047f 	and.w	r4, r4, #127	; 0x7f
      addrbuffer[0] |= 0x80;
   b4932:	f88d 400c 	strb.w	r4, [sp, #12]
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
   b4936:	f8cd c000 	str.w	ip, [sp]
   b493a:	ab03      	add	r3, sp, #12
   b493c:	463a      	mov	r2, r7
   b493e:	4631      	mov	r1, r6
   b4940:	e7ef      	b.n	b4922 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x56>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   b4942:	f1be 0f02 	cmp.w	lr, #2
   b4946:	d102      	bne.n	b494e <_ZN23Adafruit_BusIO_Register5writeEPhh+0x82>
      addrbuffer[0] |= 0x80;
   b4948:	f064 047f 	orn	r4, r4, #127	; 0x7f
   b494c:	e7f1      	b.n	b4932 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x66>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   b494e:	f1be 0f01 	cmp.w	lr, #1
      addrbuffer[0] &= ~0x80;
   b4952:	bf01      	itttt	eq
   b4954:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
   b4958:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
      addrbuffer[0] |= 0x40;
   b495c:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
   b4960:	f88d 300c 	strbeq.w	r3, [sp, #12]
   b4964:	e7e7      	b.n	b4936 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x6a>

000b4966 <_ZN23Adafruit_BusIO_Register5writeEmh>:
 *    @param  value Data to write
 *    @param  numbytes How many bytes from 'value' to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint32_t value, uint8_t numbytes) {
   b4966:	b4f0      	push	{r4, r5, r6, r7}
   b4968:	460b      	mov	r3, r1
  if (numbytes == 0) {
   b496a:	b902      	cbnz	r2, b496e <_ZN23Adafruit_BusIO_Register5writeEmh+0x8>
    numbytes = _width;
   b496c:	7b02      	ldrb	r2, [r0, #12]
  }
  if (numbytes > 4) {
   b496e:	2a04      	cmp	r2, #4
   b4970:	d814      	bhi.n	b499c <_ZN23Adafruit_BusIO_Register5writeEmh+0x36>
    return false;
  }

  // store a copy
  _cached = value;
   b4972:	f100 050f 	add.w	r5, r0, #15
   b4976:	6143      	str	r3, [r0, #20]

  for (int i = 0; i < numbytes; i++) {
   b4978:	1884      	adds	r4, r0, r2
   b497a:	4629      	mov	r1, r5
   b497c:	4284      	cmp	r4, r0
   b497e:	d009      	beq.n	b4994 <_ZN23Adafruit_BusIO_Register5writeEmh+0x2e>
    if (_byteorder == LSBFIRST) {
   b4980:	7b87      	ldrb	r7, [r0, #14]
      _buffer[i] = value & 0xFF;
   b4982:	b2de      	uxtb	r6, r3
    if (_byteorder == LSBFIRST) {
   b4984:	b927      	cbnz	r7, b4990 <_ZN23Adafruit_BusIO_Register5writeEmh+0x2a>
      _buffer[i] = value & 0xFF;
   b4986:	702e      	strb	r6, [r5, #0]
    } else {
      _buffer[numbytes - i - 1] = value & 0xFF;
    }
    value >>= 8;
   b4988:	0a1b      	lsrs	r3, r3, #8
  for (int i = 0; i < numbytes; i++) {
   b498a:	3501      	adds	r5, #1
   b498c:	3c01      	subs	r4, #1
   b498e:	e7f5      	b.n	b497c <_ZN23Adafruit_BusIO_Register5writeEmh+0x16>
      _buffer[numbytes - i - 1] = value & 0xFF;
   b4990:	73a6      	strb	r6, [r4, #14]
   b4992:	e7f9      	b.n	b4988 <_ZN23Adafruit_BusIO_Register5writeEmh+0x22>
  }
  return write(_buffer, numbytes);
   b4994:	4620      	mov	r0, r4
}
   b4996:	bcf0      	pop	{r4, r5, r6, r7}
  return write(_buffer, numbytes);
   b4998:	f7ff bf98 	b.w	b48cc <_ZN23Adafruit_BusIO_Register5writeEPhh>
}
   b499c:	2000      	movs	r0, #0
   b499e:	bcf0      	pop	{r4, r5, r6, r7}
   b49a0:	4770      	bx	lr

000b49a2 <_ZN23Adafruit_BusIO_Register4readEPhh>:
 *    @param  buffer Pointer to data to read into
 *    @param  len Number of bytes to read
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   b49a2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
   b49a4:	8946      	ldrh	r6, [r0, #10]
                           (uint8_t)(_address >> 8)};
   b49a6:	7a85      	ldrb	r5, [r0, #10]
   b49a8:	f88d 500c 	strb.w	r5, [sp, #12]
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   b49ac:	4604      	mov	r4, r0

  if (_i2cdevice) {
   b49ae:	6800      	ldr	r0, [r0, #0]
                           (uint8_t)(_address >> 8)};
   b49b0:	0a36      	lsrs	r6, r6, #8
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   b49b2:	460b      	mov	r3, r1
                           (uint8_t)(_address >> 8)};
   b49b4:	f88d 600d 	strb.w	r6, [sp, #13]
  if (_i2cdevice) {
   b49b8:	b140      	cbz	r0, b49cc <_ZN23Adafruit_BusIO_Register4readEPhh+0x2a>
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   b49ba:	2100      	movs	r1, #0
   b49bc:	e9cd 2100 	strd	r2, r1, [sp]
   b49c0:	a903      	add	r1, sp, #12
   b49c2:	7b62      	ldrb	r2, [r4, #13]
   b49c4:	f000 fa07 	bl	b4dd6 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
      addrbuffer[0] |= 0x80 | 0x40;
    }
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
  }
  return false;
}
   b49c8:	b004      	add	sp, #16
   b49ca:	bd70      	pop	{r4, r5, r6, pc}
  if (_spidevice) {
   b49cc:	6860      	ldr	r0, [r4, #4]
   b49ce:	2800      	cmp	r0, #0
   b49d0:	d0fa      	beq.n	b49c8 <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   b49d2:	7a21      	ldrb	r1, [r4, #8]
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   b49d4:	7b64      	ldrb	r4, [r4, #13]
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   b49d6:	2903      	cmp	r1, #3
   b49d8:	d10d      	bne.n	b49f6 <_ZN23Adafruit_BusIO_Register4readEPhh+0x54>
          (uint8_t)(_address >> 8) | 0x01; // set bottom bit high to read
   b49da:	f046 0601 	orr.w	r6, r6, #1
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
   b49de:	21ff      	movs	r1, #255	; 0xff
   b49e0:	e9cd 2100 	strd	r2, r1, [sp]
      addrbuffer[0] =
   b49e4:	f88d 600c 	strb.w	r6, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
   b49e8:	f88d 500d 	strb.w	r5, [sp, #13]
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
   b49ec:	1c62      	adds	r2, r4, #1
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   b49ee:	a903      	add	r1, sp, #12
   b49f0:	f000 f934 	bl	b4c5c <_ZN18Adafruit_SPIDevice15write_then_readEPKhjPhjh>
   b49f4:	e7e8      	b.n	b49c8 <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   b49f6:	b941      	cbnz	r1, b4a0a <_ZN23Adafruit_BusIO_Register4readEPhh+0x68>
      addrbuffer[0] |= 0x80;
   b49f8:	f065 057f 	orn	r5, r5, #127	; 0x7f
      addrbuffer[0] &= ~0x80;
   b49fc:	f88d 500c 	strb.w	r5, [sp, #12]
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   b4a00:	21ff      	movs	r1, #255	; 0xff
   b4a02:	e9cd 2100 	strd	r2, r1, [sp]
   b4a06:	4622      	mov	r2, r4
   b4a08:	e7f1      	b.n	b49ee <_ZN23Adafruit_BusIO_Register4readEPhh+0x4c>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   b4a0a:	2902      	cmp	r1, #2
   b4a0c:	d102      	bne.n	b4a14 <_ZN23Adafruit_BusIO_Register4readEPhh+0x72>
      addrbuffer[0] &= ~0x80;
   b4a0e:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   b4a12:	e7f3      	b.n	b49fc <_ZN23Adafruit_BusIO_Register4readEPhh+0x5a>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   b4a14:	2901      	cmp	r1, #1
      addrbuffer[0] |= 0x80 | 0x40;
   b4a16:	bf02      	ittt	eq
   b4a18:	f89d 100c 	ldrbeq.w	r1, [sp, #12]
   b4a1c:	f061 013f 	orneq	r1, r1, #63	; 0x3f
   b4a20:	f88d 100c 	strbeq.w	r1, [sp, #12]
   b4a24:	e7ec      	b.n	b4a00 <_ZN23Adafruit_BusIO_Register4readEPhh+0x5e>

000b4a26 <_ZN23Adafruit_BusIO_Register4readEv>:
uint32_t Adafruit_BusIO_Register::read(void) {
   b4a26:	b538      	push	{r3, r4, r5, lr}
  if (!read(_buffer, _width)) {
   b4a28:	f100 050f 	add.w	r5, r0, #15
   b4a2c:	7b02      	ldrb	r2, [r0, #12]
   b4a2e:	4629      	mov	r1, r5
uint32_t Adafruit_BusIO_Register::read(void) {
   b4a30:	4604      	mov	r4, r0
  if (!read(_buffer, _width)) {
   b4a32:	f7ff ffb6 	bl	b49a2 <_ZN23Adafruit_BusIO_Register4readEPhh>
   b4a36:	b178      	cbz	r0, b4a58 <_ZN23Adafruit_BusIO_Register4readEv+0x32>
   b4a38:	7b22      	ldrb	r2, [r4, #12]
   b4a3a:	4629      	mov	r1, r5
   b4a3c:	4422      	add	r2, r4
  uint32_t value = 0;
   b4a3e:	2000      	movs	r0, #0
  for (int i = 0; i < _width; i++) {
   b4a40:	42a2      	cmp	r2, r4
   b4a42:	d00b      	beq.n	b4a5c <_ZN23Adafruit_BusIO_Register4readEv+0x36>
    value <<= 8;
   b4a44:	0203      	lsls	r3, r0, #8
    if (_byteorder == LSBFIRST) {
   b4a46:	7ba0      	ldrb	r0, [r4, #14]
   b4a48:	b920      	cbnz	r0, b4a54 <_ZN23Adafruit_BusIO_Register4readEv+0x2e>
      value |= _buffer[_width - i - 1];
   b4a4a:	7b90      	ldrb	r0, [r2, #14]
      value |= _buffer[i];
   b4a4c:	4318      	orrs	r0, r3
  for (int i = 0; i < _width; i++) {
   b4a4e:	3a01      	subs	r2, #1
   b4a50:	3101      	adds	r1, #1
   b4a52:	e7f5      	b.n	b4a40 <_ZN23Adafruit_BusIO_Register4readEv+0x1a>
      value |= _buffer[i];
   b4a54:	7808      	ldrb	r0, [r1, #0]
   b4a56:	e7f9      	b.n	b4a4c <_ZN23Adafruit_BusIO_Register4readEv+0x26>
    return -1;
   b4a58:	f04f 30ff 	mov.w	r0, #4294967295
}
   b4a5c:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4a60 <_ZN18Adafruit_SPIDevice8transferEPhj>:
 *    @brief  Transfer (send/receive) a buffer over hard/soft SPI, without
 * transaction management
 *    @param  buffer The buffer to send and receive at the same time
 *    @param  len    The number of bytes to transfer
 */
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   b4a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4a64:	4604      	mov	r4, r0
  //
  // HARDWARE SPI
  //
  if (_spi) {
   b4a66:	6800      	ldr	r0, [r0, #0]
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   b4a68:	b085      	sub	sp, #20
   b4a6a:	460d      	mov	r5, r1
  if (_spi) {
   b4a6c:	b140      	cbz	r0, b4a80 <_ZN18Adafruit_SPIDevice8transferEPhj+0x20>
#ifdef BUSIO_HAS_HW_SPI
#if defined(SPARK)
    _spi->transfer(buffer, buffer, len, nullptr);
   b4a6e:	2300      	movs	r3, #0
   b4a70:	9300      	str	r3, [sp, #0]
   b4a72:	4613      	mov	r3, r2
   b4a74:	460a      	mov	r2, r1
   b4a76:	f000 fda1 	bl	b55bc <_ZN8SPIClass8transferEPKvPvjPFvvE>
        buffer[i] = reply;
      }
    }
  }
  return;
}
   b4a7a:	b005      	add	sp, #20
   b4a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
   b4a80:	7b23      	ldrb	r3, [r4, #12]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   b4a82:	68a0      	ldr	r0, [r4, #8]
   b4a84:	4f48      	ldr	r7, [pc, #288]	; (b4ba8 <_ZN18Adafruit_SPIDevice8transferEPhj+0x148>)
   b4a86:	fbb7 f7f0 	udiv	r7, r7, r0
    startbit = 0x80;
   b4a8a:	2b00      	cmp	r3, #0
  bool towrite, lastmosi = !(buffer[0] & startbit);
   b4a8c:	780b      	ldrb	r3, [r1, #0]
    startbit = 0x80;
   b4a8e:	bf0c      	ite	eq
   b4a90:	f04f 0b01 	moveq.w	fp, #1
   b4a94:	f04f 0b80 	movne.w	fp, #128	; 0x80
  bool towrite, lastmosi = !(buffer[0] & startbit);
   b4a98:	ea1b 0f03 	tst.w	fp, r3
   b4a9c:	eb01 0302 	add.w	r3, r1, r2
   b4aa0:	bf0c      	ite	eq
   b4aa2:	f04f 0901 	moveq.w	r9, #1
   b4aa6:	f04f 0900 	movne.w	r9, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   b4aaa:	b2ff      	uxtb	r7, r7
  for (size_t i = 0; i < len; i++) {
   b4aac:	9303      	str	r3, [sp, #12]
   b4aae:	9b03      	ldr	r3, [sp, #12]
   b4ab0:	42ab      	cmp	r3, r5
   b4ab2:	d0e2      	beq.n	b4a7a <_ZN18Adafruit_SPIDevice8transferEPhj+0x1a>
    uint8_t send = buffer[i];
   b4ab4:	f895 a000 	ldrb.w	sl, [r5]
    for (uint8_t b = startbit; b != 0;
   b4ab8:	465e      	mov	r6, fp
    uint8_t reply = 0;
   b4aba:	f04f 0800 	mov.w	r8, #0
      if (bitdelay_us) {
   b4abe:	b117      	cbz	r7, b4ac6 <_ZN18Adafruit_SPIDevice8transferEPhj+0x66>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b4ac0:	4638      	mov	r0, r7
   b4ac2:	f000 f9d7 	bl	b4e74 <HAL_Delay_Microseconds>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
   b4ac6:	7b63      	ldrb	r3, [r4, #13]
   b4ac8:	f013 0ffd 	tst.w	r3, #253	; 0xfd
   b4acc:	d141      	bne.n	b4b52 <_ZN18Adafruit_SPIDevice8transferEPhj+0xf2>
        if ((_mosi != -1) && (lastmosi != towrite)) {
   b4ace:	f994 3010 	ldrsb.w	r3, [r4, #16]
   b4ad2:	1c5a      	adds	r2, r3, #1
   b4ad4:	d00f      	beq.n	b4af6 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        towrite = send & b;
   b4ad6:	ea1a 0106 	ands.w	r1, sl, r6
        if ((_mosi != -1) && (lastmosi != towrite)) {
   b4ada:	bf14      	ite	ne
   b4adc:	2301      	movne	r3, #1
   b4ade:	2300      	moveq	r3, #0
   b4ae0:	454b      	cmp	r3, r9
   b4ae2:	d008      	beq.n	b4af6 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
            *mosiPort = *mosiPort | mosiPinMask;
   b4ae4:	6963      	ldr	r3, [r4, #20]
   b4ae6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b4ae8:	681a      	ldr	r2, [r3, #0]
          if (towrite)
   b4aea:	2900      	cmp	r1, #0
   b4aec:	d02c      	beq.n	b4b48 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe8>
            *mosiPort = *mosiPort | mosiPinMask;
   b4aee:	4302      	orrs	r2, r0
   b4af0:	601a      	str	r2, [r3, #0]
   b4af2:	f04f 0901 	mov.w	r9, #1
        *clkPort = *clkPort | clkPinMask; // Clock high
   b4af6:	69a1      	ldr	r1, [r4, #24]
   b4af8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b4afa:	680a      	ldr	r2, [r1, #0]
   b4afc:	4313      	orrs	r3, r2
   b4afe:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   b4b00:	b117      	cbz	r7, b4b08 <_ZN18Adafruit_SPIDevice8transferEPhj+0xa8>
   b4b02:	4638      	mov	r0, r7
   b4b04:	f000 f9b6 	bl	b4e74 <HAL_Delay_Microseconds>
        if (_miso != -1) {
   b4b08:	f994 3011 	ldrsb.w	r3, [r4, #17]
   b4b0c:	3301      	adds	r3, #1
   b4b0e:	d006      	beq.n	b4b1e <_ZN18Adafruit_SPIDevice8transferEPhj+0xbe>
          if (*misoPort & misoPinMask) {
   b4b10:	69e3      	ldr	r3, [r4, #28]
   b4b12:	681a      	ldr	r2, [r3, #0]
   b4b14:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b4b16:	421a      	tst	r2, r3
            reply |= b;
   b4b18:	bf18      	it	ne
   b4b1a:	ea46 0808 	orrne.w	r8, r6, r8
        *clkPort = *clkPort & ~clkPinMask; // Clock low
   b4b1e:	69a1      	ldr	r1, [r4, #24]
   b4b20:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b4b22:	680a      	ldr	r2, [r1, #0]
   b4b24:	ea22 0303 	bic.w	r3, r2, r3
   b4b28:	600b      	str	r3, [r1, #0]
      if (_miso != -1) {
   b4b2a:	f994 3011 	ldrsb.w	r3, [r4, #17]
   b4b2e:	3301      	adds	r3, #1
        buffer[i] = reply;
   b4b30:	bf18      	it	ne
   b4b32:	f885 8000 	strbne.w	r8, [r5]
    for (uint8_t b = startbit; b != 0;
   b4b36:	7b23      	ldrb	r3, [r4, #12]
   b4b38:	2b00      	cmp	r3, #0
   b4b3a:	d132      	bne.n	b4ba2 <_ZN18Adafruit_SPIDevice8transferEPhj+0x142>
   b4b3c:	0076      	lsls	r6, r6, #1
   b4b3e:	b2f6      	uxtb	r6, r6
   b4b40:	2e00      	cmp	r6, #0
   b4b42:	d1bc      	bne.n	b4abe <_ZN18Adafruit_SPIDevice8transferEPhj+0x5e>
  for (size_t i = 0; i < len; i++) {
   b4b44:	3501      	adds	r5, #1
   b4b46:	e7b2      	b.n	b4aae <_ZN18Adafruit_SPIDevice8transferEPhj+0x4e>
            *mosiPort = *mosiPort & ~mosiPinMask;
   b4b48:	ea22 0200 	bic.w	r2, r2, r0
   b4b4c:	601a      	str	r2, [r3, #0]
   b4b4e:	4689      	mov	r9, r1
   b4b50:	e7d1      	b.n	b4af6 <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        *clkPort = *clkPort | clkPinMask; // Clock high
   b4b52:	69a1      	ldr	r1, [r4, #24]
   b4b54:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b4b56:	680a      	ldr	r2, [r1, #0]
   b4b58:	4313      	orrs	r3, r2
   b4b5a:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   b4b5c:	b117      	cbz	r7, b4b64 <_ZN18Adafruit_SPIDevice8transferEPhj+0x104>
   b4b5e:	4638      	mov	r0, r7
   b4b60:	f000 f988 	bl	b4e74 <HAL_Delay_Microseconds>
        if (_mosi != -1) {
   b4b64:	f994 3010 	ldrsb.w	r3, [r4, #16]
   b4b68:	3301      	adds	r3, #1
   b4b6a:	d008      	beq.n	b4b7e <_ZN18Adafruit_SPIDevice8transferEPhj+0x11e>
            *mosiPort = *mosiPort | mosiPinMask;
   b4b6c:	6963      	ldr	r3, [r4, #20]
   b4b6e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   b4b70:	681a      	ldr	r2, [r3, #0]
          if (send & b)
   b4b72:	ea1a 0f06 	tst.w	sl, r6
            *mosiPort = *mosiPort | mosiPinMask;
   b4b76:	bf14      	ite	ne
   b4b78:	430a      	orrne	r2, r1
            *mosiPort = *mosiPort & ~mosiPinMask;
   b4b7a:	438a      	biceq	r2, r1
   b4b7c:	601a      	str	r2, [r3, #0]
        *clkPort = *clkPort & ~clkPinMask; // Clock low
   b4b7e:	69a1      	ldr	r1, [r4, #24]
   b4b80:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b4b82:	680a      	ldr	r2, [r1, #0]
   b4b84:	ea22 0303 	bic.w	r3, r2, r3
   b4b88:	600b      	str	r3, [r1, #0]
        if (_miso != -1) {
   b4b8a:	f994 3011 	ldrsb.w	r3, [r4, #17]
   b4b8e:	3301      	adds	r3, #1
   b4b90:	d0cb      	beq.n	b4b2a <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
          if (*misoPort & misoPinMask) {
   b4b92:	69e3      	ldr	r3, [r4, #28]
   b4b94:	681a      	ldr	r2, [r3, #0]
   b4b96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b4b98:	421a      	tst	r2, r3
            reply |= b;
   b4b9a:	bf18      	it	ne
   b4b9c:	ea46 0808 	orrne.w	r8, r6, r8
   b4ba0:	e7c3      	b.n	b4b2a <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
    for (uint8_t b = startbit; b != 0;
   b4ba2:	0876      	lsrs	r6, r6, #1
   b4ba4:	e7cc      	b.n	b4b40 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe0>
   b4ba6:	bf00      	nop
   b4ba8:	0007a120 	.word	0x0007a120

000b4bac <_ZN18Adafruit_SPIDevice8transferEh>:
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI, without
 * transaction management
 *    @param  send The byte to send
 *    @return The byte received while transmitting
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
   b4bac:	b507      	push	{r0, r1, r2, lr}
  uint8_t data = send;
  transfer(&data, 1);
   b4bae:	2201      	movs	r2, #1
  uint8_t data = send;
   b4bb0:	f88d 1007 	strb.w	r1, [sp, #7]
  transfer(&data, 1);
   b4bb4:	f10d 0107 	add.w	r1, sp, #7
   b4bb8:	f7ff ff52 	bl	b4a60 <_ZN18Adafruit_SPIDevice8transferEPhj>
  return data;
}
   b4bbc:	f89d 0007 	ldrb.w	r0, [sp, #7]
   b4bc0:	b003      	add	sp, #12
   b4bc2:	f85d fb04 	ldr.w	pc, [sp], #4

000b4bc6 <_ZN18Adafruit_SPIDevice16beginTransactionEv>:
/*!
 *    @brief  Manually begin a transaction (calls beginTransaction if hardware
 * SPI)
 */
void Adafruit_SPIDevice::beginTransaction(void) {
  if (_spi) {
   b4bc6:	6803      	ldr	r3, [r0, #0]
   b4bc8:	b11b      	cbz	r3, b4bd2 <_ZN18Adafruit_SPIDevice16beginTransactionEv+0xc>
#ifdef BUSIO_HAS_HW_SPI
    _spi->beginTransaction(*_spiSetting);
   b4bca:	6841      	ldr	r1, [r0, #4]
   b4bcc:	4618      	mov	r0, r3
   b4bce:	f000 bc29 	b.w	b5424 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
#endif
  }
}
   b4bd2:	4770      	bx	lr

000b4bd4 <_ZN18Adafruit_SPIDevice14endTransactionEv>:

/*!
 *    @brief  Manually end a transaction (calls endTransaction if hardware SPI)
 */
void Adafruit_SPIDevice::endTransaction(void) {
  if (_spi) {
   b4bd4:	6800      	ldr	r0, [r0, #0]
   b4bd6:	b108      	cbz	r0, b4bdc <_ZN18Adafruit_SPIDevice14endTransactionEv+0x8>
#ifdef BUSIO_HAS_HW_SPI
    _spi->endTransaction();
   b4bd8:	f000 bc0a 	b.w	b53f0 <_ZN8SPIClass14endTransactionEv>
#endif
  }
}
   b4bdc:	4770      	bx	lr

000b4bde <_ZN18Adafruit_SPIDevice13setChipSelectEi>:
/*!
 *    @brief  Assert/Deassert the CS pin if it is defined
 *    @param  value The state the CS is set to
 */
void Adafruit_SPIDevice::setChipSelect(int value) {
  if (_cs != -1) {
   b4bde:	f990 000e 	ldrsb.w	r0, [r0, #14]
   b4be2:	1c43      	adds	r3, r0, #1
   b4be4:	d003      	beq.n	b4bee <_ZN18Adafruit_SPIDevice13setChipSelectEi+0x10>
    digitalWrite(_cs, value);
   b4be6:	b2c9      	uxtb	r1, r1
   b4be8:	b280      	uxth	r0, r0
   b4bea:	f001 b986 	b.w	b5efa <digitalWrite>
  }
}
   b4bee:	4770      	bx	lr

000b4bf0 <_ZN18Adafruit_SPIDevice31beginTransactionWithAssertingCSEv>:
 *    @brief  Write a buffer or two to the SPI device, with transaction
 * management.
 *    @brief  Manually begin a transaction (calls beginTransaction if hardware
 *            SPI) with asserting the CS pin
 */
void Adafruit_SPIDevice::beginTransactionWithAssertingCS() {
   b4bf0:	b510      	push	{r4, lr}
   b4bf2:	4604      	mov	r4, r0
  beginTransaction();
   b4bf4:	f7ff ffe7 	bl	b4bc6 <_ZN18Adafruit_SPIDevice16beginTransactionEv>
  setChipSelect(LOW);
   b4bf8:	4620      	mov	r0, r4
   b4bfa:	2100      	movs	r1, #0
}
   b4bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  setChipSelect(LOW);
   b4c00:	f7ff bfed 	b.w	b4bde <_ZN18Adafruit_SPIDevice13setChipSelectEi>

000b4c04 <_ZN18Adafruit_SPIDevice31endTransactionWithDeassertingCSEv>:

/*!
 *    @brief  Manually end a transaction (calls endTransaction if hardware SPI)
 *            with deasserting the CS pin
 */
void Adafruit_SPIDevice::endTransactionWithDeassertingCS() {
   b4c04:	b510      	push	{r4, lr}
  setChipSelect(HIGH);
   b4c06:	2101      	movs	r1, #1
void Adafruit_SPIDevice::endTransactionWithDeassertingCS() {
   b4c08:	4604      	mov	r4, r0
  setChipSelect(HIGH);
   b4c0a:	f7ff ffe8 	bl	b4bde <_ZN18Adafruit_SPIDevice13setChipSelectEi>
  endTransaction();
   b4c0e:	4620      	mov	r0, r4
}
   b4c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  endTransaction();
   b4c14:	f7ff bfde 	b.w	b4bd4 <_ZN18Adafruit_SPIDevice14endTransactionEv>

000b4c18 <_ZN18Adafruit_SPIDevice5writeEPKhjS1_j>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(const uint8_t *buffer, size_t len,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
   b4c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4c1c:	461c      	mov	r4, r3
   b4c1e:	4606      	mov	r6, r0
   b4c20:	460d      	mov	r5, r1
   b4c22:	4617      	mov	r7, r2
  beginTransactionWithAssertingCS();
   b4c24:	f7ff ffe4 	bl	b4bf0 <_ZN18Adafruit_SPIDevice31beginTransactionWithAssertingCSEv>
      _spi->transferBytes((uint8_t *)buffer, nullptr, len);
    }
  } else
#endif
  {
    for (size_t i = 0; i < prefix_len; i++) {
   b4c28:	9b06      	ldr	r3, [sp, #24]
   b4c2a:	eb04 0803 	add.w	r8, r4, r3
   b4c2e:	4544      	cmp	r4, r8
   b4c30:	d108      	bne.n	b4c44 <_ZN18Adafruit_SPIDevice5writeEPKhjS1_j+0x2c>
   b4c32:	442f      	add	r7, r5
      transfer(prefix_buffer[i]);
    }
    for (size_t i = 0; i < len; i++) {
   b4c34:	42bd      	cmp	r5, r7
   b4c36:	d00b      	beq.n	b4c50 <_ZN18Adafruit_SPIDevice5writeEPKhjS1_j+0x38>
      transfer(buffer[i]);
   b4c38:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4c3c:	4630      	mov	r0, r6
   b4c3e:	f7ff ffb5 	bl	b4bac <_ZN18Adafruit_SPIDevice8transferEh>
    for (size_t i = 0; i < len; i++) {
   b4c42:	e7f7      	b.n	b4c34 <_ZN18Adafruit_SPIDevice5writeEPKhjS1_j+0x1c>
      transfer(prefix_buffer[i]);
   b4c44:	f814 1b01 	ldrb.w	r1, [r4], #1
   b4c48:	4630      	mov	r0, r6
   b4c4a:	f7ff ffaf 	bl	b4bac <_ZN18Adafruit_SPIDevice8transferEh>
    for (size_t i = 0; i < prefix_len; i++) {
   b4c4e:	e7ee      	b.n	b4c2e <_ZN18Adafruit_SPIDevice5writeEPKhjS1_j+0x16>
    }
  }
  endTransactionWithDeassertingCS();
   b4c50:	4630      	mov	r0, r6
   b4c52:	f7ff ffd7 	bl	b4c04 <_ZN18Adafruit_SPIDevice31endTransactionWithDeassertingCSEv>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   b4c56:	2001      	movs	r0, #1
   b4c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b4c5c <_ZN18Adafruit_SPIDevice15write_then_readEPKhjPhjh>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, uint8_t sendvalue) {
   b4c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4c60:	460d      	mov	r5, r1
   b4c62:	4617      	mov	r7, r2
   b4c64:	f89d 801c 	ldrb.w	r8, [sp, #28]
   b4c68:	4606      	mov	r6, r0
   b4c6a:	461c      	mov	r4, r3
  beginTransactionWithAssertingCS();
   b4c6c:	f7ff ffc0 	bl	b4bf0 <_ZN18Adafruit_SPIDevice31beginTransactionWithAssertingCSEv>
      _spi->transferBytes((uint8_t *)write_buffer, nullptr, write_len);
    }
  } else
#endif
  {
    for (size_t i = 0; i < write_len; i++) {
   b4c70:	442f      	add	r7, r5
   b4c72:	42bd      	cmp	r5, r7
   b4c74:	d10a      	bne.n	b4c8c <_ZN18Adafruit_SPIDevice15write_then_readEPKhjPhjh+0x30>
   b4c76:	9b06      	ldr	r3, [sp, #24]
   b4c78:	18e5      	adds	r5, r4, r3
  }
  DEBUG_SERIAL.println();
#endif

  // do the reading
  for (size_t i = 0; i < read_len; i++) {
   b4c7a:	42ac      	cmp	r4, r5
   b4c7c:	d00c      	beq.n	b4c98 <_ZN18Adafruit_SPIDevice15write_then_readEPKhjPhjh+0x3c>
    read_buffer[i] = transfer(sendvalue);
   b4c7e:	4641      	mov	r1, r8
   b4c80:	4630      	mov	r0, r6
   b4c82:	f7ff ff93 	bl	b4bac <_ZN18Adafruit_SPIDevice8transferEh>
   b4c86:	f804 0b01 	strb.w	r0, [r4], #1
  for (size_t i = 0; i < read_len; i++) {
   b4c8a:	e7f6      	b.n	b4c7a <_ZN18Adafruit_SPIDevice15write_then_readEPKhjPhjh+0x1e>
      transfer(write_buffer[i]);
   b4c8c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4c90:	4630      	mov	r0, r6
   b4c92:	f7ff ff8b 	bl	b4bac <_ZN18Adafruit_SPIDevice8transferEh>
    for (size_t i = 0; i < write_len; i++) {
   b4c96:	e7ec      	b.n	b4c72 <_ZN18Adafruit_SPIDevice15write_then_readEPKhjPhjh+0x16>
    }
  }
  DEBUG_SERIAL.println();
#endif

  endTransactionWithDeassertingCS();
   b4c98:	4630      	mov	r0, r6
   b4c9a:	f7ff ffb3 	bl	b4c04 <_ZN18Adafruit_SPIDevice31endTransactionWithDeassertingCSEv>

  return true;
}
   b4c9e:	2001      	movs	r0, #1
   b4ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b4ca4 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
   b4ca4:	6042      	str	r2, [r0, #4]
  _begun = false;
   b4ca6:	2200      	movs	r2, #0
   b4ca8:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#elif defined(ESP32)
  _maxBufferSize = I2C_BUFFER_LENGTH;
#else
  _maxBufferSize = 32;
   b4caa:	2220      	movs	r2, #32
  _addr = addr;
   b4cac:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
   b4cae:	60c2      	str	r2, [r0, #12]
#endif
}
   b4cb0:	4770      	bx	lr

000b4cb2 <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
   b4cb2:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
   b4cb4:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
   b4cb6:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
   b4cb8:	b153      	cbz	r3, b4cd0 <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
   b4cba:	7821      	ldrb	r1, [r4, #0]
   b4cbc:	6860      	ldr	r0, [r4, #4]
   b4cbe:	f000 ffb8 	bl	b5c32 <_ZN7TwoWire17beginTransmissionEh>
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.print(F("Address 0x"));
  DEBUG_SERIAL.print(_addr);
#endif
  if (_wire->endTransmission() == 0) {
   b4cc2:	6860      	ldr	r0, [r4, #4]
   b4cc4:	f000 ffbd 	bl	b5c42 <_ZN7TwoWire15endTransmissionEv>
   b4cc8:	fab0 f080 	clz	r0, r0
   b4ccc:	0940      	lsrs	r0, r0, #5
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F(" Not detected"));
#endif
  return false;
}
   b4cce:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
   b4cd0:	2101      	movs	r1, #1
   b4cd2:	f000 f803 	bl	b4cdc <_ZN18Adafruit_I2CDevice5beginEb>
   b4cd6:	2800      	cmp	r0, #0
   b4cd8:	d1ef      	bne.n	b4cba <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
   b4cda:	e7f8      	b.n	b4cce <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

000b4cdc <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   b4cdc:	b538      	push	{r3, r4, r5, lr}
   b4cde:	4604      	mov	r4, r0
  _wire->begin();
   b4ce0:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   b4ce2:	460d      	mov	r5, r1
  _wire->begin();
   b4ce4:	f000 ff76 	bl	b5bd4 <_ZN7TwoWire5beginEv>
  _begun = true;
   b4ce8:	2001      	movs	r0, #1
   b4cea:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
   b4cec:	b125      	cbz	r5, b4cf8 <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
   b4cee:	4620      	mov	r0, r4
}
   b4cf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
   b4cf4:	f7ff bfdd 	b.w	b4cb2 <_ZN18Adafruit_I2CDevice8detectedEv>
}
   b4cf8:	bd38      	pop	{r3, r4, r5, pc}

000b4cfa <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
   b4cfa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b4cfe:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
   b4d02:	461f      	mov	r7, r3
  if ((len + prefix_len) > maxBufferSize()) {
   b4d04:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
   b4d06:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
   b4d08:	4432      	add	r2, r6
   b4d0a:	429a      	cmp	r2, r3
                               size_t prefix_len) {
   b4d0c:	4604      	mov	r4, r0
   b4d0e:	4688      	mov	r8, r1
  if ((len + prefix_len) > maxBufferSize()) {
   b4d10:	d902      	bls.n	b4d18 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
   b4d12:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }
}
   b4d14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
   b4d18:	7801      	ldrb	r1, [r0, #0]
   b4d1a:	6840      	ldr	r0, [r0, #4]
   b4d1c:	f000 ff89 	bl	b5c32 <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != nullptr)) {
   b4d20:	b97e      	cbnz	r6, b4d42 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x48>
  if (_wire->write(buffer, len) != len) {
   b4d22:	6860      	ldr	r0, [r4, #4]
   b4d24:	6803      	ldr	r3, [r0, #0]
   b4d26:	462a      	mov	r2, r5
   b4d28:	68db      	ldr	r3, [r3, #12]
   b4d2a:	4641      	mov	r1, r8
   b4d2c:	4798      	blx	r3
   b4d2e:	4285      	cmp	r5, r0
   b4d30:	d1ef      	bne.n	b4d12 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
  if (_wire->endTransmission(stop) == 0) {
   b4d32:	6860      	ldr	r0, [r4, #4]
   b4d34:	4639      	mov	r1, r7
   b4d36:	f000 ff80 	bl	b5c3a <_ZN7TwoWire15endTransmissionEh>
   b4d3a:	fab0 f080 	clz	r0, r0
   b4d3e:	0940      	lsrs	r0, r0, #5
   b4d40:	e7e8      	b.n	b4d14 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1a>
  if ((prefix_len != 0) && (prefix_buffer != nullptr)) {
   b4d42:	f1b9 0f00 	cmp.w	r9, #0
   b4d46:	d0ec      	beq.n	b4d22 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
   b4d48:	6860      	ldr	r0, [r4, #4]
   b4d4a:	6803      	ldr	r3, [r0, #0]
   b4d4c:	4632      	mov	r2, r6
   b4d4e:	68db      	ldr	r3, [r3, #12]
   b4d50:	4649      	mov	r1, r9
   b4d52:	4798      	blx	r3
   b4d54:	4286      	cmp	r6, r0
   b4d56:	d1dc      	bne.n	b4d12 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
   b4d58:	e7e3      	b.n	b4d22 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>

000b4d5a <_ZN18Adafruit_I2CDevice5_readEPhjb>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
   b4d5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4d5e:	4615      	mov	r5, r2
   b4d60:	4604      	mov	r4, r0
   b4d62:	460e      	mov	r6, r1
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#elif defined(ARDUINO_ARCH_MEGAAVR)
  size_t recv = _wire->requestFrom(_addr, len, stop);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
   b4d64:	b2d2      	uxtb	r2, r2
   b4d66:	7801      	ldrb	r1, [r0, #0]
   b4d68:	6840      	ldr	r0, [r0, #4]
   b4d6a:	f000 ff50 	bl	b5c0e <_ZN7TwoWire11requestFromEhjh>
#endif

  if (recv != len) {
   b4d6e:	4285      	cmp	r5, r0
   b4d70:	d10d      	bne.n	b4d8e <_ZN18Adafruit_I2CDevice5_readEPhjb+0x34>
   b4d72:	2700      	movs	r7, #0
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
   b4d74:	fa1f f887 	uxth.w	r8, r7
   b4d78:	45a8      	cmp	r8, r5
   b4d7a:	f107 0701 	add.w	r7, r7, #1
   b4d7e:	d209      	bcs.n	b4d94 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x3a>
    buffer[i] = _wire->read();
   b4d80:	6860      	ldr	r0, [r4, #4]
   b4d82:	6803      	ldr	r3, [r0, #0]
   b4d84:	695b      	ldr	r3, [r3, #20]
   b4d86:	4798      	blx	r3
   b4d88:	f806 0008 	strb.w	r0, [r6, r8]
  for (uint16_t i = 0; i < len; i++) {
   b4d8c:	e7f2      	b.n	b4d74 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x1a>
    return false;
   b4d8e:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   b4d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4d94:	2001      	movs	r0, #1
   b4d96:	e7fb      	b.n	b4d90 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x36>

000b4d98 <_ZN18Adafruit_I2CDevice4readEPhjb>:
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
   b4d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b4d9c:	4607      	mov	r7, r0
   b4d9e:	4688      	mov	r8, r1
   b4da0:	4616      	mov	r6, r2
   b4da2:	4699      	mov	r9, r3
  size_t pos = 0;
   b4da4:	2500      	movs	r5, #0
  while (pos < len) {
   b4da6:	42b5      	cmp	r5, r6
   b4da8:	d212      	bcs.n	b4dd0 <_ZN18Adafruit_I2CDevice4readEPhjb+0x38>
                       bool stop = false);
  bool setSpeed(uint32_t desiredclk);

  /*!   @brief  How many bytes we can read in a transaction
   *    @return The size of the Wire receive/transmit buffer */
  size_t maxBufferSize() { return _maxBufferSize; }
   b4daa:	68fa      	ldr	r2, [r7, #12]
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
   b4dac:	1b74      	subs	r4, r6, r5
   b4dae:	4294      	cmp	r4, r2
   b4db0:	bf28      	it	cs
   b4db2:	4614      	movcs	r4, r2
    bool read_stop = (pos < (len - read_len)) ? false : stop;
   b4db4:	1b33      	subs	r3, r6, r4
    if (!_read(buffer + pos, read_len, read_stop))
   b4db6:	42ab      	cmp	r3, r5
   b4db8:	bf94      	ite	ls
   b4dba:	464b      	movls	r3, r9
   b4dbc:	2300      	movhi	r3, #0
   b4dbe:	4622      	mov	r2, r4
   b4dc0:	eb08 0105 	add.w	r1, r8, r5
   b4dc4:	4638      	mov	r0, r7
   b4dc6:	f7ff ffc8 	bl	b4d5a <_ZN18Adafruit_I2CDevice5_readEPhjb>
   b4dca:	b110      	cbz	r0, b4dd2 <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
    pos += read_len;
   b4dcc:	4425      	add	r5, r4
  while (pos < len) {
   b4dce:	e7ea      	b.n	b4da6 <_ZN18Adafruit_I2CDevice4readEPhjb+0xe>
  return true;
   b4dd0:	2001      	movs	r0, #1
}
   b4dd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b4dd6 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
   b4dd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4dd8:	461d      	mov	r5, r3
  if (!write(write_buffer, write_len, stop)) {
   b4dda:	2300      	movs	r3, #0
   b4ddc:	e9cd 3300 	strd	r3, r3, [sp]
   b4de0:	f89d 301c 	ldrb.w	r3, [sp, #28]
                                         size_t read_len, bool stop) {
   b4de4:	9e06      	ldr	r6, [sp, #24]
   b4de6:	4604      	mov	r4, r0
  if (!write(write_buffer, write_len, stop)) {
   b4de8:	f7ff ff87 	bl	b4cfa <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
   b4dec:	b140      	cbz	r0, b4e00 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb+0x2a>
    return false;
  }

  return read(read_buffer, read_len);
   b4dee:	2301      	movs	r3, #1
   b4df0:	4632      	mov	r2, r6
   b4df2:	4629      	mov	r1, r5
   b4df4:	4620      	mov	r0, r4
}
   b4df6:	b002      	add	sp, #8
   b4df8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return read(read_buffer, read_len);
   b4dfc:	f7ff bfcc 	b.w	b4d98 <_ZN18Adafruit_I2CDevice4readEPhjb>
}
   b4e00:	b002      	add	sp, #8
   b4e02:	bd70      	pop	{r4, r5, r6, pc}

000b4e04 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4e04:	b508      	push	{r3, lr}
   b4e06:	4b02      	ldr	r3, [pc, #8]	; (b4e10 <netdb_freeaddrinfo+0xc>)
   b4e08:	681b      	ldr	r3, [r3, #0]
   b4e0a:	689b      	ldr	r3, [r3, #8]
   b4e0c:	9301      	str	r3, [sp, #4]
   b4e0e:	bd08      	pop	{r3, pc}
   b4e10:	00030268 	.word	0x00030268

000b4e14 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4e14:	b508      	push	{r3, lr}
   b4e16:	4b02      	ldr	r3, [pc, #8]	; (b4e20 <netdb_getaddrinfo+0xc>)
   b4e18:	681b      	ldr	r3, [r3, #0]
   b4e1a:	68db      	ldr	r3, [r3, #12]
   b4e1c:	9301      	str	r3, [sp, #4]
   b4e1e:	bd08      	pop	{r3, pc}
   b4e20:	00030268 	.word	0x00030268

000b4e24 <hal_pin_map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
   b4e24:	b508      	push	{r3, lr}
   b4e26:	4b02      	ldr	r3, [pc, #8]	; (b4e30 <hal_pin_map+0xc>)
   b4e28:	681b      	ldr	r3, [r3, #0]
   b4e2a:	681b      	ldr	r3, [r3, #0]
   b4e2c:	9301      	str	r3, [sp, #4]
   b4e2e:	bd08      	pop	{r3, pc}
   b4e30:	0003022c 	.word	0x0003022c

000b4e34 <hal_gpio_mode>:
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b4e34:	b508      	push	{r3, lr}
   b4e36:	4b02      	ldr	r3, [pc, #8]	; (b4e40 <hal_gpio_mode+0xc>)
   b4e38:	681b      	ldr	r3, [r3, #0]
   b4e3a:	689b      	ldr	r3, [r3, #8]
   b4e3c:	9301      	str	r3, [sp, #4]
   b4e3e:	bd08      	pop	{r3, pc}
   b4e40:	0003022c 	.word	0x0003022c

000b4e44 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b4e44:	b508      	push	{r3, lr}
   b4e46:	4b02      	ldr	r3, [pc, #8]	; (b4e50 <hal_gpio_get_mode+0xc>)
   b4e48:	681b      	ldr	r3, [r3, #0]
   b4e4a:	68db      	ldr	r3, [r3, #12]
   b4e4c:	9301      	str	r3, [sp, #4]
   b4e4e:	bd08      	pop	{r3, pc}
   b4e50:	0003022c 	.word	0x0003022c

000b4e54 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b4e54:	b508      	push	{r3, lr}
   b4e56:	4b02      	ldr	r3, [pc, #8]	; (b4e60 <hal_gpio_write+0xc>)
   b4e58:	681b      	ldr	r3, [r3, #0]
   b4e5a:	691b      	ldr	r3, [r3, #16]
   b4e5c:	9301      	str	r3, [sp, #4]
   b4e5e:	bd08      	pop	{r3, pc}
   b4e60:	0003022c 	.word	0x0003022c

000b4e64 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4e64:	b508      	push	{r3, lr}
   b4e66:	4b02      	ldr	r3, [pc, #8]	; (b4e70 <HAL_RNG_GetRandomNumber+0xc>)
   b4e68:	681b      	ldr	r3, [r3, #0]
   b4e6a:	685b      	ldr	r3, [r3, #4]
   b4e6c:	9301      	str	r3, [sp, #4]
   b4e6e:	bd08      	pop	{r3, pc}
   b4e70:	00030218 	.word	0x00030218

000b4e74 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b4e74:	b508      	push	{r3, lr}
   b4e76:	4b02      	ldr	r3, [pc, #8]	; (b4e80 <HAL_Delay_Microseconds+0xc>)
   b4e78:	681b      	ldr	r3, [r3, #0]
   b4e7a:	68db      	ldr	r3, [r3, #12]
   b4e7c:	9301      	str	r3, [sp, #4]
   b4e7e:	bd08      	pop	{r3, pc}
   b4e80:	00030218 	.word	0x00030218

000b4e84 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4e84:	b508      	push	{r3, lr}
   b4e86:	4b02      	ldr	r3, [pc, #8]	; (b4e90 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4e88:	681b      	ldr	r3, [r3, #0]
   b4e8a:	695b      	ldr	r3, [r3, #20]
   b4e8c:	9301      	str	r3, [sp, #4]
   b4e8e:	bd08      	pop	{r3, pc}
   b4e90:	00030218 	.word	0x00030218

000b4e94 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b4e94:	b508      	push	{r3, lr}
   b4e96:	4b02      	ldr	r3, [pc, #8]	; (b4ea0 <hal_timer_millis+0xc>)
   b4e98:	681b      	ldr	r3, [r3, #0]
   b4e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b4e9c:	9301      	str	r3, [sp, #4]
   b4e9e:	bd08      	pop	{r3, pc}
   b4ea0:	00030218 	.word	0x00030218

000b4ea4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4ea4:	b508      	push	{r3, lr}
   b4ea6:	4b02      	ldr	r3, [pc, #8]	; (b4eb0 <os_mutex_recursive_create+0xc>)
   b4ea8:	681b      	ldr	r3, [r3, #0]
   b4eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4eac:	9301      	str	r3, [sp, #4]
   b4eae:	bd08      	pop	{r3, pc}
   b4eb0:	00030248 	.word	0x00030248

000b4eb4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4eb4:	b508      	push	{r3, lr}
   b4eb6:	4b02      	ldr	r3, [pc, #8]	; (b4ec0 <inet_inet_ntop+0xc>)
   b4eb8:	681b      	ldr	r3, [r3, #0]
   b4eba:	695b      	ldr	r3, [r3, #20]
   b4ebc:	9301      	str	r3, [sp, #4]
   b4ebe:	bd08      	pop	{r3, pc}
   b4ec0:	00030264 	.word	0x00030264

000b4ec4 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4ec4:	b508      	push	{r3, lr}
   b4ec6:	4b02      	ldr	r3, [pc, #8]	; (b4ed0 <hal_usart_write+0xc>)
   b4ec8:	681b      	ldr	r3, [r3, #0]
   b4eca:	68db      	ldr	r3, [r3, #12]
   b4ecc:	9301      	str	r3, [sp, #4]
   b4ece:	bd08      	pop	{r3, pc}
   b4ed0:	0003023c 	.word	0x0003023c

000b4ed4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4ed4:	b508      	push	{r3, lr}
   b4ed6:	4b02      	ldr	r3, [pc, #8]	; (b4ee0 <hal_usart_available+0xc>)
   b4ed8:	681b      	ldr	r3, [r3, #0]
   b4eda:	691b      	ldr	r3, [r3, #16]
   b4edc:	9301      	str	r3, [sp, #4]
   b4ede:	bd08      	pop	{r3, pc}
   b4ee0:	0003023c 	.word	0x0003023c

000b4ee4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4ee4:	b508      	push	{r3, lr}
   b4ee6:	4b02      	ldr	r3, [pc, #8]	; (b4ef0 <hal_usart_read+0xc>)
   b4ee8:	681b      	ldr	r3, [r3, #0]
   b4eea:	695b      	ldr	r3, [r3, #20]
   b4eec:	9301      	str	r3, [sp, #4]
   b4eee:	bd08      	pop	{r3, pc}
   b4ef0:	0003023c 	.word	0x0003023c

000b4ef4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4ef4:	b508      	push	{r3, lr}
   b4ef6:	4b02      	ldr	r3, [pc, #8]	; (b4f00 <hal_usart_peek+0xc>)
   b4ef8:	681b      	ldr	r3, [r3, #0]
   b4efa:	699b      	ldr	r3, [r3, #24]
   b4efc:	9301      	str	r3, [sp, #4]
   b4efe:	bd08      	pop	{r3, pc}
   b4f00:	0003023c 	.word	0x0003023c

000b4f04 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4f04:	b508      	push	{r3, lr}
   b4f06:	4b02      	ldr	r3, [pc, #8]	; (b4f10 <hal_usart_flush+0xc>)
   b4f08:	681b      	ldr	r3, [r3, #0]
   b4f0a:	69db      	ldr	r3, [r3, #28]
   b4f0c:	9301      	str	r3, [sp, #4]
   b4f0e:	bd08      	pop	{r3, pc}
   b4f10:	0003023c 	.word	0x0003023c

000b4f14 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4f14:	b508      	push	{r3, lr}
   b4f16:	4b02      	ldr	r3, [pc, #8]	; (b4f20 <hal_usart_is_enabled+0xc>)
   b4f18:	681b      	ldr	r3, [r3, #0]
   b4f1a:	6a1b      	ldr	r3, [r3, #32]
   b4f1c:	9301      	str	r3, [sp, #4]
   b4f1e:	bd08      	pop	{r3, pc}
   b4f20:	0003023c 	.word	0x0003023c

000b4f24 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4f24:	b508      	push	{r3, lr}
   b4f26:	4b02      	ldr	r3, [pc, #8]	; (b4f30 <hal_usart_available_data_for_write+0xc>)
   b4f28:	681b      	ldr	r3, [r3, #0]
   b4f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4f2c:	9301      	str	r3, [sp, #4]
   b4f2e:	bd08      	pop	{r3, pc}
   b4f30:	0003023c 	.word	0x0003023c

000b4f34 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4f34:	b508      	push	{r3, lr}
   b4f36:	4b02      	ldr	r3, [pc, #8]	; (b4f40 <hal_usart_init_ex+0xc>)
   b4f38:	681b      	ldr	r3, [r3, #0]
   b4f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4f3c:	9301      	str	r3, [sp, #4]
   b4f3e:	bd08      	pop	{r3, pc}
   b4f40:	0003023c 	.word	0x0003023c

000b4f44 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b4f44:	b508      	push	{r3, lr}
   b4f46:	4b02      	ldr	r3, [pc, #8]	; (b4f50 <hal_i2c_begin+0xc>)
   b4f48:	681b      	ldr	r3, [r3, #0]
   b4f4a:	68db      	ldr	r3, [r3, #12]
   b4f4c:	9301      	str	r3, [sp, #4]
   b4f4e:	bd08      	pop	{r3, pc}
   b4f50:	00030228 	.word	0x00030228

000b4f54 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b4f54:	b508      	push	{r3, lr}
   b4f56:	4b02      	ldr	r3, [pc, #8]	; (b4f60 <hal_i2c_begin_transmission+0xc>)
   b4f58:	681b      	ldr	r3, [r3, #0]
   b4f5a:	699b      	ldr	r3, [r3, #24]
   b4f5c:	9301      	str	r3, [sp, #4]
   b4f5e:	bd08      	pop	{r3, pc}
   b4f60:	00030228 	.word	0x00030228

000b4f64 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b4f64:	b508      	push	{r3, lr}
   b4f66:	4b02      	ldr	r3, [pc, #8]	; (b4f70 <hal_i2c_end_transmission+0xc>)
   b4f68:	681b      	ldr	r3, [r3, #0]
   b4f6a:	69db      	ldr	r3, [r3, #28]
   b4f6c:	9301      	str	r3, [sp, #4]
   b4f6e:	bd08      	pop	{r3, pc}
   b4f70:	00030228 	.word	0x00030228

000b4f74 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4f74:	b508      	push	{r3, lr}
   b4f76:	4b02      	ldr	r3, [pc, #8]	; (b4f80 <hal_i2c_write+0xc>)
   b4f78:	681b      	ldr	r3, [r3, #0]
   b4f7a:	6a1b      	ldr	r3, [r3, #32]
   b4f7c:	9301      	str	r3, [sp, #4]
   b4f7e:	bd08      	pop	{r3, pc}
   b4f80:	00030228 	.word	0x00030228

000b4f84 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4f84:	b508      	push	{r3, lr}
   b4f86:	4b02      	ldr	r3, [pc, #8]	; (b4f90 <hal_i2c_available+0xc>)
   b4f88:	681b      	ldr	r3, [r3, #0]
   b4f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4f8c:	9301      	str	r3, [sp, #4]
   b4f8e:	bd08      	pop	{r3, pc}
   b4f90:	00030228 	.word	0x00030228

000b4f94 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4f94:	b508      	push	{r3, lr}
   b4f96:	4b02      	ldr	r3, [pc, #8]	; (b4fa0 <hal_i2c_read+0xc>)
   b4f98:	681b      	ldr	r3, [r3, #0]
   b4f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4f9c:	9301      	str	r3, [sp, #4]
   b4f9e:	bd08      	pop	{r3, pc}
   b4fa0:	00030228 	.word	0x00030228

000b4fa4 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4fa4:	b508      	push	{r3, lr}
   b4fa6:	4b02      	ldr	r3, [pc, #8]	; (b4fb0 <hal_i2c_peek+0xc>)
   b4fa8:	681b      	ldr	r3, [r3, #0]
   b4faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4fac:	9301      	str	r3, [sp, #4]
   b4fae:	bd08      	pop	{r3, pc}
   b4fb0:	00030228 	.word	0x00030228

000b4fb4 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4fb4:	b508      	push	{r3, lr}
   b4fb6:	4b02      	ldr	r3, [pc, #8]	; (b4fc0 <hal_i2c_flush+0xc>)
   b4fb8:	681b      	ldr	r3, [r3, #0]
   b4fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4fbc:	9301      	str	r3, [sp, #4]
   b4fbe:	bd08      	pop	{r3, pc}
   b4fc0:	00030228 	.word	0x00030228

000b4fc4 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4fc4:	b508      	push	{r3, lr}
   b4fc6:	4b02      	ldr	r3, [pc, #8]	; (b4fd0 <hal_i2c_is_enabled+0xc>)
   b4fc8:	681b      	ldr	r3, [r3, #0]
   b4fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4fcc:	9301      	str	r3, [sp, #4]
   b4fce:	bd08      	pop	{r3, pc}
   b4fd0:	00030228 	.word	0x00030228

000b4fd4 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4fd4:	b508      	push	{r3, lr}
   b4fd6:	4b02      	ldr	r3, [pc, #8]	; (b4fe0 <hal_i2c_init+0xc>)
   b4fd8:	681b      	ldr	r3, [r3, #0]
   b4fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4fdc:	9301      	str	r3, [sp, #4]
   b4fde:	bd08      	pop	{r3, pc}
   b4fe0:	00030228 	.word	0x00030228

000b4fe4 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b4fe4:	b508      	push	{r3, lr}
   b4fe6:	4b02      	ldr	r3, [pc, #8]	; (b4ff0 <hal_i2c_request_ex+0xc>)
   b4fe8:	681b      	ldr	r3, [r3, #0]
   b4fea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4fec:	9301      	str	r3, [sp, #4]
   b4fee:	bd08      	pop	{r3, pc}
   b4ff0:	00030228 	.word	0x00030228

000b4ff4 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b4ff4:	b508      	push	{r3, lr}
   b4ff6:	4b02      	ldr	r3, [pc, #8]	; (b5000 <hal_spi_begin+0xc>)
   b4ff8:	681b      	ldr	r3, [r3, #0]
   b4ffa:	681b      	ldr	r3, [r3, #0]
   b4ffc:	9301      	str	r3, [sp, #4]
   b4ffe:	bd08      	pop	{r3, pc}
   b5000:	00030230 	.word	0x00030230

000b5004 <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   b5004:	b508      	push	{r3, lr}
   b5006:	4b02      	ldr	r3, [pc, #8]	; (b5010 <hal_spi_set_bit_order+0xc>)
   b5008:	681b      	ldr	r3, [r3, #0]
   b500a:	689b      	ldr	r3, [r3, #8]
   b500c:	9301      	str	r3, [sp, #4]
   b500e:	bd08      	pop	{r3, pc}
   b5010:	00030230 	.word	0x00030230

000b5014 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   b5014:	b508      	push	{r3, lr}
   b5016:	4b02      	ldr	r3, [pc, #8]	; (b5020 <hal_spi_set_data_mode+0xc>)
   b5018:	681b      	ldr	r3, [r3, #0]
   b501a:	68db      	ldr	r3, [r3, #12]
   b501c:	9301      	str	r3, [sp, #4]
   b501e:	bd08      	pop	{r3, pc}
   b5020:	00030230 	.word	0x00030230

000b5024 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   b5024:	b508      	push	{r3, lr}
   b5026:	4b02      	ldr	r3, [pc, #8]	; (b5030 <hal_spi_set_clock_divider+0xc>)
   b5028:	681b      	ldr	r3, [r3, #0]
   b502a:	691b      	ldr	r3, [r3, #16]
   b502c:	9301      	str	r3, [sp, #4]
   b502e:	bd08      	pop	{r3, pc}
   b5030:	00030230 	.word	0x00030230

000b5034 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b5034:	b508      	push	{r3, lr}
   b5036:	4b02      	ldr	r3, [pc, #8]	; (b5040 <hal_spi_transfer+0xc>)
   b5038:	681b      	ldr	r3, [r3, #0]
   b503a:	695b      	ldr	r3, [r3, #20]
   b503c:	9301      	str	r3, [sp, #4]
   b503e:	bd08      	pop	{r3, pc}
   b5040:	00030230 	.word	0x00030230

000b5044 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b5044:	b508      	push	{r3, lr}
   b5046:	4b02      	ldr	r3, [pc, #8]	; (b5050 <hal_spi_init+0xc>)
   b5048:	681b      	ldr	r3, [r3, #0]
   b504a:	69db      	ldr	r3, [r3, #28]
   b504c:	9301      	str	r3, [sp, #4]
   b504e:	bd08      	pop	{r3, pc}
   b5050:	00030230 	.word	0x00030230

000b5054 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5054:	b508      	push	{r3, lr}
   b5056:	4b02      	ldr	r3, [pc, #8]	; (b5060 <hal_spi_is_enabled+0xc>)
   b5058:	681b      	ldr	r3, [r3, #0]
   b505a:	6a1b      	ldr	r3, [r3, #32]
   b505c:	9301      	str	r3, [sp, #4]
   b505e:	bd08      	pop	{r3, pc}
   b5060:	00030230 	.word	0x00030230

000b5064 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b5064:	b508      	push	{r3, lr}
   b5066:	4b02      	ldr	r3, [pc, #8]	; (b5070 <hal_spi_info+0xc>)
   b5068:	681b      	ldr	r3, [r3, #0]
   b506a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b506c:	9301      	str	r3, [sp, #4]
   b506e:	bd08      	pop	{r3, pc}
   b5070:	00030230 	.word	0x00030230

000b5074 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
   b5074:	b508      	push	{r3, lr}
   b5076:	4b02      	ldr	r3, [pc, #8]	; (b5080 <hal_spi_transfer_dma+0xc>)
   b5078:	681b      	ldr	r3, [r3, #0]
   b507a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b507c:	9301      	str	r3, [sp, #4]
   b507e:	bd08      	pop	{r3, pc}
   b5080:	00030230 	.word	0x00030230

000b5084 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, const hal_spi_config_t*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   b5084:	b508      	push	{r3, lr}
   b5086:	4b02      	ldr	r3, [pc, #8]	; (b5090 <hal_spi_transfer_dma_status+0xc>)
   b5088:	681b      	ldr	r3, [r3, #0]
   b508a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b508c:	9301      	str	r3, [sp, #4]
   b508e:	bd08      	pop	{r3, pc}
   b5090:	00030230 	.word	0x00030230

000b5094 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b5094:	b508      	push	{r3, lr}
   b5096:	4b02      	ldr	r3, [pc, #8]	; (b50a0 <hal_spi_set_settings+0xc>)
   b5098:	681b      	ldr	r3, [r3, #0]
   b509a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b509c:	9301      	str	r3, [sp, #4]
   b509e:	bd08      	pop	{r3, pc}
   b50a0:	00030230 	.word	0x00030230

000b50a4 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b50a4:	b508      	push	{r3, lr}
   b50a6:	4b02      	ldr	r3, [pc, #8]	; (b50b0 <hal_spi_acquire+0xc>)
   b50a8:	681b      	ldr	r3, [r3, #0]
   b50aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b50ac:	9301      	str	r3, [sp, #4]
   b50ae:	bd08      	pop	{r3, pc}
   b50b0:	00030230 	.word	0x00030230

000b50b4 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b50b4:	b508      	push	{r3, lr}
   b50b6:	4b02      	ldr	r3, [pc, #8]	; (b50c0 <hal_spi_release+0xc>)
   b50b8:	681b      	ldr	r3, [r3, #0]
   b50ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b50bc:	9301      	str	r3, [sp, #4]
   b50be:	bd08      	pop	{r3, pc}
   b50c0:	00030230 	.word	0x00030230

000b50c4 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b50c4:	b508      	push	{r3, lr}
   b50c6:	4b02      	ldr	r3, [pc, #8]	; (b50d0 <HAL_USB_USART_Init+0xc>)
   b50c8:	681b      	ldr	r3, [r3, #0]
   b50ca:	681b      	ldr	r3, [r3, #0]
   b50cc:	9301      	str	r3, [sp, #4]
   b50ce:	bd08      	pop	{r3, pc}
   b50d0:	0003024c 	.word	0x0003024c

000b50d4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b50d4:	b508      	push	{r3, lr}
   b50d6:	4b02      	ldr	r3, [pc, #8]	; (b50e0 <HAL_USB_USART_Begin+0xc>)
   b50d8:	681b      	ldr	r3, [r3, #0]
   b50da:	685b      	ldr	r3, [r3, #4]
   b50dc:	9301      	str	r3, [sp, #4]
   b50de:	bd08      	pop	{r3, pc}
   b50e0:	0003024c 	.word	0x0003024c

000b50e4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN_WRAP(4, hal_usb, HAL_USB_USART_Available_Data, protected, int32_t(HAL_USB_USART_Serial))
   b50e4:	b508      	push	{r3, lr}
   b50e6:	4b02      	ldr	r3, [pc, #8]	; (b50f0 <HAL_USB_USART_Available_Data+0xc>)
   b50e8:	681b      	ldr	r3, [r3, #0]
   b50ea:	691b      	ldr	r3, [r3, #16]
   b50ec:	9301      	str	r3, [sp, #4]
   b50ee:	bd08      	pop	{r3, pc}
   b50f0:	0003024c 	.word	0x0003024c

000b50f4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN_WRAP(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, protected, int32_t(HAL_USB_USART_Serial))
   b50f4:	b508      	push	{r3, lr}
   b50f6:	4b02      	ldr	r3, [pc, #8]	; (b5100 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b50f8:	681b      	ldr	r3, [r3, #0]
   b50fa:	695b      	ldr	r3, [r3, #20]
   b50fc:	9301      	str	r3, [sp, #4]
   b50fe:	bd08      	pop	{r3, pc}
   b5100:	0003024c 	.word	0x0003024c

000b5104 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN_WRAP(6, hal_usb, HAL_USB_USART_Receive_Data, protected, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5104:	b508      	push	{r3, lr}
   b5106:	4b02      	ldr	r3, [pc, #8]	; (b5110 <HAL_USB_USART_Receive_Data+0xc>)
   b5108:	681b      	ldr	r3, [r3, #0]
   b510a:	699b      	ldr	r3, [r3, #24]
   b510c:	9301      	str	r3, [sp, #4]
   b510e:	bd08      	pop	{r3, pc}
   b5110:	0003024c 	.word	0x0003024c

000b5114 <HAL_USB_USART_Send_Data>:
DYNALIB_FN_WRAP(7, hal_usb, HAL_USB_USART_Send_Data, protected, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5114:	b508      	push	{r3, lr}
   b5116:	4b02      	ldr	r3, [pc, #8]	; (b5120 <HAL_USB_USART_Send_Data+0xc>)
   b5118:	681b      	ldr	r3, [r3, #0]
   b511a:	69db      	ldr	r3, [r3, #28]
   b511c:	9301      	str	r3, [sp, #4]
   b511e:	bd08      	pop	{r3, pc}
   b5120:	0003024c 	.word	0x0003024c

000b5124 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN_WRAP(8, hal_usb, HAL_USB_USART_Flush_Data, protected, void(HAL_USB_USART_Serial))
   b5124:	b508      	push	{r3, lr}
   b5126:	4b02      	ldr	r3, [pc, #8]	; (b5130 <HAL_USB_USART_Flush_Data+0xc>)
   b5128:	681b      	ldr	r3, [r3, #0]
   b512a:	6a1b      	ldr	r3, [r3, #32]
   b512c:	9301      	str	r3, [sp, #4]
   b512e:	bd08      	pop	{r3, pc}
   b5130:	0003024c 	.word	0x0003024c

000b5134 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b5134:	b508      	push	{r3, lr}
   b5136:	4b02      	ldr	r3, [pc, #8]	; (b5140 <HAL_USB_USART_Is_Connected+0xc>)
   b5138:	681b      	ldr	r3, [r3, #0]
   b513a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b513c:	9301      	str	r3, [sp, #4]
   b513e:	bd08      	pop	{r3, pc}
   b5140:	0003024c 	.word	0x0003024c

000b5144 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b5144:	b508      	push	{r3, lr}
   b5146:	4b02      	ldr	r3, [pc, #8]	; (b5150 <set_system_mode+0xc>)
   b5148:	681b      	ldr	r3, [r3, #0]
   b514a:	685b      	ldr	r3, [r3, #4]
   b514c:	9301      	str	r3, [sp, #4]
   b514e:	bd08      	pop	{r3, pc}
   b5150:	00030220 	.word	0x00030220

000b5154 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler_deprecated, void(void*))
DYNALIB_FN(3, system, system_firmwareUpdate_deprecated, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer_deprecated, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b5154:	b508      	push	{r3, lr}
   b5156:	4b02      	ldr	r3, [pc, #8]	; (b5160 <system_delay_ms+0xc>)
   b5158:	681b      	ldr	r3, [r3, #0]
   b515a:	695b      	ldr	r3, [r3, #20]
   b515c:	9301      	str	r3, [sp, #4]
   b515e:	bd08      	pop	{r3, pc}
   b5160:	00030220 	.word	0x00030220

000b5164 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b5164:	b508      	push	{r3, lr}
   b5166:	4b02      	ldr	r3, [pc, #8]	; (b5170 <system_thread_set_state+0xc>)
   b5168:	681b      	ldr	r3, [r3, #0]
   b516a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b516c:	9301      	str	r3, [sp, #4]
   b516e:	bd08      	pop	{r3, pc}
   b5170:	00030220 	.word	0x00030220

000b5174 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b5174:	b508      	push	{r3, lr}
   b5176:	4b03      	ldr	r3, [pc, #12]	; (b5184 <system_ctrl_set_app_request_handler+0x10>)
   b5178:	681b      	ldr	r3, [r3, #0]
   b517a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b517e:	9301      	str	r3, [sp, #4]
   b5180:	bd08      	pop	{r3, pc}
   b5182:	0000      	.short	0x0000
   b5184:	00030220 	.word	0x00030220

000b5188 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b5188:	b508      	push	{r3, lr}
   b518a:	4b03      	ldr	r3, [pc, #12]	; (b5198 <system_ctrl_set_result+0x10>)
   b518c:	681b      	ldr	r3, [r3, #0]
   b518e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b5192:	9301      	str	r3, [sp, #4]
   b5194:	bd08      	pop	{r3, pc}
   b5196:	0000      	.short	0x0000
   b5198:	00030220 	.word	0x00030220

000b519c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b519c:	b508      	push	{r3, lr}
   b519e:	4b02      	ldr	r3, [pc, #8]	; (b51a8 <network_connect+0xc>)
   b51a0:	681b      	ldr	r3, [r3, #0]
   b51a2:	685b      	ldr	r3, [r3, #4]
   b51a4:	9301      	str	r3, [sp, #4]
   b51a6:	bd08      	pop	{r3, pc}
   b51a8:	00030240 	.word	0x00030240

000b51ac <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b51ac:	b508      	push	{r3, lr}
   b51ae:	4b02      	ldr	r3, [pc, #8]	; (b51b8 <network_connecting+0xc>)
   b51b0:	681b      	ldr	r3, [r3, #0]
   b51b2:	689b      	ldr	r3, [r3, #8]
   b51b4:	9301      	str	r3, [sp, #4]
   b51b6:	bd08      	pop	{r3, pc}
   b51b8:	00030240 	.word	0x00030240

000b51bc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b51bc:	b508      	push	{r3, lr}
   b51be:	4b02      	ldr	r3, [pc, #8]	; (b51c8 <network_disconnect+0xc>)
   b51c0:	681b      	ldr	r3, [r3, #0]
   b51c2:	68db      	ldr	r3, [r3, #12]
   b51c4:	9301      	str	r3, [sp, #4]
   b51c6:	bd08      	pop	{r3, pc}
   b51c8:	00030240 	.word	0x00030240

000b51cc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b51cc:	b508      	push	{r3, lr}
   b51ce:	4b02      	ldr	r3, [pc, #8]	; (b51d8 <network_ready+0xc>)
   b51d0:	681b      	ldr	r3, [r3, #0]
   b51d2:	691b      	ldr	r3, [r3, #16]
   b51d4:	9301      	str	r3, [sp, #4]
   b51d6:	bd08      	pop	{r3, pc}
   b51d8:	00030240 	.word	0x00030240

000b51dc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b51dc:	b508      	push	{r3, lr}
   b51de:	4b02      	ldr	r3, [pc, #8]	; (b51e8 <network_on+0xc>)
   b51e0:	681b      	ldr	r3, [r3, #0]
   b51e2:	695b      	ldr	r3, [r3, #20]
   b51e4:	9301      	str	r3, [sp, #4]
   b51e6:	bd08      	pop	{r3, pc}
   b51e8:	00030240 	.word	0x00030240

000b51ec <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b51ec:	b508      	push	{r3, lr}
   b51ee:	4b02      	ldr	r3, [pc, #8]	; (b51f8 <network_off+0xc>)
   b51f0:	681b      	ldr	r3, [r3, #0]
   b51f2:	699b      	ldr	r3, [r3, #24]
   b51f4:	9301      	str	r3, [sp, #4]
   b51f6:	bd08      	pop	{r3, pc}
   b51f8:	00030240 	.word	0x00030240

000b51fc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b51fc:	b508      	push	{r3, lr}
   b51fe:	4b02      	ldr	r3, [pc, #8]	; (b5208 <network_listen+0xc>)
   b5200:	681b      	ldr	r3, [r3, #0]
   b5202:	69db      	ldr	r3, [r3, #28]
   b5204:	9301      	str	r3, [sp, #4]
   b5206:	bd08      	pop	{r3, pc}
   b5208:	00030240 	.word	0x00030240

000b520c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b520c:	b508      	push	{r3, lr}
   b520e:	4b02      	ldr	r3, [pc, #8]	; (b5218 <network_listening+0xc>)
   b5210:	681b      	ldr	r3, [r3, #0]
   b5212:	6a1b      	ldr	r3, [r3, #32]
   b5214:	9301      	str	r3, [sp, #4]
   b5216:	bd08      	pop	{r3, pc}
   b5218:	00030240 	.word	0x00030240

000b521c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b521c:	b508      	push	{r3, lr}
   b521e:	4b02      	ldr	r3, [pc, #8]	; (b5228 <network_set_listen_timeout+0xc>)
   b5220:	681b      	ldr	r3, [r3, #0]
   b5222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5224:	9301      	str	r3, [sp, #4]
   b5226:	bd08      	pop	{r3, pc}
   b5228:	00030240 	.word	0x00030240

000b522c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b522c:	b508      	push	{r3, lr}
   b522e:	4b02      	ldr	r3, [pc, #8]	; (b5238 <network_get_listen_timeout+0xc>)
   b5230:	681b      	ldr	r3, [r3, #0]
   b5232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5234:	9301      	str	r3, [sp, #4]
   b5236:	bd08      	pop	{r3, pc}
   b5238:	00030240 	.word	0x00030240

000b523c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b523c:	b508      	push	{r3, lr}
   b523e:	4b02      	ldr	r3, [pc, #8]	; (b5248 <network_is_on+0xc>)
   b5240:	681b      	ldr	r3, [r3, #0]
   b5242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5244:	9301      	str	r3, [sp, #4]
   b5246:	bd08      	pop	{r3, pc}
   b5248:	00030240 	.word	0x00030240

000b524c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b524c:	b508      	push	{r3, lr}
   b524e:	4b02      	ldr	r3, [pc, #8]	; (b5258 <network_is_off+0xc>)
   b5250:	681b      	ldr	r3, [r3, #0]
   b5252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5254:	9301      	str	r3, [sp, #4]
   b5256:	bd08      	pop	{r3, pc}
   b5258:	00030240 	.word	0x00030240

000b525c <network_prefer>:
DYNALIB_FN(18, system_net, network_set_configuration, int(network_handle_t, const network_configuration_t*, void*))
DYNALIB_FN(19, system_net, network_get_configuration, int(network_handle_t, network_configuration_t**, size_t*, const char*, size_t, void*))
DYNALIB_FN(20, system_net, network_free_configuration, int(network_configuration_t*, size_t, void*))
DYNALIB_FN(21, system_net, network_prefer, network_handle_t(network_handle_t, bool, void*))
   b525c:	b508      	push	{r3, lr}
   b525e:	4b02      	ldr	r3, [pc, #8]	; (b5268 <network_prefer+0xc>)
   b5260:	681b      	ldr	r3, [r3, #0]
   b5262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b5264:	9301      	str	r3, [sp, #4]
   b5266:	bd08      	pop	{r3, pc}
   b5268:	00030240 	.word	0x00030240

000b526c <network_is_preferred>:
DYNALIB_FN(22, system_net, network_is_preferred, bool(network_handle_t, void*))
   b526c:	b508      	push	{r3, lr}
   b526e:	4b02      	ldr	r3, [pc, #8]	; (b5278 <network_is_preferred+0xc>)
   b5270:	681b      	ldr	r3, [r3, #0]
   b5272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b5274:	9301      	str	r3, [sp, #4]
   b5276:	bd08      	pop	{r3, pc}
   b5278:	00030240 	.word	0x00030240

000b527c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
   b527c:	b508      	push	{r3, lr}
   b527e:	4b02      	ldr	r3, [pc, #8]	; (b5288 <spark_process+0xc>)
   b5280:	681b      	ldr	r3, [r3, #0]
   b5282:	689b      	ldr	r3, [r3, #8]
   b5284:	9301      	str	r3, [sp, #4]
   b5286:	bd08      	pop	{r3, pc}
   b5288:	00030244 	.word	0x00030244

000b528c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b528c:	b508      	push	{r3, lr}
   b528e:	4b02      	ldr	r3, [pc, #8]	; (b5298 <spark_set_random_seed_from_cloud_handler+0xc>)
   b5290:	681b      	ldr	r3, [r3, #0]
   b5292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5294:	9301      	str	r3, [sp, #4]
   b5296:	bd08      	pop	{r3, pc}
   b5298:	00030244 	.word	0x00030244

000b529c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b529c:	b508      	push	{r3, lr}
   b529e:	4b02      	ldr	r3, [pc, #8]	; (b52a8 <malloc+0xc>)
   b52a0:	681b      	ldr	r3, [r3, #0]
   b52a2:	681b      	ldr	r3, [r3, #0]
   b52a4:	9301      	str	r3, [sp, #4]
   b52a6:	bd08      	pop	{r3, pc}
   b52a8:	0003021c 	.word	0x0003021c

000b52ac <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b52ac:	b508      	push	{r3, lr}
   b52ae:	4b02      	ldr	r3, [pc, #8]	; (b52b8 <free+0xc>)
   b52b0:	681b      	ldr	r3, [r3, #0]
   b52b2:	685b      	ldr	r3, [r3, #4]
   b52b4:	9301      	str	r3, [sp, #4]
   b52b6:	bd08      	pop	{r3, pc}
   b52b8:	0003021c 	.word	0x0003021c

000b52bc <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b52bc:	b508      	push	{r3, lr}
   b52be:	4b02      	ldr	r3, [pc, #8]	; (b52c8 <__assert_func+0xc>)
   b52c0:	681b      	ldr	r3, [r3, #0]
   b52c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b52c4:	9301      	str	r3, [sp, #4]
   b52c6:	bd08      	pop	{r3, pc}
   b52c8:	0003021c 	.word	0x0003021c

000b52cc <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b52cc:	b508      	push	{r3, lr}
   b52ce:	4b02      	ldr	r3, [pc, #8]	; (b52d8 <newlib_impure_ptr_callback+0xc>)
   b52d0:	681b      	ldr	r3, [r3, #0]
   b52d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b52d4:	9301      	str	r3, [sp, #4]
   b52d6:	bd08      	pop	{r3, pc}
   b52d8:	0003021c 	.word	0x0003021c

000b52dc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b52dc:	2200      	movs	r2, #0
   b52de:	6840      	ldr	r0, [r0, #4]
   b52e0:	4611      	mov	r1, r2
   b52e2:	f7ff bf93 	b.w	b520c <network_listening>

000b52e6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b52e6:	2200      	movs	r2, #0
   b52e8:	6840      	ldr	r0, [r0, #4]
   b52ea:	4611      	mov	r1, r2
   b52ec:	f7ff bf9e 	b.w	b522c <network_get_listen_timeout>

000b52f0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b52f0:	6840      	ldr	r0, [r0, #4]
   b52f2:	2200      	movs	r2, #0
   b52f4:	f7ff bf92 	b.w	b521c <network_set_listen_timeout>

000b52f8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b52f8:	6840      	ldr	r0, [r0, #4]
   b52fa:	2200      	movs	r2, #0
   b52fc:	f081 0101 	eor.w	r1, r1, #1
   b5300:	f7ff bf7c 	b.w	b51fc <network_listen>

000b5304 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5304:	2300      	movs	r3, #0
   b5306:	6840      	ldr	r0, [r0, #4]
   b5308:	461a      	mov	r2, r3
   b530a:	4619      	mov	r1, r3
   b530c:	f7ff bf6e 	b.w	b51ec <network_off>

000b5310 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5310:	2300      	movs	r3, #0
   b5312:	6840      	ldr	r0, [r0, #4]
   b5314:	461a      	mov	r2, r3
   b5316:	4619      	mov	r1, r3
   b5318:	f7ff bf60 	b.w	b51dc <network_on>

000b531c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b531c:	2200      	movs	r2, #0
   b531e:	6840      	ldr	r0, [r0, #4]
   b5320:	4611      	mov	r1, r2
   b5322:	f7ff bf53 	b.w	b51cc <network_ready>

000b5326 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5326:	2200      	movs	r2, #0
   b5328:	6840      	ldr	r0, [r0, #4]
   b532a:	4611      	mov	r1, r2
   b532c:	f7ff bf3e 	b.w	b51ac <network_connecting>

000b5330 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5330:	6840      	ldr	r0, [r0, #4]
   b5332:	2200      	movs	r2, #0
   b5334:	2102      	movs	r1, #2
   b5336:	f7ff bf41 	b.w	b51bc <network_disconnect>

000b533a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b533a:	2300      	movs	r3, #0
   b533c:	6840      	ldr	r0, [r0, #4]
   b533e:	461a      	mov	r2, r3
   b5340:	f7ff bf2c 	b.w	b519c <network_connect>

000b5344 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5344:	4b02      	ldr	r3, [pc, #8]	; (b5350 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b5346:	2203      	movs	r2, #3
   b5348:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b534a:	4a02      	ldr	r2, [pc, #8]	; (b5354 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b534c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b534e:	4770      	bx	lr
   b5350:	2003e6d0 	.word	0x2003e6d0
   b5354:	000b621c 	.word	0x000b621c

000b5358 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b5358:	2100      	movs	r1, #0
   b535a:	f7ff beab 	b.w	b50b4 <hal_spi_release>

000b535e <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b535e:	2100      	movs	r1, #0
   b5360:	f7ff bea0 	b.w	b50a4 <hal_spi_acquire>

000b5364 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b5364:	b510      	push	{r4, lr}
   b5366:	4604      	mov	r4, r0
   b5368:	4608      	mov	r0, r1
{
    _spi = spi;
   b536a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b536c:	f7ff fe6a 	bl	b5044 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b5370:	2300      	movs	r3, #0
   b5372:	6063      	str	r3, [r4, #4]
}
   b5374:	4620      	mov	r0, r4
   b5376:	bd10      	pop	{r4, pc}

000b5378 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b5378:	b513      	push	{r0, r1, r4, lr}
   b537a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b537c:	7800      	ldrb	r0, [r0, #0]
   b537e:	f7ff ffee 	bl	b535e <_ZN8SPIClass4lockEv.isra.0>
   b5382:	b958      	cbnz	r0, b539c <_ZN8SPIClass5beginEv+0x24>
   b5384:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b5386:	9001      	str	r0, [sp, #4]
   b5388:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b538c:	f7ff fe32 	bl	b4ff4 <hal_spi_begin>
        unlock();
   b5390:	9801      	ldr	r0, [sp, #4]
    }
}
   b5392:	b002      	add	sp, #8
   b5394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5398:	f7ff bfde 	b.w	b5358 <_ZN8SPIClass6unlockEv.isra.0>
   b539c:	b002      	add	sp, #8
   b539e:	bd10      	pop	{r4, pc}

000b53a0 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   b53a0:	b513      	push	{r0, r1, r4, lr}
   b53a2:	4604      	mov	r4, r0
    if (!lock())
   b53a4:	7800      	ldrb	r0, [r0, #0]
{
   b53a6:	9101      	str	r1, [sp, #4]
    if (!lock())
   b53a8:	f7ff ffd9 	bl	b535e <_ZN8SPIClass4lockEv.isra.0>
   b53ac:	9901      	ldr	r1, [sp, #4]
   b53ae:	b948      	cbnz	r0, b53c4 <_ZN8SPIClass11setBitOrderEh+0x24>
   b53b0:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   b53b2:	9001      	str	r0, [sp, #4]
   b53b4:	f7ff fe26 	bl	b5004 <hal_spi_set_bit_order>
        unlock();
   b53b8:	9801      	ldr	r0, [sp, #4]
    }
}
   b53ba:	b002      	add	sp, #8
   b53bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b53c0:	f7ff bfca 	b.w	b5358 <_ZN8SPIClass6unlockEv.isra.0>
   b53c4:	b002      	add	sp, #8
   b53c6:	bd10      	pop	{r4, pc}

000b53c8 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   b53c8:	b513      	push	{r0, r1, r4, lr}
   b53ca:	4604      	mov	r4, r0
    if (!lock())
   b53cc:	7800      	ldrb	r0, [r0, #0]
{
   b53ce:	9101      	str	r1, [sp, #4]
    if (!lock())
   b53d0:	f7ff ffc5 	bl	b535e <_ZN8SPIClass4lockEv.isra.0>
   b53d4:	9901      	ldr	r1, [sp, #4]
   b53d6:	b948      	cbnz	r0, b53ec <_ZN8SPIClass11setDataModeEh+0x24>
   b53d8:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
   b53da:	9001      	str	r0, [sp, #4]
   b53dc:	f7ff fe1a 	bl	b5014 <hal_spi_set_data_mode>
        unlock();
   b53e0:	9801      	ldr	r0, [sp, #4]
    }
}
   b53e2:	b002      	add	sp, #8
   b53e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b53e8:	f7ff bfb6 	b.w	b5358 <_ZN8SPIClass6unlockEv.isra.0>
   b53ec:	b002      	add	sp, #8
   b53ee:	bd10      	pop	{r4, pc}

000b53f0 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b53f0:	7800      	ldrb	r0, [r0, #0]
   b53f2:	f7ff bfb1 	b.w	b5358 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b53f8 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b53f8:	0840      	lsrs	r0, r0, #1
{
   b53fa:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b53fc:	6018      	str	r0, [r3, #0]
   b53fe:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b5400:	6818      	ldr	r0, [r3, #0]
   b5402:	4288      	cmp	r0, r1
   b5404:	b2e5      	uxtb	r5, r4
   b5406:	d906      	bls.n	b5416 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b5408:	3401      	adds	r4, #1
   b540a:	2c08      	cmp	r4, #8
   b540c:	d002      	beq.n	b5414 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b540e:	0840      	lsrs	r0, r0, #1
   b5410:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b5412:	e7f5      	b.n	b5400 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b5414:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b5416:	4b02      	ldr	r3, [pc, #8]	; (b5420 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b5418:	5d5b      	ldrb	r3, [r3, r5]
   b541a:	7013      	strb	r3, [r2, #0]
}
   b541c:	bd30      	pop	{r4, r5, pc}
   b541e:	bf00      	nop
   b5420:	000b6258 	.word	0x000b6258

000b5424 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b5424:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5428:	4606      	mov	r6, r0
   b542a:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b542c:	7800      	ldrb	r0, [r0, #0]
{
   b542e:	460c      	mov	r4, r1
    CHECK(lock());
   b5430:	f7ff ff95 	bl	b535e <_ZN8SPIClass4lockEv.isra.0>
   b5434:	2800      	cmp	r0, #0
   b5436:	db1b      	blt.n	b5470 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b5438:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b543a:	2214      	movs	r2, #20
   b543c:	2100      	movs	r1, #0
   b543e:	a809      	add	r0, sp, #36	; 0x24
   b5440:	f000 fe0a 	bl	b6058 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b5444:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b5446:	2200      	movs	r2, #0
   b5448:	a909      	add	r1, sp, #36	; 0x24
   b544a:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b544c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b5450:	f7ff fe08 	bl	b5064 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b5454:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b5458:	b113      	cbz	r3, b5460 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b545a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b545e:	b155      	cbz	r5, b5476 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b5460:	2700      	movs	r7, #0
   b5462:	46b9      	mov	r9, r7
   b5464:	46b8      	mov	r8, r7
   b5466:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b5468:	7923      	ldrb	r3, [r4, #4]
   b546a:	b15d      	cbz	r5, b5484 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b546c:	b1c3      	cbz	r3, b54a0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b546e:	2000      	movs	r0, #0
}
   b5470:	b00f      	add	sp, #60	; 0x3c
   b5472:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b5476:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b547a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b547e:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b5482:	e7f1      	b.n	b5468 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b5484:	2b00      	cmp	r3, #0
   b5486:	d135      	bne.n	b54f4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b5488:	68a3      	ldr	r3, [r4, #8]
   b548a:	4543      	cmp	r3, r8
   b548c:	d108      	bne.n	b54a0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b548e:	f88d 9020 	strb.w	r9, [sp, #32]
   b5492:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b5496:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b549a:	89a3      	ldrh	r3, [r4, #12]
   b549c:	429a      	cmp	r2, r3
   b549e:	d0e6      	beq.n	b546e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b54a0:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b54a2:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b54a4:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b54a8:	980a      	ldr	r0, [sp, #40]	; 0x28
   b54aa:	ab04      	add	r3, sp, #16
   b54ac:	f10d 020f 	add.w	r2, sp, #15
   b54b0:	f7ff ffa2 	bl	b53f8 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b54b4:	7921      	ldrb	r1, [r4, #4]
   b54b6:	b985      	cbnz	r5, b54da <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b54b8:	b989      	cbnz	r1, b54de <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b54ba:	68a3      	ldr	r3, [r4, #8]
   b54bc:	4543      	cmp	r3, r8
   b54be:	d30e      	bcc.n	b54de <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b54c0:	f88d 9020 	strb.w	r9, [sp, #32]
   b54c4:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b54c8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b54cc:	89a3      	ldrh	r3, [r4, #12]
   b54ce:	429a      	cmp	r2, r3
   b54d0:	d105      	bne.n	b54de <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b54d2:	9b04      	ldr	r3, [sp, #16]
   b54d4:	4543      	cmp	r3, r8
   b54d6:	d102      	bne.n	b54de <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b54d8:	e7c9      	b.n	b546e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b54da:	2900      	cmp	r1, #0
   b54dc:	d1f9      	bne.n	b54d2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b54de:	2300      	movs	r3, #0
   b54e0:	9301      	str	r3, [sp, #4]
   b54e2:	7b63      	ldrb	r3, [r4, #13]
   b54e4:	9300      	str	r3, [sp, #0]
   b54e6:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b54ea:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b54ec:	7830      	ldrb	r0, [r6, #0]
   b54ee:	f7ff fdd1 	bl	b5094 <hal_spi_set_settings>
   b54f2:	e7bc      	b.n	b546e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b54f4:	e9cd 5500 	strd	r5, r5, [sp]
   b54f8:	462b      	mov	r3, r5
   b54fa:	462a      	mov	r2, r5
   b54fc:	2101      	movs	r1, #1
   b54fe:	e7f5      	b.n	b54ec <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b5500 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   b5500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5504:	b088      	sub	sp, #32
    unsigned clock = 0;
   b5506:	2300      	movs	r3, #0
{
   b5508:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   b550a:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   b550c:	9302      	str	r3, [sp, #8]
{
   b550e:	460e      	mov	r6, r1
   b5510:	4617      	mov	r7, r2
    if (!lock())
   b5512:	f7ff ff24 	bl	b535e <_ZN8SPIClass4lockEv.isra.0>
   b5516:	4605      	mov	r5, r0
   b5518:	bb00      	cbnz	r0, b555c <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   b551a:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   b551e:	4601      	mov	r1, r0
   b5520:	2214      	movs	r2, #20
   b5522:	a803      	add	r0, sp, #12
   b5524:	f000 fd98 	bl	b6058 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b5528:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b552a:	462a      	mov	r2, r5
   b552c:	a903      	add	r1, sp, #12
   b552e:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   b5530:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   b5534:	f7ff fd96 	bl	b5064 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b5538:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   b553a:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b553e:	ab02      	add	r3, sp, #8
   b5540:	f10d 0207 	add.w	r2, sp, #7
   b5544:	fb07 f106 	mul.w	r1, r7, r6
   b5548:	f7ff ff56 	bl	b53f8 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   b554c:	7820      	ldrb	r0, [r4, #0]
   b554e:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b5552:	f7ff fd67 	bl	b5024 <hal_spi_set_clock_divider>
        unlock();
   b5556:	7820      	ldrb	r0, [r4, #0]
   b5558:	f7ff fefe 	bl	b5358 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   b555c:	9802      	ldr	r0, [sp, #8]
   b555e:	b008      	add	sp, #32
   b5560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5564 <_ZN8SPIClass15setClockDividerEh>:
{
   b5564:	b538      	push	{r3, r4, r5, lr}
   b5566:	4604      	mov	r4, r0
    if (!lock())
   b5568:	7800      	ldrb	r0, [r0, #0]
{
   b556a:	460d      	mov	r5, r1
    if (!lock())
   b556c:	f7ff fef7 	bl	b535e <_ZN8SPIClass4lockEv.isra.0>
   b5570:	4603      	mov	r3, r0
   b5572:	b9d0      	cbnz	r0, b55aa <_ZN8SPIClass15setClockDividerEh+0x46>
        if (_dividerReference)
   b5574:	6861      	ldr	r1, [r4, #4]
   b5576:	b199      	cbz	r1, b55a0 <_ZN8SPIClass15setClockDividerEh+0x3c>
   b5578:	4a0c      	ldr	r2, [pc, #48]	; (b55ac <_ZN8SPIClass15setClockDividerEh+0x48>)
        if (clock_divisors[result] == divider)
   b557a:	f812 0b01 	ldrb.w	r0, [r2], #1
   b557e:	4285      	cmp	r5, r0
   b5580:	d002      	beq.n	b5588 <_ZN8SPIClass15setClockDividerEh+0x24>
    for (; result < arraySize(clock_divisors); result++)
   b5582:	3301      	adds	r3, #1
   b5584:	2b08      	cmp	r3, #8
   b5586:	d1f8      	bne.n	b557a <_ZN8SPIClass15setClockDividerEh+0x16>
    return result + 1;
   b5588:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
   b558a:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
   b558c:	2201      	movs	r2, #1
   b558e:	40d9      	lsrs	r1, r3
   b5590:	4620      	mov	r0, r4
   b5592:	f7ff ffb5 	bl	b5500 <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
   b5596:	7820      	ldrb	r0, [r4, #0]
}
   b5598:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unlock();
   b559c:	f7ff bedc 	b.w	b5358 <_ZN8SPIClass6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
   b55a0:	7820      	ldrb	r0, [r4, #0]
   b55a2:	4629      	mov	r1, r5
   b55a4:	f7ff fd3e 	bl	b5024 <hal_spi_set_clock_divider>
   b55a8:	e7f5      	b.n	b5596 <_ZN8SPIClass15setClockDividerEh+0x32>
}
   b55aa:	bd38      	pop	{r3, r4, r5, pc}
   b55ac:	000b6258 	.word	0x000b6258

000b55b0 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   b55b0:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b55b2:	7800      	ldrb	r0, [r0, #0]
   b55b4:	f7ff fd3e 	bl	b5034 <hal_spi_transfer>
}
   b55b8:	b2c0      	uxtb	r0, r0
   b55ba:	bd08      	pop	{r3, pc}

000b55bc <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   b55bc:	b530      	push	{r4, r5, lr}
   b55be:	b087      	sub	sp, #28
   b55c0:	4604      	mov	r4, r0
   b55c2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   b55c4:	9500      	str	r5, [sp, #0]
   b55c6:	7800      	ldrb	r0, [r0, #0]
   b55c8:	f7ff fd54 	bl	b5074 <hal_spi_transfer_dma>
    if (user_callback == NULL)
   b55cc:	b93d      	cbnz	r5, b55de <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   b55ce:	7820      	ldrb	r0, [r4, #0]
   b55d0:	a902      	add	r1, sp, #8
   b55d2:	f7ff fd57 	bl	b5084 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   b55d6:	f89d 3014 	ldrb.w	r3, [sp, #20]
   b55da:	07db      	lsls	r3, r3, #31
   b55dc:	d4f7      	bmi.n	b55ce <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
   b55de:	b007      	add	sp, #28
   b55e0:	bd30      	pop	{r4, r5, pc}
	...

000b55e4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b55e4:	4b05      	ldr	r3, [pc, #20]	; (b55fc <_GLOBAL__sub_I_System+0x18>)
   b55e6:	2202      	movs	r2, #2
   b55e8:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b55ea:	4b05      	ldr	r3, [pc, #20]	; (b5600 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b55ec:	4a05      	ldr	r2, [pc, #20]	; (b5604 <_GLOBAL__sub_I_System+0x20>)
   b55ee:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b55f0:	2000      	movs	r0, #0
   b55f2:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b55f6:	f7ff bda5 	b.w	b5144 <set_system_mode>
   b55fa:	bf00      	nop
   b55fc:	2003e6e4 	.word	0x2003e6e4
   b5600:	2003e6d8 	.word	0x2003e6d8
   b5604:	ffff0000 	.word	0xffff0000

000b5608 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b5608:	4802      	ldr	r0, [pc, #8]	; (b5614 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b560a:	2300      	movs	r3, #0
   b560c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b560e:	f7ff bc49 	b.w	b4ea4 <os_mutex_recursive_create>
   b5612:	bf00      	nop
   b5614:	2003e6e8 	.word	0x2003e6e8

000b5618 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b5618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b561a:	4606      	mov	r6, r0
   b561c:	460d      	mov	r5, r1
  size_t n = 0;
   b561e:	188f      	adds	r7, r1, r2
   b5620:	2400      	movs	r4, #0
  while (size--) {
   b5622:	42bd      	cmp	r5, r7
   b5624:	d00c      	beq.n	b5640 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b5626:	6833      	ldr	r3, [r6, #0]
   b5628:	f815 1b01 	ldrb.w	r1, [r5], #1
   b562c:	689b      	ldr	r3, [r3, #8]
   b562e:	4630      	mov	r0, r6
   b5630:	4798      	blx	r3
     if (chunk>=0)
   b5632:	1e03      	subs	r3, r0, #0
   b5634:	db01      	blt.n	b563a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b5636:	441c      	add	r4, r3
  while (size--) {
   b5638:	e7f3      	b.n	b5622 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b563a:	2c00      	cmp	r4, #0
   b563c:	bf08      	it	eq
   b563e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b5640:	4620      	mov	r0, r4
   b5642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5644 <_ZN5Print5writeEPKc>:

    int getWriteError() const { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b5644:	b513      	push	{r0, r1, r4, lr}
   b5646:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b5648:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b564a:	b159      	cbz	r1, b5664 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b564c:	9101      	str	r1, [sp, #4]
   b564e:	f7fe fce5 	bl	b401c <strlen>
   b5652:	6823      	ldr	r3, [r4, #0]
   b5654:	9901      	ldr	r1, [sp, #4]
   b5656:	68db      	ldr	r3, [r3, #12]
   b5658:	4602      	mov	r2, r0
   b565a:	4620      	mov	r0, r4
    }
   b565c:	b002      	add	sp, #8
   b565e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b5662:	4718      	bx	r3
    }
   b5664:	b002      	add	sp, #8
   b5666:	bd10      	pop	{r4, pc}

000b5668 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b5668:	6803      	ldr	r3, [r0, #0]
   b566a:	689b      	ldr	r3, [r3, #8]
   b566c:	4718      	bx	r3

000b566e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b566e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b5670:	210d      	movs	r1, #13
{
   b5672:	4605      	mov	r5, r0
  size_t n = print('\r');
   b5674:	f7ff fff8 	bl	b5668 <_ZN5Print5printEc>
  n += print('\n');
   b5678:	210a      	movs	r1, #10
  size_t n = print('\r');
   b567a:	4604      	mov	r4, r0
  n += print('\n');
   b567c:	4628      	mov	r0, r5
   b567e:	f7ff fff3 	bl	b5668 <_ZN5Print5printEc>
  return n;
}
   b5682:	4420      	add	r0, r4
   b5684:	bd38      	pop	{r3, r4, r5, pc}

000b5686 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b5686:	b538      	push	{r3, r4, r5, lr}
   b5688:	4605      	mov	r5, r0
  return write(str);
   b568a:	f7ff ffdb 	bl	b5644 <_ZN5Print5writeEPKc>
   b568e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b5690:	4628      	mov	r0, r5
   b5692:	f7ff ffec 	bl	b566e <_ZN5Print7printlnEv>
  return n;
}
   b5696:	4420      	add	r0, r4
   b5698:	bd38      	pop	{r3, r4, r5, pc}

000b569a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b569a:	b530      	push	{r4, r5, lr}
   b569c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b569e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b56a0:	2a01      	cmp	r2, #1
  *str = '\0';
   b56a2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b56a6:	bf98      	it	ls
   b56a8:	220a      	movls	r2, #10
   b56aa:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b56ac:	460d      	mov	r5, r1
   b56ae:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b56b2:	fb01 5312 	mls	r3, r1, r2, r5
   b56b6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b56ba:	2b09      	cmp	r3, #9
   b56bc:	bf94      	ite	ls
   b56be:	3330      	addls	r3, #48	; 0x30
   b56c0:	3337      	addhi	r3, #55	; 0x37
   b56c2:	b2db      	uxtb	r3, r3
  } while(n);
   b56c4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b56c6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b56ca:	d9ef      	bls.n	b56ac <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b56cc:	4621      	mov	r1, r4
   b56ce:	f7ff ffb9 	bl	b5644 <_ZN5Print5writeEPKc>
}
   b56d2:	b00b      	add	sp, #44	; 0x2c
   b56d4:	bd30      	pop	{r4, r5, pc}

000b56d6 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b56d6:	b510      	push	{r4, lr}
   b56d8:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b56da:	f7ff fbd3 	bl	b4e84 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b56de:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b56e0:	6823      	ldr	r3, [r4, #0]
   b56e2:	4620      	mov	r0, r4
   b56e4:	695b      	ldr	r3, [r3, #20]
   b56e6:	4798      	blx	r3
    if (c >= 0) return c;
   b56e8:	2800      	cmp	r0, #0
   b56ea:	da08      	bge.n	b56fe <_ZN6Stream9timedReadEv+0x28>
   b56ec:	f7ff fbca 	bl	b4e84 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b56f0:	68e3      	ldr	r3, [r4, #12]
   b56f2:	1ac0      	subs	r0, r0, r3
   b56f4:	68a3      	ldr	r3, [r4, #8]
   b56f6:	4298      	cmp	r0, r3
   b56f8:	d3f2      	bcc.n	b56e0 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b56fa:	f04f 30ff 	mov.w	r0, #4294967295
}
   b56fe:	bd10      	pop	{r4, pc}

000b5700 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   b5700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5704:	4607      	mov	r7, r0
   b5706:	460c      	mov	r4, r1
   b5708:	188e      	adds	r6, r1, r2
   b570a:	460d      	mov	r5, r1
  size_t count = 0;
  while (count < length) {
   b570c:	42b5      	cmp	r5, r6
   b570e:	eba5 0804 	sub.w	r8, r5, r4
   b5712:	d007      	beq.n	b5724 <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
   b5714:	4638      	mov	r0, r7
   b5716:	f7ff ffde 	bl	b56d6 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   b571a:	1e03      	subs	r3, r0, #0
   b571c:	db02      	blt.n	b5724 <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
   b571e:	f805 3b01 	strb.w	r3, [r5], #1
  while (count < length) {
   b5722:	e7f3      	b.n	b570c <_ZN6Stream9readBytesEPcj+0xc>
    count++;
  }
  return count;
}
   b5724:	4640      	mov	r0, r8
   b5726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b572c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b572c:	4b01      	ldr	r3, [pc, #4]	; (b5734 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b572e:	4a02      	ldr	r2, [pc, #8]	; (b5738 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b5730:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b5732:	4770      	bx	lr
   b5734:	2003e6ec 	.word	0x2003e6ec
   b5738:	000b6260 	.word	0x000b6260

000b573c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b573c:	4b02      	ldr	r3, [pc, #8]	; (b5748 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b573e:	681a      	ldr	r2, [r3, #0]
   b5740:	4b02      	ldr	r3, [pc, #8]	; (b574c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b5742:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5744:	4770      	bx	lr
   b5746:	bf00      	nop
   b5748:	2003e5c4 	.word	0x2003e5c4
   b574c:	2003e6f0 	.word	0x2003e6f0

000b5750 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b5750:	2100      	movs	r1, #0
   b5752:	f7ff bcff 	b.w	b5154 <system_delay_ms>
	...

000b5758 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b5758:	4b01      	ldr	r3, [pc, #4]	; (b5760 <_GLOBAL__sub_I_RGB+0x8>)
   b575a:	2200      	movs	r2, #0
   b575c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b575e:	4770      	bx	lr
   b5760:	2003e6f4 	.word	0x2003e6f4

000b5764 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b5764:	4b01      	ldr	r3, [pc, #4]	; (b576c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b5766:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b5768:	4770      	bx	lr
   b576a:	bf00      	nop
   b576c:	2003e5c8 	.word	0x2003e5c8

000b5770 <serialEventRun>:
{
   b5770:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b5772:	4b0b      	ldr	r3, [pc, #44]	; (b57a0 <serialEventRun+0x30>)
   b5774:	b143      	cbz	r3, b5788 <serialEventRun+0x18>
   b5776:	f000 f96b 	bl	b5a50 <_Z16_fetch_usbserialv>
   b577a:	6803      	ldr	r3, [r0, #0]
   b577c:	691b      	ldr	r3, [r3, #16]
   b577e:	4798      	blx	r3
   b5780:	2800      	cmp	r0, #0
   b5782:	dd01      	ble.n	b5788 <serialEventRun+0x18>
        serialEvent();
   b5784:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b5788:	4b06      	ldr	r3, [pc, #24]	; (b57a4 <serialEventRun+0x34>)
   b578a:	b143      	cbz	r3, b579e <serialEventRun+0x2e>
   b578c:	f000 fbea 	bl	b5f64 <_Z22__fetch_global_Serial1v>
   b5790:	6803      	ldr	r3, [r0, #0]
   b5792:	691b      	ldr	r3, [r3, #16]
   b5794:	4798      	blx	r3
   b5796:	2800      	cmp	r0, #0
   b5798:	dd01      	ble.n	b579e <serialEventRun+0x2e>
        serialEvent1();
   b579a:	f3af 8000 	nop.w
}
   b579e:	bd08      	pop	{r3, pc}
	...

000b57a8 <_post_loop>:
{
   b57a8:	b508      	push	{r3, lr}
	serialEventRun();
   b57aa:	f7ff ffe1 	bl	b5770 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b57ae:	f7ff fb69 	bl	b4e84 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b57b2:	4b01      	ldr	r3, [pc, #4]	; (b57b8 <_post_loop+0x10>)
   b57b4:	6018      	str	r0, [r3, #0]
}
   b57b6:	bd08      	pop	{r3, pc}
   b57b8:	2003e74c 	.word	0x2003e74c

000b57bc <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b57bc:	4805      	ldr	r0, [pc, #20]	; (b57d4 <_Z33system_initialize_user_backup_ramv+0x18>)
   b57be:	4a06      	ldr	r2, [pc, #24]	; (b57d8 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b57c0:	4906      	ldr	r1, [pc, #24]	; (b57dc <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b57c2:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b57c4:	1a12      	subs	r2, r2, r0
   b57c6:	f000 fc39 	bl	b603c <memcpy>
    __backup_sram_signature = signature;
   b57ca:	4b05      	ldr	r3, [pc, #20]	; (b57e0 <_Z33system_initialize_user_backup_ramv+0x24>)
   b57cc:	4a05      	ldr	r2, [pc, #20]	; (b57e4 <_Z33system_initialize_user_backup_ramv+0x28>)
   b57ce:	601a      	str	r2, [r3, #0]
}
   b57d0:	bd08      	pop	{r3, pc}
   b57d2:	bf00      	nop
   b57d4:	2003f400 	.word	0x2003f400
   b57d8:	2003f404 	.word	0x2003f404
   b57dc:	000b650c 	.word	0x000b650c
   b57e0:	2003f400 	.word	0x2003f400
   b57e4:	9a271c1e 	.word	0x9a271c1e

000b57e8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b57e8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b57ea:	2300      	movs	r3, #0
   b57ec:	9300      	str	r3, [sp, #0]
   b57ee:	461a      	mov	r2, r3
   b57f0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b57f4:	f7ff fcc8 	bl	b5188 <system_ctrl_set_result>
}
   b57f8:	b003      	add	sp, #12
   b57fa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5800 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b5800:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b5802:	8843      	ldrh	r3, [r0, #2]
   b5804:	2b0a      	cmp	r3, #10
   b5806:	d008      	beq.n	b581a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b5808:	2b50      	cmp	r3, #80	; 0x50
   b580a:	d10b      	bne.n	b5824 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b580c:	4b09      	ldr	r3, [pc, #36]	; (b5834 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b580e:	681b      	ldr	r3, [r3, #0]
   b5810:	b14b      	cbz	r3, b5826 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b5812:	b003      	add	sp, #12
   b5814:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b5818:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b581a:	f7ff ffe5 	bl	b57e8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b581e:	b003      	add	sp, #12
   b5820:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5824:	2300      	movs	r3, #0
   b5826:	9300      	str	r3, [sp, #0]
   b5828:	461a      	mov	r2, r3
   b582a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b582e:	f7ff fcab 	bl	b5188 <system_ctrl_set_result>
}
   b5832:	e7f4      	b.n	b581e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b5834:	2003e708 	.word	0x2003e708

000b5838 <module_user_init_hook>:
{
   b5838:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b583a:	4812      	ldr	r0, [pc, #72]	; (b5884 <module_user_init_hook+0x4c>)
   b583c:	2100      	movs	r1, #0
   b583e:	f7ff fd45 	bl	b52cc <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b5842:	4b11      	ldr	r3, [pc, #68]	; (b5888 <module_user_init_hook+0x50>)
   b5844:	681a      	ldr	r2, [r3, #0]
   b5846:	4b11      	ldr	r3, [pc, #68]	; (b588c <module_user_init_hook+0x54>)
   b5848:	429a      	cmp	r2, r3
   b584a:	4b11      	ldr	r3, [pc, #68]	; (b5890 <module_user_init_hook+0x58>)
   b584c:	bf0c      	ite	eq
   b584e:	2201      	moveq	r2, #1
   b5850:	2200      	movne	r2, #0
   b5852:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b5854:	d001      	beq.n	b585a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b5856:	f7ff ffb1 	bl	b57bc <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b585a:	f7ff fb03 	bl	b4e64 <HAL_RNG_GetRandomNumber>
   b585e:	4604      	mov	r4, r0
    srand(seed);
   b5860:	f000 fc02 	bl	b6068 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b5864:	4b0b      	ldr	r3, [pc, #44]	; (b5894 <module_user_init_hook+0x5c>)
   b5866:	b113      	cbz	r3, b586e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b5868:	4620      	mov	r0, r4
   b586a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b586e:	2100      	movs	r1, #0
   b5870:	4808      	ldr	r0, [pc, #32]	; (b5894 <module_user_init_hook+0x5c>)
   b5872:	f7ff fd0b 	bl	b528c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b5876:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b587a:	4807      	ldr	r0, [pc, #28]	; (b5898 <module_user_init_hook+0x60>)
   b587c:	2100      	movs	r1, #0
   b587e:	f7ff bc79 	b.w	b5174 <system_ctrl_set_app_request_handler>
   b5882:	bf00      	nop
   b5884:	000b5765 	.word	0x000b5765
   b5888:	2003f400 	.word	0x2003f400
   b588c:	9a271c1e 	.word	0x9a271c1e
   b5890:	2003e704 	.word	0x2003e704
   b5894:	00000000 	.word	0x00000000
   b5898:	000b5801 	.word	0x000b5801

000b589c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b589c:	4770      	bx	lr

000b589e <_ZN9IPAddressD0Ev>:
   b589e:	b510      	push	{r4, lr}
   b58a0:	2118      	movs	r1, #24
   b58a2:	4604      	mov	r4, r0
   b58a4:	f7fe fc01 	bl	b40aa <_ZdlPvj>
   b58a8:	4620      	mov	r0, r4
   b58aa:	bd10      	pop	{r4, pc}

000b58ac <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b58ac:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b58ae:	7d03      	ldrb	r3, [r0, #20]
   b58b0:	2b06      	cmp	r3, #6
{
   b58b2:	b08d      	sub	sp, #52	; 0x34
   b58b4:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b58b6:	f100 0704 	add.w	r7, r0, #4
   b58ba:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b58be:	d012      	beq.n	b58e6 <_ZNK9IPAddress7printToER5Print+0x3a>
   b58c0:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b58c4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b58c8:	220a      	movs	r2, #10
   b58ca:	4630      	mov	r0, r6
   b58cc:	f7ff fee5 	bl	b569a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b58d0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b58d2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b58d4:	d019      	beq.n	b590a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b58d6:	2c00      	cmp	r4, #0
   b58d8:	d0f4      	beq.n	b58c4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b58da:	212e      	movs	r1, #46	; 0x2e
   b58dc:	4630      	mov	r0, r6
   b58de:	f7ff fec3 	bl	b5668 <_ZN5Print5printEc>
   b58e2:	4404      	add	r4, r0
   b58e4:	e7ee      	b.n	b58c4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b58e6:	232f      	movs	r3, #47	; 0x2f
   b58e8:	466a      	mov	r2, sp
   b58ea:	4639      	mov	r1, r7
   b58ec:	200a      	movs	r0, #10
		buf[0] = 0;
   b58ee:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b58f2:	f7ff fadf 	bl	b4eb4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b58f6:	4668      	mov	r0, sp
   b58f8:	f7fe fb90 	bl	b401c <strlen>
   b58fc:	6833      	ldr	r3, [r6, #0]
   b58fe:	4602      	mov	r2, r0
   b5900:	68db      	ldr	r3, [r3, #12]
   b5902:	4669      	mov	r1, sp
   b5904:	4630      	mov	r0, r6
   b5906:	4798      	blx	r3
   b5908:	4604      	mov	r4, r0
    }
    return n;
}
   b590a:	4620      	mov	r0, r4
   b590c:	b00d      	add	sp, #52	; 0x34
   b590e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5910 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b5910:	b510      	push	{r4, lr}
   b5912:	4b05      	ldr	r3, [pc, #20]	; (b5928 <_ZN9IPAddressC1Ev+0x18>)
   b5914:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b5916:	2211      	movs	r2, #17
   b5918:	f840 3b04 	str.w	r3, [r0], #4
   b591c:	2100      	movs	r1, #0
   b591e:	f000 fb9b 	bl	b6058 <memset>
}
   b5922:	4620      	mov	r0, r4
   b5924:	bd10      	pop	{r4, pc}
   b5926:	bf00      	nop
   b5928:	000b6288 	.word	0x000b6288

000b592c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b592c:	4603      	mov	r3, r0
   b592e:	4a07      	ldr	r2, [pc, #28]	; (b594c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b5930:	b510      	push	{r4, lr}
   b5932:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b5936:	f101 0210 	add.w	r2, r1, #16
   b593a:	f851 4b04 	ldr.w	r4, [r1], #4
   b593e:	f843 4b04 	str.w	r4, [r3], #4
   b5942:	4291      	cmp	r1, r2
   b5944:	d1f9      	bne.n	b593a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b5946:	780a      	ldrb	r2, [r1, #0]
   b5948:	701a      	strb	r2, [r3, #0]
}
   b594a:	bd10      	pop	{r4, pc}
   b594c:	000b6288 	.word	0x000b6288

000b5950 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5950:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b5952:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b5956:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b595a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b595e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b5962:	2304      	movs	r3, #4
   b5964:	6041      	str	r1, [r0, #4]
   b5966:	7503      	strb	r3, [r0, #20]
}
   b5968:	bd10      	pop	{r4, pc}
	...

000b596c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b596c:	b507      	push	{r0, r1, r2, lr}
   b596e:	4b06      	ldr	r3, [pc, #24]	; (b5988 <_ZN9IPAddressC1EPKh+0x1c>)
   b5970:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b5972:	78cb      	ldrb	r3, [r1, #3]
   b5974:	9300      	str	r3, [sp, #0]
   b5976:	788b      	ldrb	r3, [r1, #2]
   b5978:	784a      	ldrb	r2, [r1, #1]
   b597a:	7809      	ldrb	r1, [r1, #0]
   b597c:	f7ff ffe8 	bl	b5950 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5980:	b003      	add	sp, #12
   b5982:	f85d fb04 	ldr.w	pc, [sp], #4
   b5986:	bf00      	nop
   b5988:	000b6288 	.word	0x000b6288

000b598c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b598c:	7441      	strb	r1, [r0, #17]
}
   b598e:	4770      	bx	lr

000b5990 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5990:	4770      	bx	lr

000b5992 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b5992:	4770      	bx	lr

000b5994 <_ZN9USBSerial4readEv>:
{
   b5994:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b5996:	2100      	movs	r1, #0
   b5998:	7c00      	ldrb	r0, [r0, #16]
   b599a:	f7ff fbb3 	bl	b5104 <HAL_USB_USART_Receive_Data>
}
   b599e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b59a2:	bd08      	pop	{r3, pc}

000b59a4 <_ZN9USBSerial4peekEv>:
{
   b59a4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b59a6:	2101      	movs	r1, #1
   b59a8:	7c00      	ldrb	r0, [r0, #16]
   b59aa:	f7ff fbab 	bl	b5104 <HAL_USB_USART_Receive_Data>
}
   b59ae:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b59b2:	bd08      	pop	{r3, pc}

000b59b4 <_ZN9USBSerial17availableForWriteEv>:
{
   b59b4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b59b6:	7c00      	ldrb	r0, [r0, #16]
   b59b8:	f7ff fb9c 	bl	b50f4 <HAL_USB_USART_Available_Data_For_Write>
}
   b59bc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b59c0:	bd08      	pop	{r3, pc}

000b59c2 <_ZN9USBSerial9availableEv>:
{
   b59c2:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b59c4:	7c00      	ldrb	r0, [r0, #16]
   b59c6:	f7ff fb8d 	bl	b50e4 <HAL_USB_USART_Available_Data>
}
   b59ca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b59ce:	bd08      	pop	{r3, pc}

000b59d0 <_ZN9USBSerial5writeEh>:
{
   b59d0:	b513      	push	{r0, r1, r4, lr}
   b59d2:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b59d4:	7c00      	ldrb	r0, [r0, #16]
{
   b59d6:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b59d8:	f7ff fb8c 	bl	b50f4 <HAL_USB_USART_Available_Data_For_Write>
   b59dc:	2800      	cmp	r0, #0
   b59de:	9901      	ldr	r1, [sp, #4]
   b59e0:	dc01      	bgt.n	b59e6 <_ZN9USBSerial5writeEh+0x16>
   b59e2:	7c60      	ldrb	r0, [r4, #17]
   b59e4:	b120      	cbz	r0, b59f0 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b59e6:	7c20      	ldrb	r0, [r4, #16]
   b59e8:	f7ff fb94 	bl	b5114 <HAL_USB_USART_Send_Data>
   b59ec:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b59f0:	b002      	add	sp, #8
   b59f2:	bd10      	pop	{r4, pc}

000b59f4 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b59f4:	7c00      	ldrb	r0, [r0, #16]
   b59f6:	f7ff bb95 	b.w	b5124 <HAL_USB_USART_Flush_Data>

000b59fa <_ZN9USBSerialD0Ev>:
   b59fa:	b510      	push	{r4, lr}
   b59fc:	2114      	movs	r1, #20
   b59fe:	4604      	mov	r4, r0
   b5a00:	f7fe fb53 	bl	b40aa <_ZdlPvj>
   b5a04:	4620      	mov	r0, r4
   b5a06:	bd10      	pop	{r4, pc}

000b5a08 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b5a08:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b5a0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5a0e:	4604      	mov	r4, r0
   b5a10:	4608      	mov	r0, r1
   b5a12:	2100      	movs	r1, #0
   b5a14:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5a18:	4b04      	ldr	r3, [pc, #16]	; (b5a2c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b5a1a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5a1c:	2301      	movs	r3, #1
  _serial = serial;
   b5a1e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5a20:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b5a22:	4611      	mov	r1, r2
   b5a24:	f7ff fb4e 	bl	b50c4 <HAL_USB_USART_Init>
}
   b5a28:	4620      	mov	r0, r4
   b5a2a:	bd10      	pop	{r4, pc}
   b5a2c:	000b629c 	.word	0x000b629c

000b5a30 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b5a30:	7c00      	ldrb	r0, [r0, #16]
   b5a32:	2200      	movs	r2, #0
   b5a34:	f7ff bb4e 	b.w	b50d4 <HAL_USB_USART_Begin>

000b5a38 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   b5a38:	7c00      	ldrb	r0, [r0, #16]
   b5a3a:	f7ff bb7b 	b.w	b5134 <HAL_USB_USART_Is_Connected>

000b5a3e <_Z19acquireSerialBufferv>:
{
   b5a3e:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b5a40:	2214      	movs	r2, #20
{
   b5a42:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b5a44:	2100      	movs	r1, #0
   b5a46:	f000 fb07 	bl	b6058 <memset>
}
   b5a4a:	4620      	mov	r0, r4
   b5a4c:	bd10      	pop	{r4, pc}
	...

000b5a50 <_Z16_fetch_usbserialv>:
{
   b5a50:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5a52:	4c0f      	ldr	r4, [pc, #60]	; (b5a90 <_Z16_fetch_usbserialv+0x40>)
{
   b5a54:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b5a56:	a803      	add	r0, sp, #12
   b5a58:	f7ff fff1 	bl	b5a3e <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5a5c:	7821      	ldrb	r1, [r4, #0]
   b5a5e:	f3bf 8f5b 	dmb	ish
   b5a62:	f011 0101 	ands.w	r1, r1, #1
   b5a66:	d10f      	bne.n	b5a88 <_Z16_fetch_usbserialv+0x38>
   b5a68:	4620      	mov	r0, r4
   b5a6a:	9101      	str	r1, [sp, #4]
   b5a6c:	f7fe fb1f 	bl	b40ae <__cxa_guard_acquire>
   b5a70:	9901      	ldr	r1, [sp, #4]
   b5a72:	b148      	cbz	r0, b5a88 <_Z16_fetch_usbserialv+0x38>
   b5a74:	aa03      	add	r2, sp, #12
   b5a76:	4807      	ldr	r0, [pc, #28]	; (b5a94 <_Z16_fetch_usbserialv+0x44>)
   b5a78:	f7ff ffc6 	bl	b5a08 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b5a7c:	4620      	mov	r0, r4
   b5a7e:	f7fe fb1b 	bl	b40b8 <__cxa_guard_release>
   b5a82:	4805      	ldr	r0, [pc, #20]	; (b5a98 <_Z16_fetch_usbserialv+0x48>)
   b5a84:	f000 fad4 	bl	b6030 <atexit>
	return _usbserial;
}
   b5a88:	4802      	ldr	r0, [pc, #8]	; (b5a94 <_Z16_fetch_usbserialv+0x44>)
   b5a8a:	b008      	add	sp, #32
   b5a8c:	bd10      	pop	{r4, pc}
   b5a8e:	bf00      	nop
   b5a90:	2003e70c 	.word	0x2003e70c
   b5a94:	2003e710 	.word	0x2003e710
   b5a98:	000b5991 	.word	0x000b5991

000b5a9c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b5a9c:	4770      	bx	lr

000b5a9e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5a9e:	7441      	strb	r1, [r0, #17]
}
   b5aa0:	4770      	bx	lr

000b5aa2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b5aa2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5aa4:	7c00      	ldrb	r0, [r0, #16]
   b5aa6:	f7ff fa3d 	bl	b4f24 <hal_usart_available_data_for_write>
}
   b5aaa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5aae:	bd08      	pop	{r3, pc}

000b5ab0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b5ab0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b5ab2:	7c00      	ldrb	r0, [r0, #16]
   b5ab4:	f7ff fa0e 	bl	b4ed4 <hal_usart_available>
}
   b5ab8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5abc:	bd08      	pop	{r3, pc}

000b5abe <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b5abe:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5ac0:	7c00      	ldrb	r0, [r0, #16]
   b5ac2:	f7ff fa17 	bl	b4ef4 <hal_usart_peek>
}
   b5ac6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5aca:	bd08      	pop	{r3, pc}

000b5acc <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5acc:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b5ace:	7c00      	ldrb	r0, [r0, #16]
   b5ad0:	f7ff fa08 	bl	b4ee4 <hal_usart_read>
}
   b5ad4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5ad8:	bd08      	pop	{r3, pc}

000b5ada <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b5ada:	7c00      	ldrb	r0, [r0, #16]
   b5adc:	f7ff ba12 	b.w	b4f04 <hal_usart_flush>

000b5ae0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5ae0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5ae2:	7c45      	ldrb	r5, [r0, #17]
{
   b5ae4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5ae6:	b12d      	cbz	r5, b5af4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5ae8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b5aea:	b003      	add	sp, #12
   b5aec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5af0:	f7ff b9e8 	b.w	b4ec4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5af4:	7c00      	ldrb	r0, [r0, #16]
   b5af6:	9101      	str	r1, [sp, #4]
   b5af8:	f7ff fa14 	bl	b4f24 <hal_usart_available_data_for_write>
   b5afc:	2800      	cmp	r0, #0
   b5afe:	9901      	ldr	r1, [sp, #4]
   b5b00:	dcf2      	bgt.n	b5ae8 <_ZN11USARTSerial5writeEh+0x8>
}
   b5b02:	4628      	mov	r0, r5
   b5b04:	b003      	add	sp, #12
   b5b06:	bd30      	pop	{r4, r5, pc}

000b5b08 <_ZN11USARTSerialD0Ev>:
   b5b08:	b510      	push	{r4, lr}
   b5b0a:	2114      	movs	r1, #20
   b5b0c:	4604      	mov	r4, r0
   b5b0e:	f7fe facc 	bl	b40aa <_ZdlPvj>
   b5b12:	4620      	mov	r0, r4
   b5b14:	bd10      	pop	{r4, pc}
	...

000b5b18 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b5b18:	b510      	push	{r4, lr}
   b5b1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5b1e:	4604      	mov	r4, r0
   b5b20:	4608      	mov	r0, r1
   b5b22:	4611      	mov	r1, r2
   b5b24:	2200      	movs	r2, #0
   b5b26:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5b2a:	4b04      	ldr	r3, [pc, #16]	; (b5b3c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b5b2c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5b2e:	2301      	movs	r3, #1
  _serial = serial;
   b5b30:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5b32:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b5b34:	f7ff f9fe 	bl	b4f34 <hal_usart_init_ex>
}
   b5b38:	4620      	mov	r0, r4
   b5b3a:	bd10      	pop	{r4, pc}
   b5b3c:	000b62d0 	.word	0x000b62d0

000b5b40 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b5b40:	4770      	bx	lr

000b5b42 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b5b42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5b44:	4606      	mov	r6, r0
   b5b46:	4615      	mov	r5, r2
   b5b48:	460c      	mov	r4, r1
   b5b4a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b5b4c:	42bc      	cmp	r4, r7
   b5b4e:	d006      	beq.n	b5b5e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b5b50:	6833      	ldr	r3, [r6, #0]
   b5b52:	f814 1b01 	ldrb.w	r1, [r4], #1
   b5b56:	689b      	ldr	r3, [r3, #8]
   b5b58:	4630      	mov	r0, r6
   b5b5a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b5b5c:	e7f6      	b.n	b5b4c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b5b5e:	4628      	mov	r0, r5
   b5b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5b62 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b5b62:	7c00      	ldrb	r0, [r0, #16]
   b5b64:	2200      	movs	r2, #0
   b5b66:	f7ff ba05 	b.w	b4f74 <hal_i2c_write>

000b5b6a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b5b6a:	7c00      	ldrb	r0, [r0, #16]
   b5b6c:	2100      	movs	r1, #0
   b5b6e:	f7ff ba09 	b.w	b4f84 <hal_i2c_available>

000b5b72 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b5b72:	7c00      	ldrb	r0, [r0, #16]
   b5b74:	2100      	movs	r1, #0
   b5b76:	f7ff ba0d 	b.w	b4f94 <hal_i2c_read>

000b5b7a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b5b7a:	7c00      	ldrb	r0, [r0, #16]
   b5b7c:	2100      	movs	r1, #0
   b5b7e:	f7ff ba11 	b.w	b4fa4 <hal_i2c_peek>

000b5b82 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b5b82:	7c00      	ldrb	r0, [r0, #16]
   b5b84:	2100      	movs	r1, #0
   b5b86:	f7ff ba15 	b.w	b4fb4 <hal_i2c_flush>

000b5b8a <_ZN7TwoWireD0Ev>:
   b5b8a:	b510      	push	{r4, lr}
   b5b8c:	2114      	movs	r1, #20
   b5b8e:	4604      	mov	r4, r0
   b5b90:	f7fe fa8b 	bl	b40aa <_ZdlPvj>
   b5b94:	4620      	mov	r0, r4
   b5b96:	bd10      	pop	{r4, pc}

000b5b98 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5b98:	b538      	push	{r3, r4, r5, lr}
   b5b9a:	4604      	mov	r4, r0
   b5b9c:	4615      	mov	r5, r2
   b5b9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5ba2:	2200      	movs	r2, #0
   b5ba4:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5ba8:	4b09      	ldr	r3, [pc, #36]	; (b5bd0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b5baa:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5bac:	4608      	mov	r0, r1
   b5bae:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b5bb0:	4629      	mov	r1, r5
   b5bb2:	f7ff fa0f 	bl	b4fd4 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b5bb6:	30bf      	adds	r0, #191	; 0xbf
   b5bb8:	d108      	bne.n	b5bcc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b5bba:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b5bbc:	07db      	lsls	r3, r3, #31
   b5bbe:	d505      	bpl.n	b5bcc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b5bc0:	6868      	ldr	r0, [r5, #4]
   b5bc2:	f7ff fb73 	bl	b52ac <free>
    free(conf.tx_buffer);
   b5bc6:	68e8      	ldr	r0, [r5, #12]
   b5bc8:	f7ff fb70 	bl	b52ac <free>
}
   b5bcc:	4620      	mov	r0, r4
   b5bce:	bd38      	pop	{r3, r4, r5, pc}
   b5bd0:	000b6304 	.word	0x000b6304

000b5bd4 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b5bd4:	2300      	movs	r3, #0
   b5bd6:	7c00      	ldrb	r0, [r0, #16]
   b5bd8:	461a      	mov	r2, r3
   b5bda:	4619      	mov	r1, r3
   b5bdc:	f7ff b9b2 	b.w	b4f44 <hal_i2c_begin>

000b5be0 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b5be0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b5be2:	2200      	movs	r2, #0
   b5be4:	2314      	movs	r3, #20
   b5be6:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b5bea:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b5bee:	780b      	ldrb	r3, [r1, #0]
   b5bf0:	f88d 3008 	strb.w	r3, [sp, #8]
   b5bf4:	684b      	ldr	r3, [r1, #4]
   b5bf6:	9303      	str	r3, [sp, #12]
   b5bf8:	68cb      	ldr	r3, [r1, #12]
   b5bfa:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b5bfc:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b5bfe:	7a0b      	ldrb	r3, [r1, #8]
   b5c00:	9305      	str	r3, [sp, #20]
   b5c02:	a901      	add	r1, sp, #4
   b5c04:	f7ff f9ee 	bl	b4fe4 <hal_i2c_request_ex>
}
   b5c08:	b007      	add	sp, #28
   b5c0a:	f85d fb04 	ldr.w	pc, [sp], #4

000b5c0e <_ZN7TwoWire11requestFromEhjh>:
{
   b5c0e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b5c10:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b5c12:	f88d 1000 	strb.w	r1, [sp]
   b5c16:	f04f 0164 	mov.w	r1, #100	; 0x64
   b5c1a:	9103      	str	r1, [sp, #12]
   b5c1c:	bf18      	it	ne
   b5c1e:	2301      	movne	r3, #1
   b5c20:	4669      	mov	r1, sp
    size_ = size;
   b5c22:	9201      	str	r2, [sp, #4]
   b5c24:	f88d 3008 	strb.w	r3, [sp, #8]
   b5c28:	f7ff ffda 	bl	b5be0 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b5c2c:	b005      	add	sp, #20
   b5c2e:	f85d fb04 	ldr.w	pc, [sp], #4

000b5c32 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b5c32:	7c00      	ldrb	r0, [r0, #16]
   b5c34:	2200      	movs	r2, #0
   b5c36:	f7ff b98d 	b.w	b4f54 <hal_i2c_begin_transmission>

000b5c3a <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b5c3a:	7c00      	ldrb	r0, [r0, #16]
   b5c3c:	2200      	movs	r2, #0
   b5c3e:	f7ff b991 	b.w	b4f64 <hal_i2c_end_transmission>

000b5c42 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b5c42:	2101      	movs	r1, #1
   b5c44:	f7ff bff9 	b.w	b5c3a <_ZN7TwoWire15endTransmissionEh>

000b5c48 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b5c48:	2200      	movs	r2, #0
   b5c4a:	6840      	ldr	r0, [r0, #4]
   b5c4c:	4611      	mov	r1, r2
   b5c4e:	f7ff babd 	b.w	b51cc <network_ready>

000b5c52 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5c52:	2200      	movs	r2, #0
   b5c54:	6840      	ldr	r0, [r0, #4]
   b5c56:	4611      	mov	r1, r2
   b5c58:	f7ff bad8 	b.w	b520c <network_listening>

000b5c5c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5c5c:	2200      	movs	r2, #0
   b5c5e:	6840      	ldr	r0, [r0, #4]
   b5c60:	4611      	mov	r1, r2
   b5c62:	f7ff bae3 	b.w	b522c <network_get_listen_timeout>

000b5c66 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5c66:	6840      	ldr	r0, [r0, #4]
   b5c68:	2200      	movs	r2, #0
   b5c6a:	f7ff bad7 	b.w	b521c <network_set_listen_timeout>

000b5c6e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5c6e:	6840      	ldr	r0, [r0, #4]
   b5c70:	2200      	movs	r2, #0
   b5c72:	f081 0101 	eor.w	r1, r1, #1
   b5c76:	f7ff bac1 	b.w	b51fc <network_listen>

000b5c7a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5c7a:	2300      	movs	r3, #0
   b5c7c:	6840      	ldr	r0, [r0, #4]
   b5c7e:	461a      	mov	r2, r3
   b5c80:	4619      	mov	r1, r3
   b5c82:	f7ff bab3 	b.w	b51ec <network_off>

000b5c86 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5c86:	2300      	movs	r3, #0
   b5c88:	6840      	ldr	r0, [r0, #4]
   b5c8a:	461a      	mov	r2, r3
   b5c8c:	4619      	mov	r1, r3
   b5c8e:	f7ff baa5 	b.w	b51dc <network_on>

000b5c92 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5c92:	2200      	movs	r2, #0
   b5c94:	6840      	ldr	r0, [r0, #4]
   b5c96:	4611      	mov	r1, r2
   b5c98:	f7ff ba88 	b.w	b51ac <network_connecting>

000b5c9c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5c9c:	6840      	ldr	r0, [r0, #4]
   b5c9e:	2200      	movs	r2, #0
   b5ca0:	2102      	movs	r1, #2
   b5ca2:	f7ff ba8b 	b.w	b51bc <network_disconnect>

000b5ca6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5ca6:	2300      	movs	r3, #0
   b5ca8:	6840      	ldr	r0, [r0, #4]
   b5caa:	461a      	mov	r2, r3
   b5cac:	f7ff ba76 	b.w	b519c <network_connect>

000b5cb0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b5cb0:	4b02      	ldr	r3, [pc, #8]	; (b5cbc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b5cb2:	2204      	movs	r2, #4
   b5cb4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b5cb6:	4a02      	ldr	r2, [pc, #8]	; (b5cc0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b5cb8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b5cba:	4770      	bx	lr
   b5cbc:	2003e724 	.word	0x2003e724
   b5cc0:	000b6330 	.word	0x000b6330

000b5cc4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b5cc4:	2300      	movs	r3, #0
   b5cc6:	6840      	ldr	r0, [r0, #4]
   b5cc8:	461a      	mov	r2, r3
   b5cca:	f7ff ba67 	b.w	b519c <network_connect>

000b5cce <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b5cce:	6840      	ldr	r0, [r0, #4]
   b5cd0:	2200      	movs	r2, #0
   b5cd2:	2102      	movs	r1, #2
   b5cd4:	f7ff ba72 	b.w	b51bc <network_disconnect>

000b5cd8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b5cd8:	2200      	movs	r2, #0
   b5cda:	6840      	ldr	r0, [r0, #4]
   b5cdc:	4611      	mov	r1, r2
   b5cde:	f7ff ba65 	b.w	b51ac <network_connecting>

000b5ce2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b5ce2:	2200      	movs	r2, #0
   b5ce4:	6840      	ldr	r0, [r0, #4]
   b5ce6:	4611      	mov	r1, r2
   b5ce8:	f7ff ba70 	b.w	b51cc <network_ready>

000b5cec <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b5cec:	2300      	movs	r3, #0
   b5cee:	6840      	ldr	r0, [r0, #4]
   b5cf0:	461a      	mov	r2, r3
   b5cf2:	4619      	mov	r1, r3
   b5cf4:	f7ff ba72 	b.w	b51dc <network_on>

000b5cf8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b5cf8:	2300      	movs	r3, #0
   b5cfa:	6840      	ldr	r0, [r0, #4]
   b5cfc:	461a      	mov	r2, r3
   b5cfe:	4619      	mov	r1, r3
   b5d00:	f7ff ba74 	b.w	b51ec <network_off>

000b5d04 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b5d04:	6840      	ldr	r0, [r0, #4]
   b5d06:	2100      	movs	r1, #0
   b5d08:	f7ff ba98 	b.w	b523c <network_is_on>

000b5d0c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b5d0c:	6840      	ldr	r0, [r0, #4]
   b5d0e:	2100      	movs	r1, #0
   b5d10:	f7ff ba9c 	b.w	b524c <network_is_off>

000b5d14 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5d14:	6840      	ldr	r0, [r0, #4]
   b5d16:	2200      	movs	r2, #0
   b5d18:	f081 0101 	eor.w	r1, r1, #1
   b5d1c:	f7ff ba6e 	b.w	b51fc <network_listen>

000b5d20 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b5d20:	6840      	ldr	r0, [r0, #4]
   b5d22:	2200      	movs	r2, #0
   b5d24:	f7ff ba7a 	b.w	b521c <network_set_listen_timeout>

000b5d28 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5d28:	2200      	movs	r2, #0
   b5d2a:	6840      	ldr	r0, [r0, #4]
   b5d2c:	4611      	mov	r1, r2
   b5d2e:	f7ff ba7d 	b.w	b522c <network_get_listen_timeout>

000b5d32 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b5d32:	2200      	movs	r2, #0
   b5d34:	6840      	ldr	r0, [r0, #4]
   b5d36:	4611      	mov	r1, r2
   b5d38:	f7ff ba68 	b.w	b520c <network_listening>

000b5d3c <_ZN5spark12NetworkClass11isPreferredEv>:
    network_handle_t network = network_prefer(*this, prefer, nullptr);
    return Network.from(network);
}

bool NetworkClass::isPreferred() {
    return network_is_preferred(*this, nullptr);
   b5d3c:	6840      	ldr	r0, [r0, #4]
   b5d3e:	2100      	movs	r1, #0
   b5d40:	f7ff ba94 	b.w	b526c <network_is_preferred>

000b5d44 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b5d44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5d48:	b095      	sub	sp, #84	; 0x54
   b5d4a:	4614      	mov	r4, r2
   b5d4c:	460d      	mov	r5, r1
   b5d4e:	4607      	mov	r7, r0
    IPAddress addr;
   b5d50:	f7ff fdde 	bl	b5910 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b5d54:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b5d56:	221c      	movs	r2, #28
   b5d58:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b5d5a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5d5c:	f000 f97c 	bl	b6058 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b5d60:	2340      	movs	r3, #64	; 0x40
   b5d62:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b5d64:	4620      	mov	r0, r4
   b5d66:	466b      	mov	r3, sp
   b5d68:	aa0c      	add	r2, sp, #48	; 0x30
   b5d6a:	2100      	movs	r1, #0
   b5d6c:	f7ff f852 	bl	b4e14 <netdb_getaddrinfo>
    if (!r) {
   b5d70:	4604      	mov	r4, r0
   b5d72:	2800      	cmp	r0, #0
   b5d74:	d14b      	bne.n	b5e0e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5d76:	4602      	mov	r2, r0
   b5d78:	2101      	movs	r1, #1
   b5d7a:	6868      	ldr	r0, [r5, #4]
   b5d7c:	f7ff fa26 	bl	b51cc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5d80:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5d82:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5d84:	4622      	mov	r2, r4
   b5d86:	6868      	ldr	r0, [r5, #4]
   b5d88:	f7ff fa20 	bl	b51cc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5d8c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5d8e:	4681      	mov	r9, r0
        bool ok = false;
   b5d90:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5d92:	2e00      	cmp	r6, #0
   b5d94:	d03b      	beq.n	b5e0e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b5d96:	2900      	cmp	r1, #0
   b5d98:	d139      	bne.n	b5e0e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b5d9a:	6873      	ldr	r3, [r6, #4]
   b5d9c:	2b02      	cmp	r3, #2
   b5d9e:	d003      	beq.n	b5da8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b5da0:	2b0a      	cmp	r3, #10
   b5da2:	d011      	beq.n	b5dc8 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5da4:	69f6      	ldr	r6, [r6, #28]
   b5da6:	e7f4      	b.n	b5d92 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b5da8:	f1b8 0f00 	cmp.w	r8, #0
   b5dac:	d0fa      	beq.n	b5da4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b5dae:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b5db0:	a806      	add	r0, sp, #24
   b5db2:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5db4:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b5db6:	f7ff fdd9 	bl	b596c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5dba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5dbc:	1d3c      	adds	r4, r7, #4
   b5dbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5dc0:	682b      	ldr	r3, [r5, #0]
   b5dc2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5dc4:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b5dc6:	e7ed      	b.n	b5da4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b5dc8:	f1b9 0f00 	cmp.w	r9, #0
   b5dcc:	d0ea      	beq.n	b5da4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b5dce:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b5dd0:	2210      	movs	r2, #16
   b5dd2:	a801      	add	r0, sp, #4
   b5dd4:	f000 f940 	bl	b6058 <memset>
                    a.v = 6;
   b5dd8:	2306      	movs	r3, #6
   b5dda:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5dde:	ad01      	add	r5, sp, #4
   b5de0:	f104 0308 	add.w	r3, r4, #8
   b5de4:	3418      	adds	r4, #24
   b5de6:	6818      	ldr	r0, [r3, #0]
   b5de8:	6859      	ldr	r1, [r3, #4]
   b5dea:	462a      	mov	r2, r5
   b5dec:	c203      	stmia	r2!, {r0, r1}
   b5dee:	3308      	adds	r3, #8
   b5df0:	42a3      	cmp	r3, r4
   b5df2:	4615      	mov	r5, r2
   b5df4:	d1f7      	bne.n	b5de6 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b5df6:	a901      	add	r1, sp, #4
   b5df8:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b5dfa:	ad07      	add	r5, sp, #28
   b5dfc:	f7ff fd96 	bl	b592c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5e00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5e02:	1d3c      	adds	r4, r7, #4
   b5e04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5e06:	682b      	ldr	r3, [r5, #0]
   b5e08:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5e0a:	4649      	mov	r1, r9
   b5e0c:	e7ca      	b.n	b5da4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b5e0e:	9800      	ldr	r0, [sp, #0]
   b5e10:	f7fe fff8 	bl	b4e04 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b5e14:	4638      	mov	r0, r7
   b5e16:	b015      	add	sp, #84	; 0x54
   b5e18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5e1c <_ZN5spark12NetworkClass4fromEm>:
    switch (nif) {
   b5e1c:	3803      	subs	r0, #3
   b5e1e:	2802      	cmp	r0, #2
   b5e20:	bf9a      	itte	ls
   b5e22:	4b02      	ldrls	r3, [pc, #8]	; (b5e2c <_ZN5spark12NetworkClass4fromEm+0x10>)
   b5e24:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
NetworkClass& NetworkClass::from(network_interface_t nif) {
   b5e28:	4801      	ldrhi	r0, [pc, #4]	; (b5e30 <_ZN5spark12NetworkClass4fromEm+0x14>)
}
   b5e2a:	4770      	bx	lr
   b5e2c:	000b636c 	.word	0x000b636c
   b5e30:	2003e72c 	.word	0x2003e72c

000b5e34 <_ZN5spark12NetworkClass6preferEb>:
NetworkClass& NetworkClass::prefer(bool prefer) {
   b5e34:	b508      	push	{r3, lr}
    network_handle_t network = network_prefer(*this, prefer, nullptr);
   b5e36:	2200      	movs	r2, #0
   b5e38:	6840      	ldr	r0, [r0, #4]
   b5e3a:	f7ff fa0f 	bl	b525c <network_prefer>
}
   b5e3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return Network.from(network);
   b5e42:	f7ff bfeb 	b.w	b5e1c <_ZN5spark12NetworkClass4fromEm>
	...

000b5e48 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b5e48:	4b02      	ldr	r3, [pc, #8]	; (b5e54 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b5e4a:	4a03      	ldr	r2, [pc, #12]	; (b5e58 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b5e4c:	601a      	str	r2, [r3, #0]
   b5e4e:	2200      	movs	r2, #0
   b5e50:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b5e52:	4770      	bx	lr
   b5e54:	2003e72c 	.word	0x2003e72c
   b5e58:	000b6380 	.word	0x000b6380

000b5e5c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b5e5c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b5e5e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b5e60:	d902      	bls.n	b5e68 <pinAvailable+0xc>
    return false;
   b5e62:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b5e64:	b002      	add	sp, #8
   b5e66:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b5e68:	f1a0 030b 	sub.w	r3, r0, #11
   b5e6c:	2b02      	cmp	r3, #2
   b5e6e:	d81a      	bhi.n	b5ea6 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b5e70:	4c17      	ldr	r4, [pc, #92]	; (b5ed0 <pinAvailable+0x74>)
   b5e72:	7821      	ldrb	r1, [r4, #0]
   b5e74:	f3bf 8f5b 	dmb	ish
   b5e78:	f011 0101 	ands.w	r1, r1, #1
   b5e7c:	d10b      	bne.n	b5e96 <pinAvailable+0x3a>
   b5e7e:	4620      	mov	r0, r4
   b5e80:	9101      	str	r1, [sp, #4]
   b5e82:	f7fe f914 	bl	b40ae <__cxa_guard_acquire>
   b5e86:	9901      	ldr	r1, [sp, #4]
   b5e88:	b128      	cbz	r0, b5e96 <pinAvailable+0x3a>
   b5e8a:	4812      	ldr	r0, [pc, #72]	; (b5ed4 <pinAvailable+0x78>)
   b5e8c:	f7ff fa6a 	bl	b5364 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5e90:	4620      	mov	r0, r4
   b5e92:	f7fe f911 	bl	b40b8 <__cxa_guard_release>
   b5e96:	4b0f      	ldr	r3, [pc, #60]	; (b5ed4 <pinAvailable+0x78>)
   b5e98:	7818      	ldrb	r0, [r3, #0]
   b5e9a:	f7ff f8db 	bl	b5054 <hal_spi_is_enabled>
   b5e9e:	2800      	cmp	r0, #0
   b5ea0:	d1df      	bne.n	b5e62 <pinAvailable+0x6>
  return true; // 'pin' is available
   b5ea2:	2001      	movs	r0, #1
   b5ea4:	e7de      	b.n	b5e64 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b5ea6:	2801      	cmp	r0, #1
   b5ea8:	d809      	bhi.n	b5ebe <pinAvailable+0x62>
   b5eaa:	f000 f89b 	bl	b5fe4 <_Z19__fetch_global_Wirev>
   b5eae:	2100      	movs	r1, #0
   b5eb0:	7c00      	ldrb	r0, [r0, #16]
   b5eb2:	f7ff f887 	bl	b4fc4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b5eb6:	f080 0001 	eor.w	r0, r0, #1
   b5eba:	b2c0      	uxtb	r0, r0
   b5ebc:	e7d2      	b.n	b5e64 <pinAvailable+0x8>
   b5ebe:	3809      	subs	r0, #9
   b5ec0:	2801      	cmp	r0, #1
   b5ec2:	d8ee      	bhi.n	b5ea2 <pinAvailable+0x46>
   b5ec4:	f000 f84e 	bl	b5f64 <_Z22__fetch_global_Serial1v>
   b5ec8:	7c00      	ldrb	r0, [r0, #16]
   b5eca:	f7ff f823 	bl	b4f14 <hal_usart_is_enabled>
   b5ece:	e7f2      	b.n	b5eb6 <pinAvailable+0x5a>
   b5ed0:	2003e6c0 	.word	0x2003e6c0
   b5ed4:	2003e6c4 	.word	0x2003e6c4

000b5ed8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5ed8:	2823      	cmp	r0, #35	; 0x23
{
   b5eda:	b538      	push	{r3, r4, r5, lr}
   b5edc:	4604      	mov	r4, r0
   b5ede:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b5ee0:	d80a      	bhi.n	b5ef8 <pinMode+0x20>
   b5ee2:	29ff      	cmp	r1, #255	; 0xff
   b5ee4:	d008      	beq.n	b5ef8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b5ee6:	f7ff ffb9 	bl	b5e5c <pinAvailable>
   b5eea:	b128      	cbz	r0, b5ef8 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b5eec:	4629      	mov	r1, r5
   b5eee:	4620      	mov	r0, r4
}
   b5ef0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b5ef4:	f7fe bf9e 	b.w	b4e34 <hal_gpio_mode>
}
   b5ef8:	bd38      	pop	{r3, r4, r5, pc}

000b5efa <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   b5efa:	b538      	push	{r3, r4, r5, lr}
   b5efc:	4604      	mov	r4, r0
   b5efe:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   b5f00:	f7fe ffa0 	bl	b4e44 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b5f04:	28ff      	cmp	r0, #255	; 0xff
   b5f06:	d010      	beq.n	b5f2a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b5f08:	2806      	cmp	r0, #6
   b5f0a:	d804      	bhi.n	b5f16 <digitalWrite+0x1c>
   b5f0c:	234d      	movs	r3, #77	; 0x4d
   b5f0e:	fa23 f000 	lsr.w	r0, r3, r0
   b5f12:	07c3      	lsls	r3, r0, #31
   b5f14:	d409      	bmi.n	b5f2a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b5f16:	4620      	mov	r0, r4
   b5f18:	f7ff ffa0 	bl	b5e5c <pinAvailable>
   b5f1c:	b128      	cbz	r0, b5f2a <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   b5f1e:	4629      	mov	r1, r5
   b5f20:	4620      	mov	r0, r4
}
   b5f22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   b5f26:	f7fe bf95 	b.w	b4e54 <hal_gpio_write>
}
   b5f2a:	bd38      	pop	{r3, r4, r5, pc}

000b5f2c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5f2c:	4770      	bx	lr
	...

000b5f30 <_Z20acquireSerial1Bufferv>:
{
   b5f30:	b538      	push	{r3, r4, r5, lr}
   b5f32:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b5f34:	2514      	movs	r5, #20
   b5f36:	462a      	mov	r2, r5
   b5f38:	2100      	movs	r1, #0
   b5f3a:	f000 f88d 	bl	b6058 <memset>
   b5f3e:	8025      	strh	r5, [r4, #0]
   b5f40:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5f42:	4907      	ldr	r1, [pc, #28]	; (b5f60 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b5f44:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5f46:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b5f48:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5f4a:	f000 f86f 	bl	b602c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5f4e:	4904      	ldr	r1, [pc, #16]	; (b5f60 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b5f50:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5f52:	4628      	mov	r0, r5
   b5f54:	f000 f86a 	bl	b602c <_ZnajRKSt9nothrow_t>
    };
   b5f58:	60e0      	str	r0, [r4, #12]
}
   b5f5a:	4620      	mov	r0, r4
   b5f5c:	bd38      	pop	{r3, r4, r5, pc}
   b5f5e:	bf00      	nop
   b5f60:	000b63bc 	.word	0x000b63bc

000b5f64 <_Z22__fetch_global_Serial1v>:
{
   b5f64:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5f66:	4d0e      	ldr	r5, [pc, #56]	; (b5fa0 <_Z22__fetch_global_Serial1v+0x3c>)
   b5f68:	7829      	ldrb	r1, [r5, #0]
   b5f6a:	f3bf 8f5b 	dmb	ish
   b5f6e:	f011 0401 	ands.w	r4, r1, #1
{
   b5f72:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5f74:	d111      	bne.n	b5f9a <_Z22__fetch_global_Serial1v+0x36>
   b5f76:	4628      	mov	r0, r5
   b5f78:	f7fe f899 	bl	b40ae <__cxa_guard_acquire>
   b5f7c:	b168      	cbz	r0, b5f9a <_Z22__fetch_global_Serial1v+0x36>
   b5f7e:	a801      	add	r0, sp, #4
   b5f80:	f7ff ffd6 	bl	b5f30 <_Z20acquireSerial1Bufferv>
   b5f84:	aa01      	add	r2, sp, #4
   b5f86:	4621      	mov	r1, r4
   b5f88:	4806      	ldr	r0, [pc, #24]	; (b5fa4 <_Z22__fetch_global_Serial1v+0x40>)
   b5f8a:	f7ff fdc5 	bl	b5b18 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b5f8e:	4628      	mov	r0, r5
   b5f90:	f7fe f892 	bl	b40b8 <__cxa_guard_release>
   b5f94:	4804      	ldr	r0, [pc, #16]	; (b5fa8 <_Z22__fetch_global_Serial1v+0x44>)
   b5f96:	f000 f84b 	bl	b6030 <atexit>
    return serial1;
}
   b5f9a:	4802      	ldr	r0, [pc, #8]	; (b5fa4 <_Z22__fetch_global_Serial1v+0x40>)
   b5f9c:	b007      	add	sp, #28
   b5f9e:	bd30      	pop	{r4, r5, pc}
   b5fa0:	2003e734 	.word	0x2003e734
   b5fa4:	2003e738 	.word	0x2003e738
   b5fa8:	000b5f2d 	.word	0x000b5f2d

000b5fac <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5fac:	4770      	bx	lr
	...

000b5fb0 <_Z17acquireWireBufferv>:
{
   b5fb0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b5fb2:	4b0a      	ldr	r3, [pc, #40]	; (b5fdc <_Z17acquireWireBufferv+0x2c>)
   b5fb4:	6003      	str	r3, [r0, #0]
   b5fb6:	2301      	movs	r3, #1
{
   b5fb8:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b5fba:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5fbc:	4908      	ldr	r1, [pc, #32]	; (b5fe0 <_Z17acquireWireBufferv+0x30>)
   b5fbe:	2020      	movs	r0, #32
   b5fc0:	f000 f834 	bl	b602c <_ZnajRKSt9nothrow_t>
	};
   b5fc4:	2520      	movs	r5, #32
   b5fc6:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5fc8:	4905      	ldr	r1, [pc, #20]	; (b5fe0 <_Z17acquireWireBufferv+0x30>)
	};
   b5fca:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b5fcc:	4628      	mov	r0, r5
   b5fce:	f000 f82d 	bl	b602c <_ZnajRKSt9nothrow_t>
	};
   b5fd2:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b5fd6:	4620      	mov	r0, r4
   b5fd8:	bd38      	pop	{r3, r4, r5, pc}
   b5fda:	bf00      	nop
   b5fdc:	00010018 	.word	0x00010018
   b5fe0:	000b63bc 	.word	0x000b63bc

000b5fe4 <_Z19__fetch_global_Wirev>:
{
   b5fe4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5fe6:	4d0e      	ldr	r5, [pc, #56]	; (b6020 <_Z19__fetch_global_Wirev+0x3c>)
   b5fe8:	7829      	ldrb	r1, [r5, #0]
   b5fea:	f3bf 8f5b 	dmb	ish
   b5fee:	f011 0401 	ands.w	r4, r1, #1
{
   b5ff2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b5ff4:	d111      	bne.n	b601a <_Z19__fetch_global_Wirev+0x36>
   b5ff6:	4628      	mov	r0, r5
   b5ff8:	f7fe f859 	bl	b40ae <__cxa_guard_acquire>
   b5ffc:	b168      	cbz	r0, b601a <_Z19__fetch_global_Wirev+0x36>
   b5ffe:	4668      	mov	r0, sp
   b6000:	f7ff ffd6 	bl	b5fb0 <_Z17acquireWireBufferv>
   b6004:	466a      	mov	r2, sp
   b6006:	4621      	mov	r1, r4
   b6008:	4806      	ldr	r0, [pc, #24]	; (b6024 <_Z19__fetch_global_Wirev+0x40>)
   b600a:	f7ff fdc5 	bl	b5b98 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b600e:	4628      	mov	r0, r5
   b6010:	f7fe f852 	bl	b40b8 <__cxa_guard_release>
   b6014:	4804      	ldr	r0, [pc, #16]	; (b6028 <_Z19__fetch_global_Wirev+0x44>)
   b6016:	f000 f80b 	bl	b6030 <atexit>
	return wire;
}
   b601a:	4802      	ldr	r0, [pc, #8]	; (b6024 <_Z19__fetch_global_Wirev+0x40>)
   b601c:	b007      	add	sp, #28
   b601e:	bd30      	pop	{r4, r5, pc}
   b6020:	2003e750 	.word	0x2003e750
   b6024:	2003e754 	.word	0x2003e754
   b6028:	000b5fad 	.word	0x000b5fad

000b602c <_ZnajRKSt9nothrow_t>:
   b602c:	f7fe b83b 	b.w	b40a6 <_Znaj>

000b6030 <atexit>:
   b6030:	2300      	movs	r3, #0
   b6032:	4601      	mov	r1, r0
   b6034:	461a      	mov	r2, r3
   b6036:	4618      	mov	r0, r3
   b6038:	f000 b844 	b.w	b60c4 <__register_exitproc>

000b603c <memcpy>:
   b603c:	440a      	add	r2, r1
   b603e:	4291      	cmp	r1, r2
   b6040:	f100 33ff 	add.w	r3, r0, #4294967295
   b6044:	d100      	bne.n	b6048 <memcpy+0xc>
   b6046:	4770      	bx	lr
   b6048:	b510      	push	{r4, lr}
   b604a:	f811 4b01 	ldrb.w	r4, [r1], #1
   b604e:	f803 4f01 	strb.w	r4, [r3, #1]!
   b6052:	4291      	cmp	r1, r2
   b6054:	d1f9      	bne.n	b604a <memcpy+0xe>
   b6056:	bd10      	pop	{r4, pc}

000b6058 <memset>:
   b6058:	4402      	add	r2, r0
   b605a:	4603      	mov	r3, r0
   b605c:	4293      	cmp	r3, r2
   b605e:	d100      	bne.n	b6062 <memset+0xa>
   b6060:	4770      	bx	lr
   b6062:	f803 1b01 	strb.w	r1, [r3], #1
   b6066:	e7f9      	b.n	b605c <memset+0x4>

000b6068 <srand>:
   b6068:	b538      	push	{r3, r4, r5, lr}
   b606a:	4b10      	ldr	r3, [pc, #64]	; (b60ac <srand+0x44>)
   b606c:	681d      	ldr	r5, [r3, #0]
   b606e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6070:	4604      	mov	r4, r0
   b6072:	b9b3      	cbnz	r3, b60a2 <srand+0x3a>
   b6074:	2018      	movs	r0, #24
   b6076:	f7ff f911 	bl	b529c <malloc>
   b607a:	4602      	mov	r2, r0
   b607c:	63a8      	str	r0, [r5, #56]	; 0x38
   b607e:	b920      	cbnz	r0, b608a <srand+0x22>
   b6080:	4b0b      	ldr	r3, [pc, #44]	; (b60b0 <srand+0x48>)
   b6082:	480c      	ldr	r0, [pc, #48]	; (b60b4 <srand+0x4c>)
   b6084:	2142      	movs	r1, #66	; 0x42
   b6086:	f7ff f919 	bl	b52bc <__assert_func>
   b608a:	490b      	ldr	r1, [pc, #44]	; (b60b8 <srand+0x50>)
   b608c:	4b0b      	ldr	r3, [pc, #44]	; (b60bc <srand+0x54>)
   b608e:	e9c0 1300 	strd	r1, r3, [r0]
   b6092:	4b0b      	ldr	r3, [pc, #44]	; (b60c0 <srand+0x58>)
   b6094:	6083      	str	r3, [r0, #8]
   b6096:	230b      	movs	r3, #11
   b6098:	8183      	strh	r3, [r0, #12]
   b609a:	2100      	movs	r1, #0
   b609c:	2001      	movs	r0, #1
   b609e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b60a2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b60a4:	2200      	movs	r2, #0
   b60a6:	611c      	str	r4, [r3, #16]
   b60a8:	615a      	str	r2, [r3, #20]
   b60aa:	bd38      	pop	{r3, r4, r5, pc}
   b60ac:	2003e5c8 	.word	0x2003e5c8
   b60b0:	000b63bd 	.word	0x000b63bd
   b60b4:	000b63d4 	.word	0x000b63d4
   b60b8:	abcd330e 	.word	0xabcd330e
   b60bc:	e66d1234 	.word	0xe66d1234
   b60c0:	0005deec 	.word	0x0005deec

000b60c4 <__register_exitproc>:
   b60c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b60c8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b6184 <__register_exitproc+0xc0>
   b60cc:	4606      	mov	r6, r0
   b60ce:	f8d8 0000 	ldr.w	r0, [r8]
   b60d2:	461f      	mov	r7, r3
   b60d4:	460d      	mov	r5, r1
   b60d6:	4691      	mov	r9, r2
   b60d8:	f000 f856 	bl	b6188 <__retarget_lock_acquire_recursive>
   b60dc:	4b25      	ldr	r3, [pc, #148]	; (b6174 <__register_exitproc+0xb0>)
   b60de:	681c      	ldr	r4, [r3, #0]
   b60e0:	b934      	cbnz	r4, b60f0 <__register_exitproc+0x2c>
   b60e2:	4c25      	ldr	r4, [pc, #148]	; (b6178 <__register_exitproc+0xb4>)
   b60e4:	601c      	str	r4, [r3, #0]
   b60e6:	4b25      	ldr	r3, [pc, #148]	; (b617c <__register_exitproc+0xb8>)
   b60e8:	b113      	cbz	r3, b60f0 <__register_exitproc+0x2c>
   b60ea:	681b      	ldr	r3, [r3, #0]
   b60ec:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b60f0:	6863      	ldr	r3, [r4, #4]
   b60f2:	2b1f      	cmp	r3, #31
   b60f4:	dd07      	ble.n	b6106 <__register_exitproc+0x42>
   b60f6:	f8d8 0000 	ldr.w	r0, [r8]
   b60fa:	f000 f847 	bl	b618c <__retarget_lock_release_recursive>
   b60fe:	f04f 30ff 	mov.w	r0, #4294967295
   b6102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b6106:	b34e      	cbz	r6, b615c <__register_exitproc+0x98>
   b6108:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b610c:	b988      	cbnz	r0, b6132 <__register_exitproc+0x6e>
   b610e:	4b1c      	ldr	r3, [pc, #112]	; (b6180 <__register_exitproc+0xbc>)
   b6110:	b923      	cbnz	r3, b611c <__register_exitproc+0x58>
   b6112:	f8d8 0000 	ldr.w	r0, [r8]
   b6116:	f000 f838 	bl	b618a <__retarget_lock_release>
   b611a:	e7f0      	b.n	b60fe <__register_exitproc+0x3a>
   b611c:	f44f 7084 	mov.w	r0, #264	; 0x108
   b6120:	f7ff f8bc 	bl	b529c <malloc>
   b6124:	2800      	cmp	r0, #0
   b6126:	d0f4      	beq.n	b6112 <__register_exitproc+0x4e>
   b6128:	2300      	movs	r3, #0
   b612a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b612e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b6132:	6863      	ldr	r3, [r4, #4]
   b6134:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b6138:	2201      	movs	r2, #1
   b613a:	409a      	lsls	r2, r3
   b613c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b6140:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b6144:	4313      	orrs	r3, r2
   b6146:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b614a:	2e02      	cmp	r6, #2
   b614c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b6150:	bf02      	ittt	eq
   b6152:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b6156:	4313      	orreq	r3, r2
   b6158:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b615c:	6863      	ldr	r3, [r4, #4]
   b615e:	f8d8 0000 	ldr.w	r0, [r8]
   b6162:	1c5a      	adds	r2, r3, #1
   b6164:	3302      	adds	r3, #2
   b6166:	6062      	str	r2, [r4, #4]
   b6168:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b616c:	f000 f80e 	bl	b618c <__retarget_lock_release_recursive>
   b6170:	2000      	movs	r0, #0
   b6172:	e7c6      	b.n	b6102 <__register_exitproc+0x3e>
   b6174:	2003e7f4 	.word	0x2003e7f4
   b6178:	2003e768 	.word	0x2003e768
   b617c:	00000000 	.word	0x00000000
   b6180:	000b529d 	.word	0x000b529d
   b6184:	2003e62c 	.word	0x2003e62c

000b6188 <__retarget_lock_acquire_recursive>:
   b6188:	4770      	bx	lr

000b618a <__retarget_lock_release>:
   b618a:	4770      	bx	lr

000b618c <__retarget_lock_release_recursive>:
   b618c:	4770      	bx	lr

000b618e <link_code_end>:
	...

000b6190 <dynalib_user>:
   b6190:	402d 000b 4069 000b 4091 000b 4095 000b     -@..i@...@...@..
   b61a0:	0000 0000 6441 6661 7572 7469 4d20 5250     ....Adafruit MPR
   b61b0:	3231 2031 6143 6170 6963 6974 6576 5420     121 Capacitive T
   b61c0:	756f 6863 7320 6e65 6f73 2072 6574 7473     ouch sensor test
   b61d0:	4d00 5250 3231 2031 6f6e 2074 6f66 6e75     .MPR121 not foun
   b61e0:	2c64 6320 6568 6b63 7720 7269 6e69 3f67     d, check wiring?
   b61f0:	4d00 5250 3231 2031 6f66 6e75 2164 2000     .MPR121 found!. 
   b6200:	6f74 6375 6568 2064 2000 6f74 6375 6568     touched . touche
   b6210:	0064 0000                                   d...

000b6214 <_ZTVN5spark13EthernetClassE>:
	...
   b621c:	533b 000b 5331 000b 5327 000b 531d 000b     ;S..1S..'S...S..
   b622c:	5311 000b 5305 000b 5d05 000b 5d0d 000b     .S...S...]...]..
   b623c:	52f9 000b 52f1 000b 52e7 000b 52dd 000b     .R...R...R...R..
   b624c:	5e35 000b 5d3d 000b 5d45 000b               5^..=]..E]..

000b6258 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b6258:	0800 1810 2820 3830 7061 0070 5925 252d     .... (08app.%Y-%
   b6268:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   b6278:	7361 7463 6d69 0065                         asctime.

000b6280 <_ZTV9IPAddress>:
	...
   b6288:	58ad 000b 589d 000b 589f 000b               .X...X...X..

000b6294 <_ZTV9USBSerial>:
	...
   b629c:	5993 000b 59fb 000b 59d1 000b 5619 000b     .Y...Y...Y...V..
   b62ac:	59c3 000b 5995 000b 59a5 000b 59f5 000b     .Y...Y...Y...Y..
   b62bc:	5701 000b 59b5 000b 598d 000b               .W...Y...Y..

000b62c8 <_ZTV11USARTSerial>:
	...
   b62d0:	5a9d 000b 5b09 000b 5ae1 000b 5619 000b     .Z...[...Z...V..
   b62e0:	5ab1 000b 5acd 000b 5abf 000b 5adb 000b     .Z...Z...Z...Z..
   b62f0:	5701 000b 5a9f 000b 5aa3 000b               .W...Z...Z..

000b62fc <_ZTV7TwoWire>:
	...
   b6304:	5b41 000b 5b8b 000b 5b63 000b 5b43 000b     A[...[..c[..C[..
   b6314:	5b6b 000b 5b73 000b 5b7b 000b 5b83 000b     k[..s[..{[...[..
   b6324:	5701 000b                                   .W..

000b6328 <_ZTVN5spark9WiFiClassE>:
	...
   b6330:	5ca7 000b 5c9d 000b 5c93 000b 5c49 000b     .\...\...\..I\..
   b6340:	5c87 000b 5c7b 000b 5d05 000b 5d0d 000b     .\..{\...]...]..
   b6350:	5c6f 000b 5c67 000b 5c5d 000b 5c53 000b     o\..g\..]\..S\..
   b6360:	5e35 000b 5d3d 000b 5d45 000b               5^..=]..E]..

000b636c <CSWTCH.109>:
   b636c:	e6d0 2003 e724 2003 e72c 2003               ... $.. ,.. 

000b6378 <_ZTVN5spark12NetworkClassE>:
	...
   b6380:	5cc5 000b 5ccf 000b 5cd9 000b 5ce3 000b     .\...\...\...\..
   b6390:	5ced 000b 5cf9 000b 5d05 000b 5d0d 000b     .\...\...]...]..
   b63a0:	5d15 000b 5d21 000b 5d29 000b 5d33 000b     .]..!]..)]..3]..
   b63b0:	5e35 000b 5d3d 000b 5d45 000b               5^..=]..E]..

000b63bc <_ZSt7nothrow>:
   b63bc:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b63cc:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
   b63dc:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
   b63ec:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
   b63fc:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
   b640c:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
   b641c:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
   b642c:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
   b643c:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
   b644c:	646e 632e                                    nd.c.

000b6451 <link_const_data_end>:
   b6451:	00          	.byte	0x00
	...

000b6454 <link_constructors_location>:
   b6454:	000b430d 	.word	0x000b430d
   b6458:	000b48a1 	.word	0x000b48a1
   b645c:	000b5345 	.word	0x000b5345
   b6460:	000b55e5 	.word	0x000b55e5
   b6464:	000b5609 	.word	0x000b5609
   b6468:	000b572d 	.word	0x000b572d
   b646c:	000b573d 	.word	0x000b573d
   b6470:	000b5759 	.word	0x000b5759
   b6474:	000b5cb1 	.word	0x000b5cb1
   b6478:	000b5e49 	.word	0x000b5e49
